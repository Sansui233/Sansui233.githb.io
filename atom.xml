<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://sansui233.com</id>
    <title>Sansui's blog</title>
    <updated>2023-02-08T17:36:08.112Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <author>
        <name>Sansui</name>
        <email>sansuilnm@gmail.com</email>
        <uri>https://sansui233.com/about.ico</uri>
    </author>
    <link rel="alternate" href="https://sansui233.com"/>
    <link rel="self" href="https://sansui233.com/atom.xml"/>
    <subtitle>记录学习和生活的个人博客</subtitle>
    <icon>https://sansui233.com/favicon.ico</icon>
    <rights>All rights reserved 2022, Sansui</rights>
    <entry>
        <title type="html"><![CDATA[杂谈20230101-20230207]]></title>
        <id>https://sansui233.com/memos?id=2023-02-08</id>
        <link href="https://sansui233.com/memos"/>
        <updated>2023-02-08T00:27:03.000Z</updated>
        <summary type="html"><![CDATA[INFP 的无趣生活]]></summary>
        <content type="html"><![CDATA[<h2>2023-02-09</h2>
<p>又是什么都没干的一天，拖延晚期。更新了 About 页的头图，很久没画插画了我看不得这些，看了之后现在非常想去画插画。太多对于自己不重要但又重要的事了。已经四年了，看到微博上有人说：“得过的人会知道，即便是事后恢复了，也不可能回到原来状态了”。非常真实，某种程度上这是永久性的，拖延症也是之前没有的，DDL 完全不管用了。虽然已经恢复了笑的能力，但很明显没法保持住开心了，需要刻意想很多能让自己开心一点的事情。理解痛苦的能力直接从 0 变成了 Level Max。 之前听鹿乃的 hello how are you（是日文名，念出来就是英文），第一次听我直接落泪好吗。虽然这首歌表面上很萌很开心，但我感觉其实唱的并不高兴。后面翻出来一看歌词，是真的不开心。</p>
<h2>2023-02-07</h2>
<ul>
<li>最好用的 Chrome 网页翻译插件推荐：<a href="https://chrome.google.com/webstore/detail/immersive-translate/bpoadfkcbjbfhfodiogcnhhhpibjhbnh">Immersive Translate</a></li>
</ul>
<p>之前也提过 Chrome 浏览器自带翻译失效但不想开全局代理的问题，没有提插件级的网页翻译，主要是没遇到好用的。今天这个就非常好用，逐段中英对照，可配置多家翻译的 API。</p>
<ul>
<li>廉价储存服务：<a href="https://www.backblaze.com/b2/cloud-storage.html">B2 Cloud Storage</a> 有 10GB 的免费额度，白嫖的选项又增加了。</li>
<li>老文章但写得非常棒 ：<a href="https://github.com/Liaoct/blog/blob/master/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E6%A8%A1%E5%BC%8F%E4%B8%8B%EF%BC%8C%E5%89%8D%E7%AB%AF%E4%B8%8E%E5%90%8E%E7%AB%AF%E4%BA%BA%E5%91%98%E5%A6%82%E4%BD%95%E5%90%88%E4%BD%9C%EF%BC%9F.md">前后端分离模式下，前端与后端人员如何合作？</a></li>
</ul>
<p>现在已经 API 设计的工具已经很成熟了。不过有点感触是，前后端分离在简化小型应用的开发流程上其实是负效果，增加人员成本与沟通成本，好处需要到大型单体项目开发才会体现出来。但是，这么大的单体项目有多少呢？外包还是 PHP 的天下。</p>
<p>我从一开始就分离是属于个人强迫症，感觉各模块干各的，符合流水线工作，干净，PHP 写过，表示不能忍，为什么要在 HTML 里夹业务代码？ 不过这好像点和 JSX 也差不多的哈……而且真的比 JSX 简单。</p>
<p>其它好处还是有的：</p>
<ol>
<li>出现许多小型的单独前后端的项目，可灵活组合使用，适用更多业务场景。在此之前靠插件，现在靠 restful。</li>
<li>人员技术栈缩窄，便于在各自的领域做出更高的质量。如果仍然是前后端一体的开发，很给想象做到今天这种程度的复杂交互，即使是有设计师，因为总是后端比较重要。当然技术栈缩窄不代表学习的新东西变少，前端完全没有要停的趋势，因为很多问题依然没有得到解决，离生态稳定还有很长的路要走</li>
</ol>
<hr/>
<p>最近想把 Memos 重构成有后端的，短文还是应该能在线发布，而且想重新设计一下不要把量感做这么大（但架不住我写得长啊……）。另一方面，依然想使用静态博客的部署，可安全性上，认证什么的又必需要用到后端，可我又不想维护一套博客的后端（<del>部署时想白嫖很困难</del>），就算开源有现成的解决方案，还是要自己部署和运维（到底是有多懒）。现在考虑的是 Netfify CMS 这类不用自己部署、有现成 Auth、存储可以继续静态页面白嫖 Github （不好意思）的无头 CMS 解决方案。不过能这样做也是因为我的东西不多，数据也不复杂。 mdx 本身也可以内嵌很多东西，调用外部的资源渲染也没什么问题。CMS 层也只是让我可以不开电脑写字，二进制数据还是会放在其他地方的。</p>
<p>还有想把 Memos 做成可配置的插件什么的，以后再做别的插件。说真的，Next.js 的渲染方式反而不太好做插件系统了，启动一时爽，还是得要自己写路由。目前没考虑太多 ，完全没想要插件API要开放哪些，要定制哪些，以怎样的形式存在。 个人用是完全不需要的，只是为了方便别人用的时候把不用的功能好开关一下。 i18n也没有想好用不用，想做只是纯粹得想看看全中文 UI 是什么想的……我也不可能真的发布多语言版本文章是吧，机翻又不如不翻。</p>
<p>为什么优先考虑无服务器，主要是降低运维成本（真的不是因为能白嫖）。稳定好用的服务器不仅不便宜，还容易一被打就嗝了。能在云平台托管的项目稳定太多，能用的 CDN 起飞。但问题是会造成项目过于分散，前端后端存储都是分开托管的，一个 Waline 就布署得够烦人了。但是！！像是，有 Github 这种平台，托管文件做 web 服务的同时可以解决认证和存储的问题，只是需要一个第三方做这个随时能操作 Github 仓库的中介，毕竟还是要个后端与 github 通信做认证，浏览器 API 还没有到如此神通广大的地步。</p>
<hr/>
<p>再说点题外话，今天看了一个视频，叫“那些只有长相普通的女生，才会知道的人生真相”。是有点好奇才点进去的。说真的，我从小到大的女性朋友， 80%都长得好看，而且有一半是长得非常好看，没有 gakki 和 kanna  那一卦的，但秒杀那啥 48 的绝对不止一两个。高中室友清晰记得一个长了我觉得世界上最好看的丹凤眼，一个长得很桂纶镁但比桂纶镁更好看。我的近亲姐姐都算好看，到我宿舍之后被我室友夸好看的那种，然后我妈还会被同学妈妈夸好看……总之就是不太会接触到“普通长相”，顶多是普通好看。我对普通好看的标准大概是关晓彤/杨紫这样的。但我看男生除了发小和几个哥哥，感觉大部分都很普通……发小是真的帅，我的几个哥哥还挺好看的。我面基的网友也超级好看，可以演电影的那种好看……然后这些人里要化妆的要双眼皮的通常不是因为觉得自己不好看，而是喜欢化妆或者走风格拍抖音啥的，只有一个由于肤色不均但只要肤色白了就非常好看的妹子算是美化性质的化妆。前些天还有个妹妹，有点刘亦菲，但比刘亦菲好看（毕竟刘亦菲全家最丑），吃了三次饭我都不敢提出和她合影，因为她实在过于好看了，好看到我觉得这不是普通人能去随意合影的长相，她大概都要被合影烦了吧。</p>
<p>好了，我说完好看了。看到里面“普通长相”有一点是，不会因为自己的长相而心情变好，有好看的朋友因为长得好看，哭了之后在镜子面前补装，补着补着心情就好了，因为发现自己实在太好看了！我：擦，原来这不是所有人都会有的感受啊。我记得以前一个长得不太好看但人非常好的同学，觉得自己长的也还是可以的，以至于我一直觉得每个人应该都能看到自己好看的地方。反正我每次看照片，觉得自己哪里长得不太好看都要被室友骂，“你还嫌不够好看”？但是说穿得不太好看，就没有人有意见，因为我觉得，长得好看和穿得好看，有一个就行了（狗头）</p>
<p>但是除了长相，还有一个问题，就算我没有表情，或者我维持着一个没有情绪但明显面部肌肉有在发力的表情，就能根据情况被自动解读出“诧异”“开心”“不解”“不满”等多种情绪，实乃餐桌万金油。但有时候也很苦恼， 因为我刚才什么都没想，我可能都没听他们在说什么，完全不知道他们怎么理解出这些的。</p>
<h2>2023-02-02</h2>
<p>居然就 2 月2 了。吃局的时间总是过得很快。</p>
<p>然后饭局上有阿姨说到谁谁谁也在成都，让去吃饭介绍对象什么的，听得我想当场打电话告诉 HR 我毁约。上次是被迫，这次就是主动。感觉真的是没有办法，日复一日日复一日，这个世界对习惯孤独的人太不友好了。可以天天对着代码，对着画布，对着琴，对着书，都可以，但不是要，对着人。就一个想法，只会影响我学习，一群人聚在一起只想着为了他妈的繁衍后代。绝了。</p>
<p>虽然我说得不好听，但并没有想骂他们的意思，因为没有人有恶意，我也没有机会表达自己的意愿。当然我也不愿意表达了，只会发生冲突，他们只会想“纠正”。人就不能别想着硬改变别人的想法吗？</p>
<p>小时候我讨厌做每天一页还要写作文的假期作业，我妈说“你现在讨厌，你以后就得感谢了”，还有“你现在不觉得你妈是对的，等你长大了你就理解了”。到现在就是：“现在的年轻人说不想生二胎，到后来没几个不生的”，“当年不结婚的人，老了全后悔了”。尼玛，后面的我不知道，但前面的都是瞎扯，我觉得从小到大发生的根本性转变的只有一点：人不该用自己的视角去要求别人，多点换位思考。其他的，该喜欢的依然喜欢，该讨厌的依然讨厌。</p>
<p>当然我现在都觉得每天一页的假期作业根本没必要，就是个做题修罗场，我到现在也不喜欢纯做题。就做数学题动脑筋还好，主要还得每天写作文……有什么好记的呢！我后来写手账尝试入坑三次都失败了，亏我排得那么好看，只有少部分人才能每天写日记。有写日记这时间不如投入到别的学习当中。写作一直以来对我都是修罗场，实在是不懂为了什么而写作。有表达欲有目的的话不用人催都能写很长。看我写 memo 的频率和长度都知道了。原本这个模块是想做碎片化的日记一类的，没有想到我这个人天生不适合碎片化的发言。而且用静态博客生成做短发言实在不方便，每次写都要打开电脑，还是得用上数据库。易用性和易开发维护性总是要做一些折中。用数据库有什么不好的？不好白嫖（对不起献丑了）还有我讨厌数据库的安装包带 GUI 的……老命令行工具人了</p>
<h2>2023-01-30</h2>
<p>今天是长篇的闲吹。</p>
<p>自从谷歌翻译退出中国，Chrome 自带的翻译不开全局代理就没法用了。一直没有管，因为要翻译的场景比较少，遇到真的需要翻译/懒得看长文的时候就用 Bob 划词翻译了。今天有需要又看了下，发现还挺怪的。只要开一次全局代理，后续翻译走的就是 SwitchyOmega。看了一下 v2ex，有人测试说只有第一次会强制直连，后续的 API 请求是走代理的。好怪，不知道什么原理。</p>
<p>经常看到有人把博客背景色设成黄色，说是白色太刺眼了，为了护眼。我寻思着白色的书也没人说刺眼，你们就不能把显示器的亮度调低点？舒适的白色应该和你在当前环境下翻开一本白色的书差不多，略微亮一点。我一直都习惯比较低的亮度，亮度稍微一高就觉得晃眼睛，不拉窗帘睡觉到早上绝对是蒙着头的，晚上手机亮度调到最低后还要降低 50%的白点值才会比较舒服……除非是有专门设计夜间模式的应用。要是问“你为什么想到设计夜间模式”，我还蛮想说 Why not，晚上的这些电子设备真的是很刺眼，久了容易青光眼。而且，比较暗的环境光会更容易集中注意力。</p>
<p>类似于我爸每次看我拉上窗帘都要打开，说眼睛看不到对视力不好。得了吧，让我看屏幕反光吗？</p>
<p>有好多有用的 C 端工具是大量的数据 + CURD 整合。说实话，CURD 容易复用，处理数据却是必不可少但又脏又累的活，是一切的前置条件。连 ai 也不能例外。能有好的数据集，那什么都有了。正对应着内容产业一向重要但也一向不被受重视，因为是需要大量人做、谁都能做的重复工作，程序员会觉得麻烦，除非是一个爬虫就能搞定的了。医院很多病其实都比较常见开方也比较重复，我妈说这么多处方，不能写一个系统把常见病自助开方吗。我：？？？不是处方多了机器就能开出正确的处方的啊喂，病人的身体信息还得全面，知道是什么常见病就开方不如网上搜……也就感冒狂吃中成药可以这么干了。而且医院也会有“流行药”，中成药经常在换着流行，也有万年不动的抗病毒和板蓝根。抗生素还得看生产厂家，一般是新药出来的时候，吃的时候比较少，基本每次到需要依赖抗生素的时候我都发现换了个流行的抗生素。电视上经常打广告的复方药在医院不怎么流行，<del>可能是觉得有损他们的专业水平</del>因为医院供货商通常不需要在电视打广告做零售生意。胃药就是的碳酸铝镁和奥美拉唑。真的就网上都能搜，开方有什么好开的，还是看病比较难一些。</p>
<h2>2023-01-27</h2>
<p>我爱上网冲浪，被迫营业一个多月了终于可以静下来，还是冲浪看 Tech News 比较放松，不管是多无聊的新闻都觉得很好看。RSS 攒了很多没看，看的太多了列举不完，印象最深的还是 2022 年前端生态圈的统计数据。</p>
<ul>
<li><a href="https://2022.stateofjs.com/">State of JS 2022</a></li>
</ul>
<p>再关注一下裁员问题</p>
<ul>
<li><a href="https://blog.pragmaticengineer.com/apple-job-cuts-tide/">Apple: The Only Big Tech Giant Going Against the Job Cuts Tide</a></li>
</ul>]]></content>
        <category label="Diary"/>
        <published>2023-02-08T00:27:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[部署饥荒联机版Linux服务器]]></title>
        <id>https://sansui233.com/posts/dontstarvetogether-linux-server</id>
        <link href="https://sansui233.com/posts/dontstarvetogether-linux-server"/>
        <updated>2022-12-28T14:52:41.000Z</updated>
        <summary type="html"><![CDATA[此文为 Docker 版饥荒联机版服务器在 CentOS 下的部署教程。]]></summary>
        <content type="html"><![CDATA[<p>此文为 Docker 版饥荒联机版服务器在 CentOS 下的部署教程。</p>
<blockquote>
<p>为什么要部署Linux服务器？因为玩到后面，只要一联机连主机都卡，闲得想试</p>
</blockquote>
<p><a href="https://www.roci.ltd/dstserver/">这个中文教程</a>讲了native steam版的安装方法，包括了Cent OS缺少的库，坑全踩了一遍写得十分详细。官方文档实在太拉，基本就是没有文档，像跨平台缺库这种事情也没有解决，没有脚本。不过教程中对于网络环境问题与mod的配置方法提得不多。</p>
<p>我这里使用的是<a href="https://hub.docker.com/r/jamesits/dst-server">Docker版本</a>。优点是</p>
<ul>
<li>国内的云平台对于Dockerhub的加速后走内网流量，不使用公网流量下载镜像。而且国内的服务器公网下载速度堪忧。</li>
<li>Docker版本的文档写得对用户友好，易上手</li>
<li>文件管理集中，比较方便。原版服务器的mod和存档是分开放的</li>
</ul>
<p>也有一些在国内环境下比较要命的缺点</p>
<ul>
<li>网络环境原因，无法下载创意工坊mod。最近靠改 hosts 也不行了。</li>
<li>如果想开代理下载，docker容器开代理（设置环境变量）非常麻烦，具体来讲
<ol>
<li>如果每次开关代理都创建一个新的容器，Steam和游戏文件的更新都得再触发一次，又消耗流量又慢</li>
<li>如果动态修改容器的配置文件，docker需要重启才能生效，所有docker服务都得宕机一会儿</li>
</ol>
</li>
</ul>
<h2>准备</h2>
<ul>
<li>一台至少2G内存的服务器</li>
<li>使用ssh连接服务器、传输并管理文件的技能</li>
</ul>
<h2>Docker的安装</h2>
<p>由于涉及到Docker镜像和Dockerhub加速的问题，具体安装步骤建议看docker的文档和各个云平台。</p>
<p>我使用的腾讯云，见<a href="https://cloud.tencent.com/document/product/1207/45596">安装 Docker 并配置镜像加速源</a>，大约花费2分钟。</p>
<h2>服务器防火墙设置</h2>
<p>需要放行 10999，11000，12346，12347 这四个端口的UDP流量。</p>
<ul>
<li>在国内云平台的控制台-防火墙中，放行服务器的这四个端口</li>
<li>如果服务器上iptables有流量拦截，也需要放行</li>
</ul>
<h2>饥荒服务器镜像的启动</h2>
<pre><code class="language-bash">mkdir ${HOME}/Klei # 创建存放数据有文件夹

# 拉取镜像并在前台启动
# 由于Steam要更新，根据网络环境可能要等比较久的时间
# 如果实在无法连接，再考虑给容器挂个代理下载。但总体不建议容器挂代理，因为我不清楚挂代理后steam是连接到服务器的游戏端口还是连到代理的端口上去了，取消容器的代理也非常麻烦。
docker run --name dst -v ${HOME}/Klei:/data -p 10999-11000:10999-11000/udp -p 12346-12347:12346-12347/udp -it jamesits/dst-server:latest
</code></pre>
<p>以上命令执行期间，可以去准备一下游戏存档和Mod相关文件。</p>
<h2>准备游戏存档和Mod</h2>
<p>我使用的Mac，饥荒的游戏文件相关目录位于</p>
<pre><code class="language-bash"># 游戏存档
SAVE_DIR=&quot;~/Documents/Klei/DoNotStarveTogether/324927772/Cluster_1&quot;
# mod下载目录
MODS_DIR=&quot;~/Library/Application Support/Steam/steamapps/common/Don&#x27;t Starve Together/dontstarve_steam.app/Contents/mods&quot; #

cd $SAVE_DIR # 进入存档目录
</code></pre>
<p>windows可以在饥荒游戏内点数据打开游戏存档，并在Steam中查看游戏的安装目录。</p>
<h3>准备存档信息</h3>
<p>点开<a href="https://accounts.klei.com/account/info">饥荒的账号</a>，记下 <strong>Klei User ID</strong>。如果没有就注册一个。</p>
<p>然后，新建<code>adminlist.txt</code>，并写入你的<strong>Klei User ID。</strong></p>
<pre><code class="language-bash">$ vim adminlist.txt
# 写入以下内容
你的Klei User ID
</code></pre>
<p>点开<a href="https://accounts.klei.com/account/game/servers?game=DontStarveTogether">自建饥荒服务器的页面</a>，新建一个服务器，记下生成的Server Token，其他不用管。</p>
<p>然后，新建 <code>cluster_token.txt</code>，并写入Server Token。</p>
<pre><code class="language-bash">$ vim cluster_token.txt
# 写入以下内容
你的Server Token
</code></pre>
<h3>准备mods</h3>
<p>不开mod的可以跳过这一步。</p>
<p>由于国内环境没法下载mod，需要把对应的mod文件复制过来。我为了方便就全复制了</p>
<pre><code class="language-bash">cp -r &quot;$MODS_DIR&quot; mods
</code></pre>
<p>先查看一下目前的存档开了哪些mod。</p>
<pre><code class="language-bash">$ cat Master/modoverrides.lua
# 开启的mod
return {
  [&quot;workshop-1172839635&quot;]={ configuration_options={ icebox_freeze=&quot;0.5&quot; }, enabled=true },
  [&quot;workshop-1294206358&quot;]={ configuration_options={  }, enabled=true },
}
</code></pre>
<p>然后，编辑 <code>mods/dedicated_server_mods_setup.lua</code> 文件，写入上面的mod编号</p>
<pre><code class="language-bash">$ vim mods/dedicated_server_mods_setup.lua
# 写入以下内容
ServerModSetup(&quot;workshop-1294206358&quot;)
ServerModSetup(&quot;workshop-1595631294&quot;)
</code></pre>
<p>至此，游戏存档和mods就准备好了。</p>
<h2>转移游戏存档和Mods至服务器</h2>
<p>上传游戏存档到服务器。打包和上传文件我一般使用GUI操作，用命令行的话是这样</p>
<pre><code class="language-bash">cd ~/Documents/Klei/DoNotStarveTogether/324927772/
tar -cvf Cluster_1.tar.gz Cluster_1 
scp Cluster_1.tar.gz root@myserver:/Klei/
</code></pre>
<p>如果之前的服务器连接还在，等无新日志输出后使用control+c退出容器。如果已断开连接，重新用ssh登录服务器。</p>
<p>然后可以看到在服务器的 <code>~/Klei/DoNotStarveTogether</code> 中有了一个 <code>Cluster_1</code> 存档。</p>
<p><strong>转移游戏存档时，需要注意有两种情况（来自<a href="https://hub.docker.com/r/jamesits/dst-server">文档</a>）</strong></p>
<p>第一种情况是，如果自己的存档开启了洞穴，把自己的存档覆盖过去即可。</p>
<pre><code class="language-bash">rm -rf Cluster_1
tar -xvf Cluster_1.tar.gz
</code></pre>
<p>第二种情况是，自己的存档没有开启洞穴，需要</p>
<ol>
<li>在自己的电脑中，存档的上一级有个 <code>client_save</code> 。复制下面的除了 <code>session</code> 外的所有文件到服务器的 <code>Cluster_1/save</code> 。</li>
<li>自己存档中的 <code>Cluster_1/save/session</code> 需要删除，其他文件可以直接覆盖</li>
</ol>
<p>存档覆盖完毕后，启动容器</p>
<pre><code class="language-bash">docker start -a dst
# 如果最后输出了 Sim Pause 就代表 OK 了，按 ctrl + c 退出，容器继续后台运行
</code></pre>
<p>我第一次装Mod启动时发生了一个莫名其妙的 <strong>Segmentation fault</strong>，程序退出了，但是第二次启动就好了。搜了一下<a href="https://github.com/Jamesits/docker-dst-server/issues/48">相关issue</a>，完全相同的情况，也是CentOS，偶尔发生，难稳定复现。</p>
<h2>游玩</h2>
<p>之前自己的存档叫什么名字就搜什么名字，加入就完事，好好玩吧w</p>
<hr/>
<p>参考资料：</p>
<ul>
<li><a href="https://hub.docker.com/r/jamesits/dst-server">jamesits/dst-server</a></li>
<li><a href="https://github.com/Jamesits/docker-dst-server/issues">docker-dst-server issue</a></li>
<li><a href="https://www.roci.ltd/dstserver/">饥荒独立服务器入门级快速搭建</a></li>
<li><a href="https://dontstarve.fandom.com/wiki/Guides/Don%E2%80%99t_Starve_Together_Dedicated_Servers">Guides/Don&#x27;t Starve Together Dedicated Servers - Fandom</a></li>
</ul>]]></content>
        <category label="摸鱼"/>
        <published>2022-12-28T14:52:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[记一道题排列组合题解]]></title>
        <id>https://sansui233.com/posts/记一道题排列组合题解</id>
        <link href="https://sansui233.com/posts/记一道题排列组合题解"/>
        <updated>2022-11-18T03:25:07.000Z</updated>
        <summary type="html"><![CDATA[难得在网上遇到有认真在做题的人，在此表示深深的感谢。]]></summary>
        <content type="html"><![CDATA[<p>难得在网上遇到有认真在做题的人，在此表示深深的感谢。另外个人不太会写题解类的文，权当一个记事了。</p>
<h2>题目</h2>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/8B414946-F4D4-479C-9092-9AEA8EC26FA3.jpeg" alt="8B414946-F4D4-479C-9092-9AEA8EC26FA3.jpeg"/></p>
<p>题来自 tg 里玩 ai 的小水群，很多人第一眼是想全排列剪枝……阶乘的复杂度得瞎了。</p>
<p>不过看到求方案数，帮人面试时被动态规划虐过的直觉在告诉我，凡事让写方案数不枚举方案的，很可能能写动态规划。</p>
<p>于是从动态规划的方面想去了。</p>
<h2>关于素数</h2>
<p>这个题有一个非常奇怪的地方，就是要和为素数。我不禁想，和为素数是对解题方法有什么加成吗？</p>
<p>（其实因为我最初看走眼了，以为是子集里所有数为素数，且和为素数，还以为素数和有什么定理）</p>
<p>素数的特殊点在于乘法分解，至于加法上与一般数有什么不同，以凡人视角未曾听说。并且这题还并不限于子集中取用什么数。</p>
<p>综上，和为素数对解题方法不仅没有什么加成，反而是多了个如何判断一个数是不是素数的问题。</p>
<p>至于如何判断素数，在 Leetcode 204，略，也没什么很省时间的方法，就是筛，不算简单。</p>
<h2>子集动态规划</h2>
<p>既然素数对于解题思路没有加成，就按一般数处理，很快写出了下面的思路：</p>
<ol>
<li>一维dp中存下和为当前数的方案数</li>
<li>遍历更新dp，把新数n拆分成已有数+余数，按余数从大到小（已有数从小到大），把所有已有数的拆分方案加起来，再+1，即可得到当前数的子集数。
<ol>
<li>需要注意的是，为了保证不重复，也就是保证子集序列递增，已有数不会超过n/2（余数不会小于n/2）</li>
</ol>
</li>
<li>更新dp时，也要计算新数n是否为质数，是的话把其子集数加入最终结果（算质数见leetcode 204）</li>
<li>由于取值范围1-2000，最大和为1000^2，100w，也是dp要遍历的次数。</li>
</ol>
<p>下面的图是在解释什么叫“遍历但不用枚举子集”时写的，也是上述dp的步骤。</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/2E06B8C3-1DF4-492D-A009-55F4D7A041CE.jpeg" alt=""/></p>
<p>发题人仔细看了，并且手动枚举了10个数后，指出，我这会漏掉10=1+2+3+4。（后面自己发现这样还漏了145和235，后面越漏越多）</p>
<p>仔细回顾了一下之前的思路，发现我的问题出在递增的判断上。我当时认为保证递增序列，只要保证已有数小于余数就行，所以余数&gt;2/n。</p>
<p>但不是的，比如n=10时，已有数为6，余数为4，6拆分为1+2+3就行，1234还是序列递增的。6拆分为2+4、1+5就不行。</p>
<p>归根结底就是我只把余数算了较大的一半，因为余数较大的一半肯定能保证序列递增。如果不想漏情况，余数要全部遍历，但怎么保证序列递增呢？比如6+4，如何只拆到1+2+3+4，不算1+5+4和2+4+4呢？</p>
<p>于是更新了一下递增的条件：</p>
<ul>
<li>已有数的拆分的子序列最大数小于余数，则拆分方案合法</li>
</ul>
<p>再更新dp时余数范围：</p>
<ul>
<li>余数从n取到1，分别计算子集数后再sum。</li>
</ul>
<p>这样可以保证思路没问题了，但这个“已有数的拆分的子序列最大数小于余数”，明显当前dp只统计了子集数，根本不知道各个子集中具体最大数的情况。因此，我改成了个二维dp，含义和过程如下图：</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/6D139DD5-A95F-4467-BA58-3B5E61D9207D.jpeg" alt=""/></p>
<p>简单总结一下，整个问题我简化到了求“和为 n 的子集数”，并利用二维动规从 1 求到 n。 n 是不是素数单独算的。</p>
<p>并且发现，其实更新每一行时，都是把上一行为止的方阵以“/”方向45度拆开，mask掉右边部分，按行求和后，从右往左地写进下一行，还能用gpu加个速（不是）。</p>
<h2>另一种解法</h2>
<p>发题人在看了我的新方案后，说在上面看到了类似杨辉三角之类的东西。并且得出了另一个方案：</p>
<blockquote>
<p>和为 n 的子集组合数，为多项式 (x^n+1)(x^(n-1)+1)(x^(n-2)+1)…(x+1) 的 x^n 项系数</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/IMG_5434.JPG" alt="多项式展开"/></p>
<p>（我本来没理解，是死缠烂打地问才知道他在说什么）</p>
<p>仔细一想真的是这个理， x^n 对应的多项式系数就是排列组合到 n 的所有方案数了，也天然没有重复用数的问题。怎么想到的，神。</p>
<p>所以现在问题是：怎么求 (x^n+1)(x^(n-1)+1)(x^(n-2)+1)…(x+1)的多项式系数。</p>
<p>（当时已经不想动脑了，又是死缠烂打地问）</p>
<p>其实迭代就能算，因为 F(n) = x^n • F(n-1) + F(n-1)，对应系数直接挪位置后复制粘贴再相加就好了。</p>
<h2>空间复杂度</h2>
<p>这里有点难以定义 n 具体指哪个，默认 n = 2000 。</p>
<p>我的解法是要 1000^4 的空间去存方案数，矩阵中有很多地方是空的，有点浪费。</p>
<p>后者的解法要1000^2 空间去存多项式系数。省很多。</p>
<h2>时间复杂度</h2>
<p>以我的动规方法，时间复杂度为在 O(n^6)，准确说是O(n^2(n^2+1)(2n^2+1)/6)，因为要算到 (n/2)^2，且内部还有已填矩阵按行遍历。</p>
<p>以后者的的解法，时间复杂度为 O(n^3)，因为多项式的 n 需要到 (n/2)^2。</p>
<p>线性筛到 (n/2)^2 的素数, 时间复杂度为 O(n^2)。</p>
<hr/>
<p>总得来说还是数学好的强啊。</p>
<p>另外还有一个人非让我看完一个 30 分钟的高斯素数判断法，结果我一直在想 dp，搞得他怨念深重 hh</p>]]></content>
        <category label="学习"/>
        <published>2022-11-18T03:25:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[理解 Rust 闭包与环境变量所有权]]></title>
        <id>https://sansui233.com/posts/rust-closure-and-ownership</id>
        <link href="https://sansui233.com/posts/rust-closure-and-ownership"/>
        <updated>2022-06-14T01:51:30.000Z</updated>
        <summary type="html"><![CDATA[本文将以最简单易懂的方式讲述 Rust 中的闭包与环境变量所有权的关系]]></summary>
        <content type="html"><![CDATA[<p>本文将以（自认为）最简单易懂的方式讲述 Rust 中的闭包与环境变量所有权的关系。在现存的类似中文教程中，要么语言表述歧义太大，逻辑上难以理清；要么试图把事情总结得过于复杂。实际上闭包对于环境变量所有权的处理规则是非常简单的。</p>
<p>阅读本文需要的基础： Rust 变量的所有权、引用与借用、函数、traits。</p>
<h2>什么是 Rust 的闭包</h2>
<p>Rust 中的闭包是<strong>一种函数</strong>。与 Rust 普通函数不同，它可以<strong>捕获函数外部的变量并使用</strong>。</p>
<p>基本语法：<code>|参数列表| {函数体}</code></p>
<pre><code class="language-rust">fn main() {
    let x = 1;
    let sum = |y: i32| { x + y }; // 说明： 闭包 sum 接收一个参数 y，且捕获前面的 x = 1, 返回 x + y
    println!(&quot;{}&quot;, sum(99)); // 输出 100

    let sum2 = |y :i32| x + y + 1; // 也可以省略花括号
    println!(&quot;{}&quot;, sum2(99)); // 输出 101
}
</code></pre>
<blockquote>
<p>说明： 闭包 sum 接收一个参数 y，返回 x + y。其中 x 是第一行定义的 <code>let x = 1;</code> ，为闭包外部的变量。</p>
</blockquote>
<p>像 <code>x</code> 这样在定义在闭包外部、可被闭包直接访问的变量，我们称为“<strong>环境变量</strong>”。</p>
<h2>闭包中环境变量的所有权</h2>
<p>有 rust 基础的人应该知道，普通的 rust 函数的传入参数有三种形式</p>
<ol>
<li>所有权 move（默认行为）。</li>
<li>可变借用，形式为 <code>&amp;mut param</code></li>
<li>不可变借用 ，形式为 <code>&amp;param</code></li>
</ol>
<blockquote>
<p>上述为 rust 所有权基础知识，不再赘述。</p>
</blockquote>
<p>普通的 rust 函数可以使用参数，但无法使用环境变量。闭包则加上了 <strong>捕获当前环境变量</strong> 的功能。</p>
<p><strong>捕获当前环境变量</strong> 仅仅是指闭包 “知道有哪些环境变量”。闭包在使用环境变量时，依然可能会对环境变量执行三种操作：</p>
<ol>
<li>所有权 move</li>
<li>可变借用</li>
<li>不可变借用</li>
</ol>
<p>具体是执行了哪种操作呢？这个问题就比较复杂了，我们可以从上面的例子出发。</p>
<p>回顾上面的例子，对于环境变量 <code>x</code> ，首先排除了所有权 move。</p>
<pre><code class="language-rust">    let x = 1;
    let sum = |y: i32| { x + y }; // 使用了 x
    println!(&quot;{}&quot;, sum(99)); // 输出 100

    let sum2 = |y :i32| x + y + 1; // 再次使用了 x
    println!(&quot;{}&quot;, sum2(99)); // 输出 101
</code></pre>
<blockquote>
<p>说明： <code>x</code> 在 sum1 中使用后，还能在 sum2 中再次使用，说明 <code>x</code> 所有权没有 move。</p>
</blockquote>
<p>实际上，上述例子的 <code>x</code> 在闭包中是作为 <strong>不可变借用</strong> 使用的，<strong>因为这个闭包实现了 <code>Fn</code> trait</strong>。</p>
<h2>闭包的三种 traits</h2>
<p>闭包是一种函数，它的三种 traits 恰好对应了三种处理所有权的方式。</p>
<p>三种 traits 如下（划重点，请背下来）：</p>
<ol>
<li><code>FnOnce</code>：表示此闭包调用时会获取环境变量所有权（<strong>所有权 move</strong>)。因此取名 <code>FnOnce</code>，表示此闭包只能执行一次，因为再次执行时，环境变量可能由于之前所有权 move 过，已经没法用了。</li>
<li><code>FnMut</code>  ：表示此闭包调用时会对环境变量进行<strong>可变借用</strong>，可能会修改环境变量</li>
<li><code>Fn</code> ： 表示此闭包调用时会对环境变量进行<strong>不可变借用</strong>，不会修改环境变量</li>
</ol>
<p>并且，<strong>一个闭包可以同时实现多个 traits</strong>。比如实现了 <code>Fn</code> 的闭包也一定实现了 <code>FnOnce</code> （后续解释）。</p>
<p>上面是从“对环境变量如何处理所有权” 来解释三个 traits，大部分教程也是这么写，但个人并不推荐完全按这样去理解。因为上述表述中，三个 traits 看起来是互不重叠的（实际并非如此），导致可能会出现这样的疑问：</p>
<blockquote>
<p>“实现了 <code>Fn</code> 的闭包说是对环境变量进行了不可变借用，那怎么还能同时实现 <code>FnOnce</code> ，去获取环境变量的所有权呢？到底是仅仅进行不可变借用，还是获取了所有权呢？”</p>
</blockquote>
<p>但是看三个 traits 的源代码，可以直接回答上述问题：是不可变借用。虽然确实也实现了 <code>FnOnce</code>（所有权 move） ，但并没有调用 <code>FnOnce</code> 的 call 函数，而是调用了 <code>Fn</code>(不可变借用) 的 call 函数。</p>
<pre><code class="language-rust">pub trait Fn&lt;Args&gt; : FnMut&lt;Args&gt; {
    extern &quot;rust-call&quot; fn call(&amp;self, args: Args) -&gt; Self::Output;
}

pub trait FnMut&lt;Args&gt; : FnOnce&lt;Args&gt; {
    extern &quot;rust-call&quot; fn call_mut(&amp;mut self, args: Args) -&gt; Self::Output;
}

pub trait FnOnce&lt;Args&gt; {
    type Output;

    extern &quot;rust-call&quot; fn call_once(self, args: Args) -&gt; Self::Output;
}
</code></pre>
<blockquote>
<p>分析：如果 <code>FnOnce</code> 的 call 函数被调用，则直接传入了 <code>self</code> ，也就是获取了当前的环境变量的所有权，自然运行一次后回被销毁。而 <code>Fn</code> 的 call 函数传入的是不可变借用 <code>&amp;self</code>。</p>
</blockquote>
<p>并且会发现， <code>Fn</code> 的前提是实现了 <code>FnMut</code> ,  <code>FnMut</code> 的前提是实现了 <code>FnOnce</code> 。</p>
<ul>
<li>从继承关系来讲： <code>Fn</code> 继承 <code>FnMut</code> 继承 <code>FnOnce</code></li>
<li>从访问变量的权限范围来讲： <code>Fn</code> &lt; <code>FnMut</code> &lt; <code>FnOnce</code></li>
</ul>
<p>也可以说，<strong>闭包就算实现了 <code>FnOnce</code> 也不一定会用到所有权 move，因为可能还实现了 <code>Fn</code> ，那么环境变量的所有权会按 <code>Fn</code> 处理</strong>。</p>
<hr/>
<p>由于上述继承关系，如果定义一个普通函数，参数需要传入 <code>FnOnce</code> ，实际上也可以传入 <code>Fn</code> 。</p>
<pre><code class="language-rust">fn fn_once&lt;F&gt;(func: F)
where
    F: FnOnce(usize) -&gt; bool, // 传入闭包
{
    println!(&quot;{}&quot;, func(3));
}

fn main() {
    let x = vec![1, 2, 3];
    let closure = |z|{z == x.len()}; // 此闭包实现了 Fn、 FnMut 和 FnOnce
    fn_once(closure); // Fn 可传入标注为 FnOnce 的参数
    println!(&quot;{:?}&quot;, x); // x 还能用，所有权没转移

    let closure2 = move |z|{z == x.len()}; //  此闭包只实现了 FnOnce，因为 x 被强制转移所有权到闭包内部
    fn_once(closure2); // 传入 FnOnce
    println!(&quot;{:?}&quot;, x); // 报错，x 已经没了
}
</code></pre>
<blockquote>
<p>说明：fn_once 需要接收 <code>FnOnce</code> 的闭包作为参数，但传入 <code>Fn</code> 也是合理的，编译器也会按照 <code>Fn</code> 的调用方式处理为不可变借用，并不会因为标注着 <code>FnOnce</code> 而变成所有权 move。</p>
</blockquote>
<blockquote>
<p>闭包对所有权的处理并不会随着标注改变，标注仅仅是为了取悦编译器  ——鲁迅</p>
</blockquote>
<h2>闭包实现三种 traits</h2>
<p>上述例子中，直接标注了闭包实现了三种 traits，但并没有具体说明为什么这么写就是实现了三种 traits。这是本节需要说明的内容。</p>
<p>闭包实现 traits 是<strong>隐式</strong>的。也就是说，你不用（也没法）标注这个闭包是实现的哪个 traits。具体实现了哪些 traits 是根据你的闭包写法决定的。</p>
<p>1. 实现<code>FnOnce</code></p>
<p>所有的闭包都自动实现了 <code>FnOnce</code> 。不用特别做什么。</p>
<p>但更普遍的情况是，定义闭包时会顺带实现 <code>Fn</code> 或者 <code>FnMut</code> 。如果想要只实现 <code>FnOnce</code>，不要实现另外两个，需要用 <code>move</code> 。这个关键字会强制转移所有权，使闭包无法满足 <code>FnMut</code> 和 <code>Fn</code> 的条件。</p>
<ul>
<li>例：只实现了 <code>FnOnce</code> 的闭包</li>
</ul>
<pre><code class="language-rust">fn main() {
    let x = [1,2,3];
    
    let closure2 = move |z|{z == x.len()}; // 只实现了 FnOnce，所有权转移
    closure2(2);
    
    println!(&quot;{:?}&quot;, x); // 报错，x 所有权被转移
}
</code></pre>
<p>2. 实现<code>FnMut</code></p>
<p>在闭包中修改外部变量，即实现了 <code>FnMut</code> （自然也实现了 <code>FnOnce</code> ），同时没有实现 <code>Fn</code> 。</p>
<pre><code class="language-rust">fn main() {
    let mut x = vec![1,2,3];

    let mut closure = ||{x.push(4);}; // 修改了外部的 x, 实现了 FnMut， x 所有权没有转移
    closure();
    
    println!(&quot;{:?}&quot;, x);
}
</code></pre>
<p>3. 实现<code>Fn</code></p>
<p>在闭包中访问外部变量，不做任何修改，即实现了 <code>Fn</code> （自然也实现了 <code>FnMut</code>  和 <code>FnOnce</code>）。</p>
<pre><code class="language-rust">fn main() {
    let s = String::new();

    let update_string =  || println!(&quot;{}&quot;,s); // 访问外部的 s, 实现了 Fn

    exec(update_string);
    exec1(update_string);
    exec2(update_string);
}

fn exec&lt;F: FnOnce()&gt;(f: F)  { // Fn 也可以传到 FnOnce 类型
    f() // 调用的是 Fn，所有权不会转移
}

fn exec1&lt;F: FnMut()&gt;(mut f: F)  { // Fn 也可以传到 FnMut 类型
    f()
}

fn exec2&lt;F: Fn()&gt;(f: F)  {
    f()
}
</code></pre>
<h2>闭包自身的所有权</h2>
<p>上述讨论的是闭包对于环境变量的所有权处理。那闭包自己呢？当闭包自己作为变量被传来传去时，是 Copy 还是所有权 Move？</p>
<p>答案是，<code>Fn</code> 是 Copy，<code>FnMut</code> 和 <code>FnOnce</code> 是所有权 Move。</p>
<pre><code class="language-rust">fn main() {
    let x = vec![1,2,3];

    let closure = |z:usize|{ z == x.len()}; // 实现了 Fn
    outter(closure); // 通过
    outter(closure); // 通过

    let closure2 = |z:usize|{ x.push(4);z == x.len()}; // 实现了 FnMut
    outter(closure2); // 通过
    outter(closure2); // 报错, closure2 的所有权已被转移
}

fn outter&lt;T&gt;(mut func: T)
where T: FnMut(usize) -&gt; bool { // Fn 可以传到 FnMut 标注的参数上
    let a = func;
}
</code></pre>
<p>这是非常合理的，对应着 Rust 借用的规则</p>
<blockquote>
<p>在同一时间点，对于同一个变量，<strong>要么</strong>只能有一个可变借用(FnMut)，<strong>要么</strong>只能有<strong>多个不可变借用</strong>(Fn)。</p>
</blockquote>
<p>至于 <code>FnOnce</code>，对环境变量的访问权限这么大，还想 Copy？只能是所有权 move。</p>
<h2>一些建议</h2>
<p>如果遇到函数的参数也是一个函数，需要标注 trait 的场景，又不知道到底应该标注哪一个 trait，建议先标注 Fn ( 权限最小的 trait)，由编译器提示后再进行修改。</p>
<p>另外，闭包的所有权部分并不推荐背书，尤其不推荐总结为正交规则。三个 traits 的区别与联系在代码层面非常简单且容易分析，总结为正交规则反而是把简单的事情复杂化，而且难记。</p>
<p>如果仍然难懂，可评论提出，后续改进。</p>]]></content>
        <category label="学习"/>
        <published>2022-06-14T01:51:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[PPT母版的制作与使用方法]]></title>
        <id>https://sansui233.com/posts/PPT母版的制作与使用方法</id>
        <link href="https://sansui233.com/posts/PPT母版的制作与使用方法"/>
        <updated>2021-11-12T00:08:55.000Z</updated>
        <content type="html"><![CDATA[<p>由于我需要批量编辑 PPT 的样式，但 PPT 没有组件化样式的概念，所以开始学习用母版。虽然之前也用过，但始终不明白 PPT 的迷之逻辑，有时候是调整了母版但不生效，或者调整了局部结果别的地方也被影响了……今天才大概明白了一点（还是 Figma 和 Sketch 的逻辑好懂……）所以从我的角度说一下对 PPT 的模版理解。</p>
<p>这个问题明显视频解释更好，但不太想做视频（躺）因为每次做视频前写大纲都要写好久……</p>
<p>图源 Github，图片不显示挂代理 Please。</p>
<h2>概念解释（母版/版式/主题）</h2>
<h3>打开母版</h3>
<p>母版的入口在“视图”→“幻灯片母版”。Mac 上的快捷键是 <code>command + alt + 1</code>。</p>
<h3>什么是母版和版式</h3>
<p>母版，是 PPT “主题” 的一部分，可以对多张幻灯片的排版进行统一的修改。</p>
<p>我们日常制作的 PPT，都会基于一个母版（虽然很多人不去用）。在后面的内容中，对于日常制作的 PPT，我会称为“PPT 内容”。</p>
<p>一个正常的母版包含着一个“<strong>幻灯片母版</strong>”和多个“<strong>版式</strong>”。</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/Screen%20Shot%202021-11-11%20at%207.03.24%20PM.png" alt="母版结构"/></p>
<h3>样式继承</h3>
<p>“<strong>版式</strong>” 会继承 “<strong>幻灯片母版</strong>”（以下简称为 <strong>母版</strong> ）中的一些元素的样式（包括位置、字体、大小、颜色等）。也就是说，只要更改 <strong>母版</strong> 里的样式，<strong>版式</strong>也会自动更新。</p>
<p>所以是哪些元素可以被继承呢？在菜单栏里的“母版版式”中，有五个选项分别是</p>
<ul>
<li>标题</li>
<li>正文</li>
<li>日期和时间</li>
<li>页脚</li>
<li>页码</li>
</ul>
<p>以上就是所有样式可以被继承的元素。是的，你在母版上<strong>只有这五个元素的样式可以被继承</strong>。你可以尝试在“主题”选项中打开任何一个母版，会发现所有母版都是这五个元素。你无法擅自增加其他可以被继承的元素。</p>
<p>并且以上显示的每个元素在母版上都只能设置一种样式，**你无法同时给标题设置两种样式。**也就是说，如果你有设置 <strong>一级标题 + 二级标题</strong> 样式的需求，你无法通过设置 <strong>母版</strong> 上的样式实现二级标题。你只能通过 <strong>版式</strong> 去设置二级标题。</p>
<p>另外 <strong>背景</strong> 也可以被继承，但它属于在正式的 PPT 内容中不可编辑的元素。</p>
<h2>如何编辑元素样式</h2>
<p>选中元素，在“开始”选项里编辑即可。</p>
<p>通常情况下，母版的排版需要设置得尽可能通用，之后的每个版式都将以母版为基准进行编辑。母版本身并不能直接被 PPT 内容所使用，做 PPT 能选择使用的只有继承了母版样式的 <strong>版式</strong>。</p>
<h2>版式如何继承母版</h2>
<h3>继承标题样式</h3>
<p>选择一个版式（或点“插入版式”），给菜单里的“标题”打上勾。</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/Screen%20Shot%202021-11-11%20at%207.35.09%20PM.png" alt="标题继承"/></p>
<p>需要注意的是，如果你在“开始”里添加一个文本框，移动到标题的位置，并不会被 PPT 识别成标题。从外面粘进来的文本框也一样，只会被识别为“一个普通的文本框”。之后批量更新标题的样式时，也并不会被更新。</p>
<p>所以在版式中设置正确设置标题的方法只有这一个——给标题打上勾。</p>
<p><strong>想设置二级标题怎么办？</strong></p>
<p>母版没有二级标题，只能用下面说的占位符实现。</p>
<h3>继承正文样式</h3>
<p>继承正文的正确方法，是点击上一节图中的“插入占位符” ，有好几个选项，一般选内容就可以了。</p>
<p>此占位符生成的文本框的样式和 <strong>母版</strong> 中完全一致。如果说 <strong>母版</strong> 的样式是全局变量，<strong>版式</strong> 中再次修改的样式就是局部变量。</p>
<p>对于<strong>修改过的部分</strong>，母版里对正文的更新不会导致版式中的正文更新。比如：</p>
<ul>
<li>母版中的正文字号是 20px</li>
<li>版式中的正文字号不变，但是给加粗了</li>
<li>修改母版中的正文字号为 22px</li>
<li>版式中的正文字号变成 22px，但仍然加粗。</li>
</ul>
<blockquote>
<p>❗️注意：不要从“开始”里新建文本框！也不要从母版界面外粘贴进来！</p>
<p>原因同上，非占位符生成的文本框，对其样式的修改并不会真正改到“正文”的样式。使用的时候就会发现了，更新版式了但 PPT 内容样式完全没更新……这种情况就是因为版式中的文本框不是占位符生成的</p>
</blockquote>
<p>所以如何实现二级标题？</p>
<ul>
<li>添加一个占位符</li>
<li>添加文本样式</li>
</ul>
<h3>继承日期和时间、页脚、页码</h3>
<p>在版式中，给“页脚”打上勾，以上三者的样式都会被继承。</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/Screen%20Shot%202021-11-11%20at%2011.06.48%20PM.png" alt="其他继承"/></p>
<h2>使用版式</h2>
<p>退出“幻灯片母版”模式。在正常 PPT 内容的模式下，菜单栏“开始”中有个“版式”选项。在侧边栏选中一页（或多页） PPT，点击相应版式即可应用。</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/image-20211111231429427.png" alt="使用版式"/></p>
<blockquote>
<p>如果你原来的 PPT 内容不是依靠版式中的“占位框”排版，而是靠手动创建的文本框，那直接应用版式是不会修改你原来的内容的。</p>
<p>换言之，如果想要达到批量、统一的排版效果，需要尽可能地应用版式给出的占位框，而不是手动创建的文本框。</p>
</blockquote>
<p>在“<strong>版式</strong>”选项下面一个“<strong>重置</strong>”，意思是重置到当前版式初始的样式。</p>
<p>比如，版式中的文字样式设置的是纯文本，而 PPT 内容里修改为列表。点击“<strong>重置</strong>”会使得列表项消失，再次成为纯文本。</p>
<h3>刷新修改后版式</h3>
<p>版式修改后，有时候并不会自动应用到 PPT 内容上去，这种情况通常发生于在 PPT 内容中对占位框的位置、大小等等进行了调整。</p>
<p>比如在 PPT 内容中调整过的占位框位置，将不再随着版式更新。如果需要复位（让占位框位置能随着版式更新），可以再应用一次版式。</p>
<h3>正在使用的版式</h3>
<p>对于被用到了 PPT 内容上的版式，只有一个建议：<strong>不要随便删除版式里的元素！</strong></p>
<p>这会导致已经被应用了版式的内容格式被清除……你需要去重新应用版式。</p>
<hr/>
<p>写在后面的吐槽：排版这种事情 <strong>Layout + 组件化</strong> 不香吗！PPT  的样式复用实在太局限了。看祖传的 PPT 排版看得我脑壳疼，每一页的小标题位置都不一样，字体也是用得乱七八糟的。排版的四原则，“亲密”“对齐”“对比”“重复”，每一项都很重要。但一项都不满足这是怎么做到的！强迫症（伪）哭晕在厕所。</p>
<p>其实还是祖传的习惯问题。比如 Word，小时候我也是有过一段时间空格排版居中……现在谁还空格排版居中，我见一个打一个（狗头）</p>]]></content>
        <category label="摸鱼"/>
        <published>2021-11-12T00:08:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[纯函数与算法]]></title>
        <id>https://sansui233.com/posts/pure-function</id>
        <link href="https://sansui233.com/posts/pure-function"/>
        <updated>2021-09-25T12:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>自从接触了纯函数，刷算法题刷得举步维艰。</p>
<blockquote>
<p>什么是纯函数：同样的传入参数，一定可以得到相同的输出</p>
</blockquote>
<p>纯函数又被称为无副作用的函数，不会改变外部的状态。</p>
<p>比如在 JS 中，array.slice()对数组的切片，返回的是一个新的数组，为纯函数。</p>
<p>相对的，array.splice()对数组的插入与删除是对于原数组操作，不是纯函数。</p>
<p>纯函数的意义，在于保证<strong>不会对函数外部的状态有隐式的修改</strong>。这在大型的、遍地都是状态的系统中非常重要。如果不保证纯函数，多个函数内部去修改了同一外部状态，容易出现意想不到的 Bug。</p>
<h2>图的邻接矩阵定义</h2>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/g61Yvh.jpg" alt=""/></p>
<pre><code class="language-ts">let map = {
  point: [&#x27;V0&#x27;, &#x27;V1&#x27;, &#x27;V2&#x27;, &#x27;V3&#x27;, &#x27;V4&#x27;, &#x27;V5&#x27;, &#x27;V6&#x27;, &#x27;V7&#x27;],
  side: [
    [0, 1, 0, 1, 1, 0, 0, 0],
    [1, 0, 1, 0, 1, 0, 0, 0],
    [0, 1, 0, 0, 0, 1, 0, 0],
    [1, 0, 0, 0, 0, 0, 1, 0],
    [1, 1, 0, 0, 0, 0, 1, 0],
    [0, 0, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 1, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 1, 0],
  ]
}
</code></pre>
<h2>图深度遍历的非纯函数实现</h2>
<pre><code class="language-ts">// DFS 深度优先遍历，从 第 index 个节点开始. visited 记录已访问的节点，全局共用一个 visited
function DFStraverse(index: number = 0, visited = [map.point[0]]) {
  if (visited.length === map.point.length) {
    console.log(visited.toString())
    return
  }

  map.side[index].forEach((isSide, targetv) =&gt; {
    if (isSide &amp;&amp; !visited.includes(map.point[targetv])) {
      visited.push(map.point[targetv])
      DFStraverse(targetv, visited)
    }
  })
}
</code></pre>
<p>以上代码的问题：</p>
<ul>
<li>map 定义在了外部，和别的函数共用</li>
<li>visited 是全局共用同一个，但却每次都要作为参数传入，逻辑上既不合也没有必要。并且作为函数参数（而不是全局变量），每次都对 visited 作了修改。这里还好，因为要的就是修改后的 visited（实际上是全局的 visited）。但如果题目是一个回溯问题，就需要管理 visited 的状态，在修改了之后，递归出栈时还得改回来。</li>
</ul>
<h2>图深度遍历的纯函数实现</h2>
<pre><code class="language-ts">// DFS 深度优先遍历，从 第 index 个节点开始. visited 记录已访问的节点，全局共用一个 visited
// 纯函数实现
function DFStraverse(index: number, map: { point: string[], side: number[][] }) {
  const visited = [map.point[index]]

  function traverse(index: number) {
    // 终止条件
    if (visited.length === map.point.length) {
      console.log(visited.toString())
      return
    }

    map.side[index].forEach((isSide, targetv) =&gt; {
      if (isSide &amp;&amp; !visited.includes(map.point[targetv])) {
        visited.push(map.point[targetv])
        traverse(targetv)
      }
    })
  }

  traverse(index)
}
</code></pre>
<p>使用闭包，把共用的 visited 固定为状态。内部再定义函数作递归。 map 也作为外层的参数传入，里面不去修改。</p>
<hr/>
<p>状态其实在各种算法里挺重要的。不少空间换时间的极限操作都要用到。</p>
<p>算法注定是“不纯”的，能做的也不过是用闭包来保存状态。有时候觉得，纯不纯的也没有这么重要。</p>]]></content>
        <category label="学习"/>
        <published>2021-09-25T12:00:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github hosts 更新脚本(MAC)]]></title>
        <id>https://sansui233.com/posts/github-hosttools</id>
        <link href="https://sansui233.com/posts/github-hosttools"/>
        <updated>2021-08-07T04:08:55.000Z</updated>
        <content type="html"><![CDATA[<p>此工具已更新至 <a href="https://github.com/Sansui233/mac-githubhosts-autoupdate">Github</a>。</p>
<ul>
<li>安装卸载脚本</li>
<li>自动定时运行</li>
<li>平时不占内存，运行时几乎不占内存</li>
</ul>
<p>原文如下：</p>
<hr/>
<p>最近 Github 墙得越来越厉害了。写了个 Shell 工具，连不上的时候就更新一下。可以配合 Alfred 使用。</p>
<p>使用的 host 源来自<a href="https://github.com/JohyC/Hosts">这里</a>。其实用 SwitchHosts 更新也行，但我真的讨厌 Electron App……麻了，现在听个歌写个笔记 1个多 G 的内存就没了。</p>
<p>也可以用写成定时程序后台运行，加个 LaunchDaemon 文件就行，但，我不会打包 Mac App……文件这么散着分发也太 emmm，而且别人装起来也麻烦……</p>
<p>麻烦归麻烦还是要写的……</p>
<p>文件和说明已经上传到 <a href="https://github.com/Sansui233/mac-githubhosts-autoupdate">Github</a>。</p>
<ul>
<li>下面这个文件保存取名为 <code>hoststool</code></li>
<li>赋予执行权限 <code>chmod +x hoststool</code>。如果为了执行起来方便，可以放进环境变量的目录（比如/usr/local/bin）</li>
<li>然后就可以使用 <code>hoststool -u</code> 更新 host 了，运行结果会发系统通知。之前可以自己看看 hosts 内容有没有问题。这是有几率失败的，因为用的 gittee 的 host 源，经常会提示文件疑似违规……这种时候再请求一次就好了，第二次就不违规了。我也不知道为什么。</li>
</ul>
<p>（定时任务的部分在后面）</p>
<pre><code class="language-shell">#!/bin/bash
showHelp() {
	echo &quot;-u [source_url]	update github hosts. You can specify a custom host source&quot;
	echo &quot;-b	backup /etc/hosts to /etc/hosts.backup&quot;
	echo &quot;-r	recover hosts.backup to hosts&quot;
	echo &quot;-f	list files in /etc which contains \&quot;hosts\&quot;&quot;
}


# ====== Main =====
if [ $# -eq 0 ]; then showHelp;exit 0;fi

# CONF
download_dir=&quot;$HOME/etc/hoststool&quot;
github_hosts=&quot;https://gitee.com/yuchi-shentang/GithubHosts/raw/main/hosts.txt&quot;
if [ ! -d &quot;$download_dir&quot; ]; then
  mkdir -p $download_dir
fi

case &quot;$1&quot; in
	-f)
		ls /etc | grep hosts;
		exit 0;;
	-b) 
		sudo cp /etc/hosts /etc/hosts.backup;
		exit 0;;
	-r) 
		sudo cp /etc/hosts.backup /etc/hosts;
		exit 0;;
	-u) 
		if [ $2 ]; then github_hosts=$2;fi
		curl -o ${download_dir}/hosts ${github_hosts};
		if [ $? -ne 0 ]; then
			echo &quot;[ERROR] 获取远程 host 出错，请尝试更换 source 或检查 download_dir 读写权限&quot;
			osascript -e &#x27;display notification &quot;获取远程 host 出错，请尝试更换 source&quot; with title &quot;hoststool&quot;&#x27;
			exit 1
		fi
		
		# Validate host content length
		lines=$(awk &#x27;{print NR}&#x27; ${download_dir}/hosts | tail -n1)
		if [ $lines -lt 10 ]
		then
			echo &#x27;[ERRO] 远程 Github Hosts 无效（Gitee源不稳定），通常重试即可&#x27;
			osascript -e &#x27;display notification &quot;远程 Github Hosts 无效（Gitee源不稳定），通常重试即可&quot; with title &quot;hoststool&quot;&#x27;
			rm ${download_dir}/hosts
			exit 1
		fi

		# Remove old content
		begin=$(sed -n  &#x27;/# ==== Github Start ====/=&#x27; /etc/hosts | awk &#x27;NR==1{print}&#x27;)
		end=$(sed -n  &#x27;/# ==== Github End ====/=&#x27; /etc/hosts | awk &#x27;END{print}&#x27;)
		echo &quot;Removing old hosts. Start at line \&quot;${begin}\&quot;, End at line \&quot;${end}\&quot;&quot;
		cat /etc/hosts | sed &quot;${begin},${end}d&quot; &gt; ${download_dir}/hosts.tmp
		if [ $? -ne 0 ]; then
			## Trip Failed
			echo &quot;[INFO] 当前 Host中 无旧的 Github Host 标记可清除&quot;
		else
			## Trip Succeed, move result
			echo &quot;[INFO] 清除旧的 Github Host 标记&quot;
			sudo cp /etc/hosts /etc/hosts.backup &amp;&amp; sudo cp ${download_dir}/hosts.tmp /etc/hosts;
		fi

		# Add new hosts
		sudo bash -c &quot;echo &#x27;# ==== Github Start ====&#x27; &gt;&gt; /etc/hosts&quot; # Add github host
		if [ $? -ne 0 ]; then
			echo &quot;[ERROR] 无root权限，请尝试运行脚本手动输入密码&quot;
			osascript -e &#x27;display notification &quot;无root权限，请尝试运行脚本手动输入密码&quot; with title &quot;hoststool&quot;&#x27;
			rm ${download_dir}/hosts.tmp
			rm ${download_dir}/hosts
			exit 1;
		fi
		sudo bash -c &quot;echo \&quot;# Updated at $(date)\&quot; &gt;&gt; /etc/hosts&quot; # Add github host
		sudo bash -c &quot;cat ${download_dir}/hosts &gt;&gt; /etc/hosts&quot;;
		sudo bash -c &quot;echo &#x27;# ==== Github End ====&#x27; &gt;&gt; /etc/hosts&quot;
		rm ${download_dir}/hosts.tmp
		rm ${download_dir}/hosts

		echo &quot;[INFO] Github Hosts 块更新于 $(date)&quot;
		osascript -e &#x27;display notification &quot;Github Hosts 已更新&quot; with title &quot;hoststool&quot;&#x27;
		exit 0;;
	-h|--help)
		showHelp;
		exit 0;;
	*)
		echo &quot;Unknown command&quot;;
		showHelp;
		exit 1;;
esac

</code></pre>
<h2>定时</h2>
<p>保存以下文件为 <code>hoststool.plist</code>。</p>
<pre><code class="language-plist">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
&lt;key&gt;Label&lt;/key&gt;&lt;string&gt;hoststool&lt;/string&gt;

&lt;key&gt;ProgramArguments&lt;/key&gt;
&lt;array&gt;
  &lt;string&gt;/usr/local/bin/hoststool&lt;/string&gt;
  &lt;string&gt;-u&lt;/string&gt;
&lt;/array&gt;

&lt;key&gt;RunAtLoad&lt;/key&gt;
&lt;true/&gt;

&lt;key&gt;StartInterval&lt;/key&gt;
&lt;integer&gt;3600&lt;/integer&gt;

&lt;key&gt;StandardOutPath&lt;/key&gt;
&lt;string&gt;/Library/Logs/hoststool.log&lt;/string&gt;

&lt;key&gt;StandardErrorPath&lt;/key&gt;
&lt;string&gt;/Library/Logs/hoststool.log&lt;/string&gt;

&lt;/dict&gt;
&lt;/plist&gt;
</code></pre>
<p>把 <code>/usr/local/bin</code> ，改成你存放脚本的路径。</p>
<p>时间间隔为 3600 秒，可以自己修改。</p>
<p>然后执行</p>
<pre><code class="language-shell">$ sudo cp hoststool.plist /Library/LaunchDaemons
$ sudo chown root:admin /Library/LaunchDaemons/hoststool.plist
$ sudo launchctl load -w /Library/LaunchDaemons/hoststool.plist
</code></pre>
<p>执行完就会立刻运行一次脚本。由于定时任务是 root 用户不是个人用户，不会有通知，可以去 Console 看 log。</p>]]></content>
        <category label="摸鱼"/>
        <published>2021-08-07T04:08:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[网盘目录程序比较]]></title>
        <id>https://sansui233.com/posts/网盘目录程序比较</id>
        <link href="https://sansui233.com/posts/网盘目录程序比较"/>
        <updated>2021-05-26T01:15:45.000Z</updated>
        <content type="html"><![CDATA[<p>比较一下私人网盘有关的程序</p>
<ul>
<li>cloudreve</li>
<li>onemanager</li>
<li>zfile</li>
<li>nextcloud</li>
</ul>
<h2>1. Cloudreve</h2>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/demo.cloudreve.org_home.png" alt="cloudreve"/></p>
<p>是个网盘程序，意思是在服务器上运行这个程序你就能成为了千度网盘的老板，可以拥有很多注册会员，还可以给他们收费，从此发家致富(bushi)。</p>
<ul>
<li>需要服务器和域名</li>
<li>文档不全，社区还行，使用方法社区找</li>
<li>是真的网盘，不是网盘列表程序，适合建站用，One Drive个人帐号不能用。</li>
<li>没事记得备份 (不知道换服务器时迁移数据麻不麻烦，反正可以用Docker)</li>
</ul>
<h2>2. One-manager</h2>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/herooneindex.herokuapp.com_Ali_.png" alt="one manager"/></p>
<p>网盘列表程序，阿里云或者 Onedrive 的网盘里的文件列出来，便于集中分享。单纯是个人分享站。</p>
<ul>
<li>serverless，不需要服务器和域名，可白嫖资本家的服务</li>
<li>README 即文档，issue 即社区。README写得像随便记的笔记，好在也不复杂都有引导</li>
<li>功能很多，除了基础的分享、预览、下载功能，可以上传重命名等进行管理(但是界面不好看导致体验并不好)。不依靠程序设定，而是把网盘里的文件作为功能性文件，挺方便的，再次部署时不用迁移任何数据</li>
<li>可以预览的文件格式很多，没什么bug</li>
<li>界面比较丑，前台可以换主题。但好看的功能不全，后台不能换主题(强行要换也是可以但可能功能不全)。</li>
</ul>
<h2>3. zfile</h2>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/zfile.jun6.net_.png" alt="zfile"/></p>
<p>是网盘列表程序，同 One Manager。</p>
<ul>
<li>需要服务器和域名。但看情况也许可以 Serverless ？不清楚Java</li>
<li>有文档，README说得很清楚，不用一脸懵逼找社区</li>
<li>功能不多，基础的分享、预览、下载功能，前端好，交互体验好</li>
<li>文件预览有Bug，OneDrive的视频流经常加载不出来，FLV会一直加载失败。但，好看是真的</li>
</ul>
<p>开发者是98年的(暴击)</p>
<h2>4. nextcloud</h2>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/top-homeimage@2x.png" alt="nextcloud"/></p>
<p>个人网盘程序，和Cloudreve一个性质的。很多插件，交互是最好的，也比较耗资源，适合家里获团队用。</p>
<p>external storage 装起来复杂，不好白嫖资本家。</p>]]></content>
        <category label="摸鱼"/>
        <published>2021-05-26T01:15:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[m3u8直播流实时录屏小记]]></title>
        <id>https://sansui233.com/posts/hslrecord</id>
        <link href="https://sansui233.com/posts/hslrecord"/>
        <updated>2021-05-12T15:16:44.000Z</updated>
        <content type="html"><![CDATA[<p>最近由于发现自己想回看的直播会被剪镜头，所以下定决心以后要学会录屏。但本人有强迫症，一般的录屏软件满足不了我的需要，主要是：</p>
<ol>
<li>会录出鼠标操作、网络卡顿、水印等影响观感的画面</li>
<li>由于显示器和录屏软件的和原视频帧数可能不同步的问题，非常容易造成画面卡顿</li>
<li>体积远大于原视频，二压后画质失真重</li>
</ol>
<p>通常来讲，能拿直播时的视频流就别真的屏幕录制。本来视频分段就都在缓存里，应该是有比较容易实现的办法做到实时保存的才对。</p>
<p>本文主要分为以下三个部分</p>
<ul>
<li>m3u8简介</li>
<li>保存视频分段与合并</li>
<li>DRM 版权保护问题</li>
</ul>
<h2>m3u8简介</h2>
<p>目前的各大流媒体平台视频（不管是直播还是回放）大多都会把视频切片为很小一段，长度可能10s左右，通常是.ts后缀的文件。而这一堆.ts文件的索引文件为m3u8文件。</p>
<p>一个通常的m3u8文件是如下格式</p>
<pre><code class="language-text">#EXTM3U
#EXT-X-VERSION:3
#EXT-X-TARGETDURATION:10
#EXT-X-MEDIA-SEQUENCE:0
#EXTINF:10.000000,
#EXT-X-PRIVINF:FILESIZE=3192240
https://website/xxx-00001.ts
#EXTINF:10.000000,
#EXT-X-PRIVINF:FILESIZE=3206904
https://website/xxx-00002.ts
#EXTINF:10.000000,
#EXT-X-PRIVINF:FILESIZE=2576164
https://website/xxx-00003.ts
</code></pre>
<p>也就是说，如果我们实时保存流媒体平台的视频，正常情况下，会保存一个.m3u8索引文件，和一堆.ts文件。有了这些文件我们可以直接使用支持m3u8的播放器（如IINA、VLC）进行播放。</p>
<p>m3u8是 HLS(HTTP Live Stream) HTTP直播流格式的基础。</p>
<h2>保存视频分段与合并为MP4</h2>
<p>工具准备：</p>
<ul>
<li><a href="https://www.ffmpeg.org/">ffmpeg</a>：强大的命令行视频处理工具，网上有很多安装教程，这里不重复</li>
<li><a href="https://chrome.google.com/webstore/detail/%E7%8C%AB%E6%8A%93/jfedfbgedapdagkghmgibemcoggfppbb">Chrome插件-猫抓</a>：资源嗅探插件，下载需要科学上网</li>
<li>一个多线程的下载器（为了下载速度更快），如 aria2，网上有很多教程，这里不重复</li>
<li>一个支持<strong>使用正则表达式批量替换文字</strong>的txt编辑器，如sublime、vscode</li>
</ul>
<p>以上方法会比较硬核，傻瓜式的方法可只准备下面这一个</p>
<ul>
<li><a href="https://www.hlsloader.com/">Chrome插件-Stream Recorder</a>：傻瓜式HLS一键保存插件，下载需要科学上网</li>
</ul>
<h3>方法一：下载所有分段并合并（稍硬核）</h3>
<p>首先打开一个视频网站，这里以优酷的综艺为例。<br/>
打开后点击右上角的猫抓插件，会看到一个m3u8文件，和一堆ts文件。</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240.png" alt="猫抓.png"/></p>
<p>首先我们可以先点下载按钮下载到本地 .m3u8 文件。</p>
<p>猫抓插件提供了对m3u8的解析，点击文件旁的放大镜就可以看见。</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240-20210512174624858.png" alt="image.png"/></p>
<p>复制所有的内容，放到支持多线程的下载器里下载。</p>
<p>下载完成后，先整理一下本地的文件目录成如下</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240-20210512174641967.png" alt="本地文件"/></p>
<p>（为了看起来更清晰，以上各个文件名我已修改）</p>
<p>然后修改m3u8文件。我这里使用的编辑器是vs code。</p>
<p>m3u8文件里的原链接是这样的：</p>
<pre><code class="language-text">https://valipl-vip.cp31.ott.cibntv.net/67756D6080932713CF4E/0300609724C6163EBF1C35DAC076221D-4673-49D8-A932-70FA-00001.ts?ccode=0502&amp;duration=6237&amp;expire=18000&amp;psid=28ae2c9bf869cf6f9ae28c814098b5fe43346&amp;ups_client_netip=3b4081be&amp;ups_ts=1620641730&amp;ups_userid=300380294&amp;utid=Xd0WGHofZhACAXtwDp2%2BGj22&amp;vid=XNTE0MDg5MTgyOA&amp;sm=1&amp;operate_type=1&amp;dre=u38&amp;si=78&amp;eo=0&amp;dst=1&amp;iv=1&amp;s=cbcad844c5894d209b9f&amp;type=mp4hd3v3&amp;bc=2&amp;hotvt=1&amp;t=d91e686d230165f&amp;cug=1&amp;rid=20000000DC17B06335EBB96917703D4A6B2DA12102000000&amp;vkey=B84707ca23f9e5899f9b0b9d97e4d1851
</code></pre>
<p>非常的长。我们首先要做的，是去掉每一行 <code>?</code> 之后的所有字符。使用正则表达式批量替换，在查询里输入<code>\?.*?\n</code>，替换为 <code>\n</code> 。注意要勾选正则表达式的符号。</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240-20210512174711034.png" alt="replace query"/></p>
<p>然后要替换的是<code>https://...</code>内容，替换为本地的文件路径，让最后的剩下文件名指向本地的文件。</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240-20210512174718097.png" alt="替换本地文件.png"/></p>
<p>替换后的.m3u8文件是这样的</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240-20210512174727634.png" alt="m3u8文件"/></p>
<p>此时可以使用支持m3u8的播放器打开m3u8文件，观看是视频能否正常播放。</p>
<p>能正常播放后，使用ffmpeg合并为mp4，不用转码速度就很快</p>
<pre><code class="language-shell">ffmpeg -i index.m3u8 -vcodec copy -acodec copy output.mp4
</code></pre>
<p>完成</p>
<h4>缺点</h4>
<p>对于回放的完整视频文件，通常会提供m3u8索引文件，但对于直播通常是没有m3u8索引的。这时候依然可以按上述方法下载所有分段，用ffmpeg进行合并。</p>
<p>但是直播时无法一次获取到所有ts的链接，而是边播边给。就算猫抓能批量复制链接，但为了防止直播时出什么意外（比如浏览器无响应了、突然断电），看一会儿就得存，无法好好享受直播，最后上千个文件的列表，也变得很麻烦。</p>
<h3>使用 Stream-Recorder插件 傻瓜式保存</h3>
<p>上一个方法的所有步骤，其实都能用这个插件搞定</p>
<ul>
<li><a href="https://www.hlsloader.com/">Chrome插件-Stream Recorder</a>：傻瓜式HLS一键保存插件，下载需要科学上网</li>
</ul>
<p>使用上也很简单。视频播放开始后，点击这个按钮就行了，自动保存视频分段，同时合并为一个mp4。</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240-20210512174735807.png" alt="Stream Recorder.png"/></p>
<p>简单介绍一下，这个插件主要有三个模式</p>
<ul>
<li>Live：实时获取直播时的ts分段，可以没有索引文件自动合并</li>
<li>HLS：看回放时获取ts分段，可以没有索引文件自动合并。但是像B站这种用m4s非标准HLS的似乎用不了。</li>
<li>Capture：实时获取正在播放的HLS，直播回放均可，大部分视频格式都能用，兼容性最好。缺点是真的要一直播着。</li>
</ul>
<p>也就是直播时使用Live抓取或Capture录屏，且可以自动合并视频音频，相当于直播时边看边存。</p>
<p>看回放时使用HLS或Capture保存视频。</p>
<h2>DRM 版权保护问题</h2>
<p>并不是所有的m3u8视频都能这么下载，有的经过了DRM(Digital rights management)的保护。这样的视频下载下来也是无法直接合并的。</p>
<p>有版权保护的视频，使用猫抓查看m3u8解析时，可以发现这么一行</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240-20210512174747126.png" alt="DRM m3u8.png"/></p>
<p>Stream Recorder 也不支持加密视频的下载。</p>
<p>解密不在讨论范围内（我也不会），总得来说还是尽量支持正版。</p>
<hr/>
<p>PS：目前风气真的太严了，如果不是发现片段被删减，也不会想到去研究怎么录屏。既然花了钱买了相应的单场直播，也说明了会提供回放，要求拥有一个和直播时相同的回放个人觉得并不过分。最终给一个删减版，感觉这服务有些不值得，即便直播和录屏混剪都得给剪出来一个完整的版本。</p>
<p>PPS：明白大环境，没有全指责流媒体平台的意思。</p>]]></content>
        <category label="摸鱼"/>
        <published>2021-05-12T15:16:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[记一次被骗388巨款的理发经历]]></title>
        <id>https://sansui233.com/posts/记录一次被骗388巨款的经历</id>
        <link href="https://sansui233.com/posts/记录一次被骗388巨款的经历"/>
        <updated>2021-04-18T21:59:11.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>我原本以为是只是一场诱导式的恶意营销，细想来竟是一个彻头彻尾的楚门的世界。</p>
</blockquote>
<h1>1 拉人</h1>
<p>昨天下午我逛商场时，一个短发美女姐姐叫住我说，他们的造型店在搞活动，有一个嘉宾来做一天发型设计，邀请剪短发的路人去体验。</p>
<p>由于我长相小，经常会成为骗子的下手对象，也明白这样就是诱导消费，换做从前都是装聋。然而许久没有出门，昨天脑子进水，想看看是什么花样。</p>
<p>我说我没钱，我才上大学，很穷。</p>
<p>美女姐姐说，一百多剪一次也贵吗？</p>
<p>我：贵。</p>
<p>美女姐姐说，没事，你不能成为我们的潜在客户也没关系，我们发型师做设计是免费的，剪不剪由你决定。不剪也没事，你就听一听设计理念，今后一定会有所启发。</p>
<p>又 battle 了几轮，我想那就去吧。然后果不其然，美女姐姐一路带出门，带路到了商店的背面的路对面，比较偏僻没什么车，马路上全是隔着的围栏。</p>
<p>我看这地儿明显不对劲，说您先走，我回去了。美女姐姐说来都来了，去看看吧。</p>
<p>在路上，这位美女一直在说我头发塌，后面剪断层了。我寻思着都活过了两轮，所有人都是说我头发炸的，好不容易拉直打薄才到了刚刚好的水平，这还是第一次有人说我头发塌。</p>
<p>美女又问我你对自己的发型满意吗，哪里剪的。我说我很满意，40块剪的，很帅。</p>
<p>美女说，他可以让你的发型更上一层楼。</p>
<h1>2 油腻</h1>
<p>进去是一家造型中心的装饰，装修一般，东西有些乱，在做头发的顾客只有一个，但人还显得挺多的。</p>
<p>一个身高不到170体重看起来180的Tony让我坐下，满脸堆笑，伸出手握手说：</p>
<p>“您好，您贵姓？”</p>
<p>“我姓林。”（假名）</p>
<p>“我叫星x，是今天来这的嘉宾，您可以叫我星哥。”</p>
<p>然后 Tony 分析起我的头发，说我头发的重量感都在耳旁，顶部太塌，头骨太平，和那位美女的说法如出一辙。“为了设计更符合您的脸型，可不可你请你把口罩摘下来呢？”</p>
<p>我觉得这算是个正常需求。摘下了口罩。然后……</p>
<p>Tony ：“你今天打了高光吗？”</p>
<p>“没有。”（这人看不出我没化妆？）</p>
<p>“那你鼻子天生这么立体吗？”</p>
<p>我：“光打得好吧。” （你有眼疾吗？）</p>
<p>“你知道你五官最吸引我的部位是哪里吗？”</p>
<p>我说不知道。</p>
<p>Tony笑了下，“是你的嘴唇。”</p>
<p>……………艹</p>
<p>Tony：“我应该今天应该好好收拾一下，主要是平时接待的都是30多岁的客户，没想到，可以遇见你。”</p>
<p>我无语了，这人有病。理发店Tony大多喜欢套人近乎，这种程度的还是头一次。长得帅的是撩，长得丑的是性骚扰。</p>
<h1>3 洗发小哥</h1>
<p>Tony说让我冲一下头发，看看发型发量和剪裁。</p>
<p>洗头小哥问，你是哪儿人，我说我是四川的。洗头小哥立刻说了句（貌似是）四川话。</p>
<p>我说您也四川的吗？</p>
<p>小哥：“我是云南的，在北京北漂。你知道我们这位嘉宾的价钱吗？”</p>
<p>我说不知道。</p>
<p>“这位嘉宾和很多明星艺人合作过，平时剪一次头要588。”</p>
<p>我：“我是学生，没钱。”</p>
<p>小哥：“你可以好好和他谈一下，应该学生的话能更低一点。”</p>
<p>小哥还向我打探了一下我最贵的理发消费是多少。</p>
<h1>4 装x</h1>
<p>回到梳妆台，Tony向我展示他手机，锁屏密码直接在我眼皮底下输入的。屏幕是他和关晓彤的合照，黑色的背景，国民闺女在照片上像在T台上一样有范，Tony穿着黑西装。相册里还有和高圆圆的合照，两照片风格差不多。当时时间太短没看细节。后来想想，这是P的，我也不是没见过明星的私下合照，哪有私下合照背景纯黑、这么正式和完美的。</p>
<p>Tony说，他平时是做培训的，也给明星艺人做造型。顾客受众一般都是30多岁的，会员费很贵，要两千。我表明我没钱，付不起，不是他的顾客。他说不是也没关系，你就先听听，你觉得可以了再考虑，要是你做得不满意我也不收你钱。</p>
<p>然后Tony又开始说我头发塌了，说有办法让发根蓬松维持四五个月不用去理发店，也能拉长上庭比例。我容易对没见过的东西有兴趣，也想看看是怎么发根蓬松法，再说我确实上庭稍微偏短，觉得可以试试。事后我总结了一下，只想要骗一次钱的人，说四五个月也肯定是忽悠人的。</p>
<p>我问Tony多少钱，Tony说我平时都是500起步，这次给你488。</p>
<p>我表示还是太贵了。Tony又说学生价的话，我可以给你388。然后又开始展示他的手机里看起来高端的东西，表示388真的很便宜。我勉强接受了。</p>
<p>Tony说：“我给你这么个优惠价”，然后俯下身轻轻在我耳边说，“一会儿你要好好想想怎么报答我。”</p>
<p>（先别急着吐，后面还有）</p>
<h1>5 x骚扰</h1>
<p>Tony开始聊老家是哪，我说四川的。他说成都吗，春熙路他去过一段时间，妹子都很不错。“当时我在那一天就干三件事，你知道是什么吗？”</p>
<p>我：……不知道</p>
<p>Tony：“喝酒，上网，泡妞。”</p>
<hr/>
<p>Tony：“你知道为什么我愿意给你做这个头发吗？”</p>
<p>我非常无语，我觉得他真的需要个捧哏。</p>
<p>Tony俯下身，到我耳边悄悄说：“因为我还挺喜欢南方姑娘的。”</p>
<p>……我有点恨我是个面瘫脸。</p>
<hr/>
<p>Tony拔下箍头发用的铁丝，上面缠着红色绒布，说给你变个魔术你信不信。</p>
<p>我抬头看了他一眼，然后他把那个铁丝缠绕成红戒指的形状，把我手拉过去戴我食指上。</p>
<p>我无了个大语，说：“这就是你泡妞的方式吗？”</p>
<p>Tony一把把铁丝拔下来，“什么泡妞的方式，我在说这是手艺人呢，编得挺好吧，我还专门看了你手指的宽度做的。”</p>
<p>我：“手艺人做什么不好，做戒指，不正经。”</p>
<p>Tony：“嘿，她还说我不正经？以后不给你剪头发了。”</p>
<p>（希望看到这你还没有吐）</p>
<hr/>
<p>问到学校，问我多大了，大几。我说我在读研。</p>
<p>Tony：研究生没有工资吗</p>
<p>我：有是有，一个月四百</p>
<p>Tony：这么少啊？感觉在学校收获了什么</p>
<p>我：没什么收获</p>
<p>Tony：收获了男朋友也算</p>
<p>我：好吧，收获了男朋友</p>
<p>Tony：挺好啊，解决了大事。你男朋友不给你提供你经济上的资助吗？</p>
<p>我：没有，我们各管各的。</p>
<p>Tony：要不我按你的标准给你介绍一个男朋友？</p>
<p>我：？这不太好吧</p>
<p>Tony：男性朋友</p>
<p>我：？这也不好吧</p>
<p>Tony：你不接受异性朋友？</p>
<p>我：对</p>
<h1>6 关于钱</h1>
<p>无一例外，推销就是让人花尽可能多的钱。而我之所以叫它骗钱，而非诱导消费，是因为完全超过了一般诱导消费的手段与范畴。</p>
<p>这个理发店有人专门负责陪聊天，陪聊小哥自称在德云社干过一段时间，老家是四川达州（怎么不是云南就是四川）。他主要负责宣传 “高端私人定制” 的概念。这应该是利用社会心理学的范畴了，但口才明显不比美女姐姐和Tony，可以说是很烂，说服不了我这种穷逼逻辑思维者。再说我一向对私人定制、高级vip等模式不看好，我一向认为商品化流水线化压低价格的形式才是最能说服大众购买其产品的。</p>
<p>我也很直接地说我这种人就是小白鼠，你们就是学着怎么解剖小白鼠的人。陪聊小哥解释说，我们和客户的关系更像是朋友，真心诚意为客户在服务。</p>
<p>然后又轮到Tony上场了。这个时候 Tony已经没有x骚扰了，重心全在钱上。因为我明显表示对发型不满意了，他开始宣传起了企业的靠谱性，打开了宣传册子。</p>
<p>“我们这个店在全国都有连锁，2013年开始就有店了，在北京、天津……”</p>
<p>我看了看，这个册子上店的名字和招牌不一样。事后再看大众点评，上面的名字又不一样。</p>
<p>我问Tony你不是被请来的嘉宾吗，他说自己在这个店有股份。</p>
<p>接着 Tony 又开始说办卡的事，给我看朋友圈的宣传，类似于“限定的诱惑”和饥饿营销，比如“今天可预约一位vip”。我说我对vip不感兴趣。</p>
<p>然后Tony又给我看了看微信列表，每个人都是名字+会员价的备注，比如 “金妮可 30000”。说会员卡谁都可以用，<strong>但不接待男性顾客</strong>。然后又和我说2000就能成为vip，他对不同价格的vip都是一个态度。我再次说我穷学生没钱。他说你把你的表当了都能剪好几次头发了。</p>
<p>他说的表是我手上戴的天梭表，因为太贵了我带了快10年了，自己动手换了一次表带换了三次电池。于是我说我表可以带10年，造型一年就过时了。</p>
<p>Tony又说我真的很想把你发展为顾客，学生价1000就行。我还是说没钱。他又说，1000让你三次烫染两次。我依旧说没钱，因为我是真没钱。</p>
<p>Tony说：“你没有花呗吗？”</p>
<p>我：“之前有过，我已经关了”</p>
<p>Tony说：“额度多少？”</p>
<p>我：“不记得，我不会超前消费的”</p>
<p>之后也问了我好几次花呗，使劲想让我用花呗。</p>
<hr/>
<p>我说我穷的时候，提到了一下我这个月剪了三次头了。他问怎么剪这么多次。我说，被忽悠的呗。</p>
<p>Tony：“嘿，说得我忽悠了你似的，我就给你剪这一次，以后不给你剪了，说真的我不缺客户。”</p>
<p>天啦，我该说这人演得太投入，还是该说他太自信？</p>
<hr/>
<p>在结帐的时候，我微信已经没钱了，抱怨了一下最近花得太多，只能用卡结账了。Tony明显顿了一下，什么卡？是信用卡吗？（因为信用卡负债状态跑路了商户也收不到钱）</p>
<p>后来记账时发现，结算页面没有此店的名字和标识，只有一个“美容美发中心”。</p>
<h1>7 关于发型</h1>
<p>Tony：“要是你回去同学看到了，就说我剪了一下，别说是做发根。”</p>
<p>我没明白怎么没头没尾来了这么一句，这能有啥不好说的。现在想来，是怕骗局被揭穿吧。</p>
<p>途中还来了一个妹子剪头。这个妹子的发型很迷，白色的头发，顶部特别高和头骨的比例完全不协调（我突然觉得我看骨相识人也不错）。当时Tony确认了一下，“这人是顾客吗？”然后让我等3分钟，看他展示什么叫3分钟剪完一个头发。我不知道这里的顾客是什么黑话。不过他剪的头发层次高得太离谱了，和妹子脸不配，太土了，审美实在不行。</p>
<p>现在觉得，这个顾客也可能是演员，带顶假发上场的。</p>
<p>至于我的发型，又变蓬了像狗熊。我剪完就去买个夹子夹塌了。朋友听了之后说你也是个奇葩，别人都要头发蓬，你要头发塌。</p>
<h1>总结</h1>
<p>这个事作为写报道的素材真的非常不错。流行元素兼备，社会心理诱导话术、普信男问题、骗钱流程展示得很齐全，是一场精心策划后的全店大型骗局体验店，就是楚门的世界一样，整个环境、公司、Tony的照片、微信列表、公司宣传册，全是精心策划过的，没有一个人是真的。手段很典型，流程固定。美女负责拉人，Tony（主演人）负责展示“专业”分析能力让人“上道”，然后洗头小哥负责一次抬预期价，Tony 负责展示自己贵又忙，二次抬预期价，再给优惠价。途中不停打探你的经济状况以看办卡最多能收你多少钱，询问烫染和妆造意向，顺带言语性骚扰和暗示。最后证明此店的连锁真实性和规模庞大，再让人办卡。</p>
<p>另外这个诈骗集团应该不只有一个地点，因为他们问过我住哪，和我讲最近的连锁店是哪，那个地方应该也很偏僻，没有我熟悉的地标，我也记不住。另外，他说烫发根全北京只有两家能做，还把另一家的名字说出来了，推测也应该是同伙（谁会主动推荐自己的竞争对手），但我也没记住。如果要深入调查，应该会是个人不少的组织，干的事也不只表面理发这么简单。整个流程策划也挺全面的，绝非一时半会儿兴起的骗子能办出来的。</p>
<p>但希望主演人可以改进一下，对一般女性能有点常识，用力过猛了。群演的年纪普遍偏小，就按规矩说话不怎么能自由发挥，需要再练下演技。</p>
<p>对于我这种容易被忽悠的人，解决方法也很简单，足够穷就不会被骗钱了。</p>
<p>PS：我觉得我写得好开心…………</p>]]></content>
        <category label="Diary"/>
        <published>2021-04-18T21:59:11.000Z</published>
    </entry>
</feed>