<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://sansui233.com</id>
    <title>Sansui's blog</title>
    <updated>2022-07-18T08:44:06.064Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <author>
        <name>Sansui</name>
        <email>sansuilnm@gmail.com</email>
        <uri>https://sansui233.com/about.ico</uri>
    </author>
    <link rel="alternate" href="https://sansui233.com"/>
    <link rel="self" href="https://sansui233.com/atom.xml"/>
    <subtitle>记录学习和生活的个人博客</subtitle>
    <icon>https://sansui233.com/favicon.ico</icon>
    <rights>All rights reserved 2022, Sansui</rights>
    <entry>
        <title type="html"><![CDATA[杂谈20220516-20220616]]></title>
        <id>https://sansui233.com/memos?id=2022-06-17</id>
        <link href="https://sansui233.com/memos"/>
        <updated>2022-06-16T22:05:00.000Z</updated>
        <summary type="html"><![CDATA[INFP 的无趣生活]]></summary>
        <content type="html"><![CDATA[<h2>2022-07-18</h2>
<p>我个人是非常讨厌 python 的一些魔法写法。每次看 pytorch 的时候，定义完一个 Net 类，实例化成 net</p>
<pre><code class="language-python">#@save
class Net(nn.Block):
    def __init__(self, **kwargs):
			//...
    def forward(self, input):
      //...
net = Net()
</code></pre>
<p>然后转眼就把这个实例当成函数调用</p>
<pre><code class="language-python">net(x)
</code></pre>
<p>…………wtmfk，类能当成函数用吗？调用的又是哪部分的代码？输入的参数是什么？更奇怪的是其他人没觉得有什么问题，他们只是非常顺理成章地认为，这么调用就开始训练了。如果问他们 ，“你们都不知道调用的什么函数怎么知道输入参数的？”他们会觉得，这个模型就是这么个输入形状，直接按纸上定义好的输入形状写就好了，forward 不是也有写输入嘛。</p>
<p>虽然也不能说有问题，但这么思考是靠记忆没有真的理解代码在干什么，如果把 <code>__call__</code> 绑定到 <code>run</code> 函数，这群只按模版写 <code>forward</code> 的人就不会写了…… 遇到大版本换 API，运行不起来的时候就只知道“运行不起来”。</p>
<p>直到今天我看这种魔法绑定也非常别扭，因为对 python 的内置特性没那么熟悉，遇到魔法写法就是一整个 wtf……而且由于平台和性能缘故，不会在自己的电脑上运行 Python 的代码， colab 对于代码结构的提示相当于没有，也看不了库的定义。只能面向文档编程，面向文档编程这种靠记忆力的事情是真的痛苦。</p>
<h2>2022-07-06</h2>
<p>旧文推荐: <a href="https://www.pingwest.com/a/213990"><strong>谁也成为不了中国的 YouTube</strong></a>。讲述了 Google 是如何通过骚操作，将 Youtube 的带宽成本变得接近于 0 的。这个操作大部分的视频网站都是学不来的，国内想学 youtube 的模式就等着倒闭吧。</p>
<h2>2022-07-05</h2>
<p>最近打通了几次 Hades，没了。事情太杂了，没什么可以学习和工作的时间。</p>
<p>反复看了好多次 eva 的真心为你结局，那一段意识流太爽了，看起来很解压。Eva 于我而言吸引力的并不是外在的设定，至少在我看来，让没有任何训练的小孩子驾驶 Eva 的离谱远远超过了视觉上冲击，不管 Eva 多帅，情况有多紧急，这都不应该是让小孩子去驾驭的东西。但以此为载体的情感表达是无言的。</p>
<p>真嗣对于他人情感的渴求与拒绝，对于亲手杀死了かおり绝望，最终的精神上的混乱，一句一句乞求式地重复着 あすか助けてよ，却下意识让意识中的明日香拒绝了自己。直至到达了他的理想精神世界，全部人类合为一体后，他才发现，对于真实的人和事，他害怕，但又渴望着那一切。</p>
<p>意识流蒙太奇开始时的几张手绘儿童蜡笔画也非常喜欢，非常有灵性（虽然有人会说什么也看不清楚）。乱线下的脸、乱线下的人、不知道哪里的景色、路灯、睡着的猫咪，一如真嗣残缺混乱真又天真美好的内心。</p>
<p>拖延症又犯了，应该去做核酸的，过了 6 个小时了还没出门……</p>
<h2>2022-06-23</h2>
<p>前天发现 mac 的电池严重鼓包，盖都合不上，吓得不敢用了，于是京东下了个单自己换了个电池。</p>
<p>在这期间看完了 eva，有人是因为机甲喜欢的，我也以为是机甲番，没想到其实是个心理哲学番。对于绝望的表现力非常强，旧剧场版结局最后的抽泣太真实了。我挺喜欢看男主绝望到发疯的，大概是绝望到发疯因为这是现实中不被允许的事。</p>
<p>前段时间无意中说了街舞不想去，跆拳道还行，于是天天唠叨着去学跆拳道。天啦，我真的很想出去工作，当学生当久了真的令人抓狂，比起有没有时间玩，更在意会不会受人控制。尽管社会之间的约束是无法避免的，但“受控”和“约束”是不同的感觉，后者多多少少知道是一种共识。有钱出去真的不用再听这些有的没的了，想换数码设备也不会被骂了。</p>
<p>和留学的朋友聊了，可以有条件后就再去读学位然后 run 掉。比起考虑起哪里工作好哪里怎么样，可能更会考虑什么工作好 run 吧。但我现在什么都做不了，看论文实在太痛苦，远比熬夜赶 DDL 写代码痛苦。后者的结果是可以预见的，无非就那些情况，做完或者没做完，没想法或卡壳就找人聊一聊方案。但看论文的结果是无法预见的，没有方向也无人可问，如果问导师的那已经换过两次题目了，不会做就换题目呗……不是不是，不是，不是不会，是切入点不对，根本是在乱找，找些与题目根本无关的东西。记性不好，FSL 和 meta-learning 的概念系统学了三次，还是在忘，还是理清楚，逻辑还是无法正确的归类和分析。全是虚无的概念，什么任务，任务是什么数据集，系统长什么样，每个环节什么输入什么输出，记不清，记性真的不好，我的记性不好是老依靠抽象能力的代价……说白了只是为了做而做，根本没有也不完全理解需求，无法抽象，自然也无法对要做的任务建立框架……写到现在已经有点混乱了</p>
<h2>2022-06-16</h2>
<p>买的 switch 真就是吃灰。虽然还是喜欢塞尔达的，尤其喜欢海边的小村，如果有这样不会涨潮退潮的海滩真想去度假。但只是一个人玩游戏不创作不学习还是会觉得空虚，要不就是焦虑。大部分情况下我是更愿意学习——除了看论文，真抱歉以这样的方式接触科研，以至于好几年了依然是看到论文就会情绪失控。</p>
<p>海南的海景房离海边很远，周边设施也配不齐，不到旅游的季节小区里没什么人。最近在看《夏日重现》，背景也一个海上的小岛，看起来就很潮，海风仿佛隔着屏幕吹到脸上。动画制作组真的良心，男主很好看，是我理想的发型。由于疫情我已经 5 个月没有剪头发了，长度勉强能扎成男主那样，不错。其实里面每个角色都画得很好看的，不过女主的设计太为常见了，反倒是女主妹妹的黑皮更有特点，一看就是在海边长期晒着的小孩。女主和妹妹的配色就像是海尔兄弟（救命……一旦接受这个设定……）</p>
<h2>2022-06-10</h2>
<p>开始看 Rust，教程里把原理解释得很多，但是经过了 C++、Java、Go、Javascript、Typescript、Python 的大混杂折腾后，觉得也还行，设计模式倒是都能理解。学 JS 的时候才是真的痛苦……</p>
<p>不过为什么要看 Rust 啊……还是馋性能，还有 wasm。最近还看上了 Tauri，前端是系统 webUI，后端是 rust，希望能代替 Electron。我在 SNS 上万年骂 Electron，还得做表情包才能表达我的不满。</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/i-hate-electron.jpg" alt="Memo"/></p>
<p>其实我也是希望技术稳定好，最好有一个东西可以一直用，还能一直走在时代的前沿满足各种需求。Go 已经可以满足我大部分的需要了，简洁高效跨平台……除了 UI。我为什么不会写 UI 的轮子啊啊啊啊！！track 全平台的 native UI，大概只能是咕鸽那种自己写引擎了……</p>
<p>现在 webview 大概是跨平台 UI 的最通用方案了，终于不用各写各的了（Unity：？）。只是 JS 的消耗实在太过于感人，所以我真的讨厌 Electron。Tauri 在运行时占用也不太理想，特别是写小工具的场景，启动下 Tarui Server 至少也是 80M……但比 Electron 动不动就半个 G 好啊！</p>
<p>查了一下，真有 Unity 写 App 的……别了别了，现在有 Flutter 了。虽然 web 开发者还蛮希望靠出身 web 的虚拟 DOM 一统天下的，但造轮子在现在真的是用爱发电吧……</p>
<h2>2022-06-09</h2>
<p>其实真的有一些东西可以写出来分享，但一想到好像是没有读者，都是写给自己看的，而自己本来就记了笔记，就没有什么分享的动力了。加之学业和工作和家庭让人没有摸鱼的心情。</p>
<p>前天晚上回家发现父母用的 win7 老电脑又被装了 360 全家桶，然后给重装了。但当时踩了一堆坑，到最后 N 卡驱动装不上，5 点才睡觉。第二天 8 点又起来继续看 N 卡驱动怎么回事……是神经质一样的强迫症，没有做完当天的计划的事情会无法睡觉，这样常常会因为精力不足而更加糟糕。</p>
<p>不过我确实是很久没有用过 win 系统了，很多东西现查，麻烦的地方出在这次是 win7 重装成 win10，没有想到固件要求还有差别。开始为了方便用了微 PE，硬盘居然没给自动格式化成 GPT（也可能格式化失败了但没提示），结果一直卡在引导之前转圈。后面还是做了直装的外接 U 盘。装完后就是显卡一直是通用老驱动，N 卡驱动用了网上能查到的所有的方式都装不上。最后才在一个油管视频里发现是因为 win10 是早期的内测版（MSDN 上不带任何后缀的 win10 居然是内测版……），新驱动不支持。但是 Nvidia 的驱动页面上没有写 win10 版本号要求，我还刻意看了这个的……于是又重下新版重装了一遍……新版还是挺好的 DCH 版驱动会自动更新。但据说游戏玩家很烦这个因为是更新可能是负优化……</p>
<p>话说其实我妈不怎么用电脑，整天还是看手机新闻短视频。我爸倒是电脑用得比手机多，不过大多是专业软件，偶尔也会看新闻，是那种能不更新就不更新、稳定最重要、首页一定要设成 2345 导航的老网民，不然怎么老装上 360 全家桶。</p>
<p>导航页虽然被称为是上个时代的产物，但个人觉得不可能完全消失。在对互联网完全不了解的情况下，导航就是了解互联网应用的最好、最快的方式。制作导航的本质是信息分类，这算是一个非常重要的学习能力，放到其它的网站、领域也是适用的。</p>
<p>今天也发现了一些优质的小工具箱页面，不得不说使用当下最好的搜索引擎搜索出来的工具，也没有人为编排后的小站工具质量好。唯一的问题就是太难找了。搜索引擎找到的工具大多要么太老太丑，要么广告，要么要钱。现代前端发展还没几年，好用的小工具太新了，大多由个人运营，JS 框架的 SEO 也差。</p>
<p>相应解决方法也有，还是社区化，持续运营保持住社区的热度和排名。因为现在大家对于“工具类应用”的概念还停留在原生 App，要想推广 Web App 目前不是技术问题，而是扭转对大家对网页的印象。有多少人知道美图秀秀还有个网页版，不用装什么软件，日常用户可以在浏览器里给照片调色、做简单海报、拼图。格式转换也不需要格式工场，相关的在线工具好用无广告又免费的相当多。我也知道有这些东西，但每次我还是会本能的打开 Photoshop，尽管知道是大材小用。</p>
<p>我接触过做得最好的工具社区算是捷径社区，但也差不多死掉了，一旦开始有社区与内容推荐，审核就是逃不开的大麻烦。</p>
<p>然后，中午搬东西出了一身汗，下午晚上浑身发冷肚子疼，简直不能再没精神了。上次出现这种情况还是我毕业的时候，当时只睡了 4 个小时，上午 7 点起来拍毕业照到中午，眼睛都是闭着的。中午开始不舒服到拉肚子，睡了 3 个小时后好了。</p>]]></content>
        <category label="Diary"/>
        <published>2022-06-16T22:05:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[理解 Rust 闭包与环境变量所有权]]></title>
        <id>https://sansui233.com/posts/rust-closure-and-ownership</id>
        <link href="https://sansui233.com/posts/rust-closure-and-ownership"/>
        <updated>2022-06-14T01:51:30.000Z</updated>
        <summary type="html"><![CDATA[本文将以最简单易懂的方式讲述 Rust 中的闭包与环境变量所有权的关系]]></summary>
        <content type="html"><![CDATA[<p>本文将以（自认为）最简单易懂的方式讲述 Rust 中的闭包与环境变量所有权的关系。在现存的类似中文教程中，要么语言表述歧义太大，逻辑上难以理清；要么试图把事情总结得过于复杂。实际上闭包对于环境变量所有权的处理规则是非常简单的。</p>
<p>阅读本文需要的基础： Rust 变量的所有权、引用与借用、函数、traits。</p>
<h2>什么是 Rust 的闭包</h2>
<p>Rust 中的闭包是<strong>一种函数</strong>。与 Rust 普通函数不同，它可以<strong>捕获函数外部的变量并使用</strong>。</p>
<p>基本语法：<code>|参数列表| {函数体}</code></p>
<pre><code class="language-rust">fn main() {
    let x = 1;
    let sum = |y: i32| { x + y }; // 说明： 闭包 sum 接收一个参数 y，且捕获前面的 x = 1, 返回 x + y
		println!(&quot;{}&quot;, sum(99)); // 输出 100

    let sum2 = |y :i32| x + y + 1; // 也可以省略花括号
    println!(&quot;{}&quot;, sum2(99)); // 输出 101
}
</code></pre>
<blockquote>
<p>说明： 闭包 sum 接收一个参数 y，返回 x + y。其中 x 是第一行定义的 <code>let x = 1;</code> ，为闭包外部的变量。</p>
</blockquote>
<p>像 <code>x</code> 这样在定义在闭包外部、可被闭包直接访问的变量，我们称为“<strong>环境变量</strong>”。</p>
<h2>闭包中环境变量的所有权</h2>
<p>有 rust 基础的人应该知道，普通的 rust 函数的传入参数有三种形式</p>
<ol>
<li>所有权 move（默认行为）。</li>
<li>可变借用，形式为 <code>&amp;mut param</code></li>
<li>不可变借用 ，形式为 <code>&amp;param</code></li>
</ol>
<blockquote>
<p>上述为 rust 所有权基础知识，不再赘述。</p>
</blockquote>
<p>普通的 rust 函数可以使用参数，但无法使用环境变量。闭包则加上了 <strong>捕获当前环境变量</strong> 的功能。</p>
<p><strong>捕获当前环境变量</strong> 仅仅是指闭包 “知道有哪些环境变量”。闭包在使用环境变量时，依然可能会对环境变量执行三种操作：</p>
<ol>
<li>所有权 move</li>
<li>可变借用</li>
<li>不可变借用</li>
</ol>
<p>具体是执行了哪种操作呢？这个问题就比较复杂了，我们可以从上面的例子出发。</p>
<p>回顾上面的例子，对于环境变量 <code>x</code> ，首先排除了所有权 move。</p>
<pre><code class="language-rust">    let x = 1;
    let sum = |y: i32| { x + y }; // 使用了 x
    println!(&quot;{}&quot;, sum(99)); // 输出 100

    let sum2 = |y :i32| x + y + 1; // 再次使用了 x
    println!(&quot;{}&quot;, sum2(99)); // 输出 101
</code></pre>
<blockquote>
<p>说明： <code>x</code> 在 sum1 中使用后，还能在 sum2 中再次使用，说明 <code>x</code> 所有权没有 move。</p>
</blockquote>
<p>实际上，上述例子的 <code>x</code> 在闭包中是作为 <strong>不可变借用</strong> 使用的，<strong>因为这个闭包实现了 <code>Fn</code> trait</strong>。</p>
<h2>闭包的三种 traits</h2>
<p>闭包是一种函数，它的三种 traits 恰好对应了三种处理所有权的方式。</p>
<p>三种 traits 如下（划重点，请背下来）：</p>
<ol>
<li><code>FnOnce</code>：表示此闭包调用时会获取环境变量所有权（<strong>所有权 move</strong>)。因此取名 <code>FnOnce</code>，表示此闭包只能执行一次，因为再次执行时，环境变量可能由于之前所有权 move 过，已经没法用了。</li>
<li><code>FnMut</code>  ：表示此闭包调用时会对环境变量进行<strong>可变借用</strong>，可能会修改环境变量</li>
<li><code>Fn</code> ： 表示此闭包调用时会对环境变量进行<strong>不可变借用</strong>，不会修改环境变量</li>
</ol>
<p>并且，<strong>一个闭包可以同时实现多个 traits</strong>。比如实现了 <code>Fn</code> 的闭包也一定实现了 <code>FnOnce</code> （后续解释）。</p>
<p>上面是从“对环境变量如何处理所有权” 来解释三个 traits，大部分教程也是这么写，但个人并不推荐完全按这样去理解。因为上述表述中，三个 traits 看起来是互不重叠的（实际并非如此），导致可能会出现这样的疑问：</p>
<blockquote>
<p>“实现了 <code>Fn</code> 的闭包说是对环境变量进行了不可变借用，那怎么还能同时实现 <code>FnOnce</code> ，去获取环境变量的所有权呢？到底是仅仅进行不可变借用，还是获取了所有权呢？”</p>
</blockquote>
<p>但是看三个 traits 的源代码，可以直接回答上述问题：是不可变借用。虽然确实也实现了 <code>FnOnce</code>（所有权 move） ，但并没有调用 <code>FnOnce</code> 的 call 函数，而是调用了 <code>Fn</code>(不可变借用) 的 call 函数。</p>
<pre><code class="language-rust">pub trait Fn&lt;Args&gt; : FnMut&lt;Args&gt; {
    extern &quot;rust-call&quot; fn call(&amp;self, args: Args) -&gt; Self::Output;
}

pub trait FnMut&lt;Args&gt; : FnOnce&lt;Args&gt; {
    extern &quot;rust-call&quot; fn call_mut(&amp;mut self, args: Args) -&gt; Self::Output;
}

pub trait FnOnce&lt;Args&gt; {
    type Output;

    extern &quot;rust-call&quot; fn call_once(self, args: Args) -&gt; Self::Output;
}
</code></pre>
<blockquote>
<p>分析：如果 <code>FnOnce</code> 的 call 函数被调用，则直接传入了 <code>self</code> ，也就是获取了当前的环境变量的所有权，自然运行一次后回被销毁。而 <code>Fn</code> 的 call 函数传入的是不可变借用 <code>&amp;self</code>。</p>
</blockquote>
<p>并且会发现， <code>Fn</code> 的前提是实现了 <code>FnMut</code> ,  <code>FnMut</code> 的前提是实现了 <code>FnOnce</code> 。</p>
<ul>
<li>从继承关系来讲： <code>Fn</code> 继承 <code>FnMut</code> 继承 <code>FnOnce</code></li>
<li>从访问变量的权限范围来讲： <code>Fn</code> &lt; <code>FnMut</code> &lt; <code>FnOnce</code></li>
</ul>
<p>也可以说，<strong>闭包就算实现了 <code>FnOnce</code> 也不一定会用到所有权 move，因为可能还实现了 <code>Fn</code> ，那么环境变量的所有权会按 <code>Fn</code> 处理</strong>。</p>
<hr/>
<p>由于上述继承关系，如果定义一个普通函数，参数需要传入 <code>FnOnce</code> ，实际上也可以传入 <code>Fn</code> 。</p>
<pre><code class="language-rust">fn fn_once&lt;F&gt;(func: F)
where
    F: FnOnce(usize) -&gt; bool, // 传入闭包
{
    println!(&quot;{}&quot;, func(3));
}

fn main() {
    let x = vec![1, 2, 3];
    let closure = |z|{z == x.len()}; // 此闭包实现了 Fn、 FnMut 和 FnOnce
    fn_once(closure); // Fn 可传入标注为 FnOnce 的参数
    println!(&quot;{:?}&quot;, x); // x 还能用，所有权没转移

    let closure2 = move |z|{z == x.len()}; //  此闭包只实现了 FnOnce，因为 x 被强制转移所有权到闭包内部
    fn_once(closure2); // 传入 FnOnce
    println!(&quot;{:?}&quot;, x); // 报错，x 已经没了
}
</code></pre>
<blockquote>
<p>说明：fn_once 需要接收 <code>FnOnce</code> 的闭包作为参数，但传入 <code>Fn</code> 也是合理的，编译器也会按照 <code>Fn</code> 的调用方式处理为不可变借用，并不会因为标注着 <code>FnOnce</code> 而变成所有权 move。</p>
</blockquote>
<blockquote>
<p>闭包对所有权的处理并不会随着标注改变，标注仅仅是为了取悦编译器  ——鲁迅</p>
</blockquote>
<h2>闭包实现三种 traits</h2>
<p>上述例子中，直接标注了闭包实现了三种 traits，但并没有具体说明为什么这么写就是实现了三种 traits。这是本节需要说明的内容。</p>
<p>闭包实现 traits 是<strong>隐式</strong>的。也就是说，你不用（也没法）标注这个闭包是实现的哪个 traits。具体实现了哪些 traits 是根据你的闭包写法决定的。</p>
<p>1. 实现<code>FnOnce</code></p>
<p>所有的闭包都自动实现了 <code>FnOnce</code> 。不用特别做什么。</p>
<p>但更普遍的情况是，定义闭包时会顺带实现 <code>Fn</code> 或者 <code>FnMut</code> 。如果想要只实现 <code>FnOnce</code>，不要实现另外两个，需要用 <code>move</code> 。这个关键字会强制转移所有权，使闭包无法满足 <code>FnMut</code> 和 <code>Fn</code> 的条件。</p>
<ul>
<li>例：只实现了 <code>FnOnce</code> 的闭包</li>
</ul>
<pre><code class="language-rust">fn main() {
    let x = [1,2,3];
    
    let closure2 = move |z|{z == x.len()}; // 只实现了 FnOnce，所有权转移
    closure2(2);
    
    println!(&quot;{:?}&quot;, x); // 报错，x 所有权被转移
}
</code></pre>
<p>2. 实现<code>FnMut</code></p>
<p>在闭包中修改外部变量，即实现了 <code>FnMut</code> （自然也实现了 <code>FnOnce</code> ），同时没有实现 <code>Fn</code> 。</p>
<pre><code class="language-rust">fn main() {
    let mut x = vec![1,2,3];

    let mut closure = ||{x.push(4);}; // 修改了外部的 x, 实现了 FnMut， x 所有权没有转移
    closure();
    
    println!(&quot;{:?}&quot;, x);
}
</code></pre>
<p>3. 实现<code>Fn</code></p>
<p>在闭包中访问外部变量，不做任何修改，即实现了 <code>Fn</code> （自然也实现了 <code>FnMut</code>  和 <code>FnOnce</code>）。</p>
<pre><code class="language-rust">fn main() {
    let s = String::new();

    let update_string =  || println!(&quot;{}&quot;,s); // 访问外部的 s, 实现了 Fn

    exec(update_string);
    exec1(update_string);
    exec2(update_string);
}

fn exec&lt;F: FnOnce()&gt;(f: F)  { // Fn 也可以传到 FnOnce 类型
    f() // 调用的是 Fn，所有权不会转移
}

fn exec1&lt;F: FnMut()&gt;(mut f: F)  { // Fn 也可以传到 FnMut 类型
    f()
}

fn exec2&lt;F: Fn()&gt;(f: F)  {
    f()
}
</code></pre>
<h2>闭包自身的所有权</h2>
<p>上述讨论的是闭包对于环境变量的所有权处理。那闭包自己呢？当闭包自己作为变量被传来传去时，是 Copy 还是所有权 Move？</p>
<p>答案是，<code>Fn</code> 是 Copy，<code>FnMut</code> 和 <code>FnOnce</code> 是所有权 Move。</p>
<pre><code class="language-rust">fn main() {
    let x = vec![1,2,3];

    let closure = |z:usize|{ z == x.len()}; // 实现了 Fn
    outter(closure); // 通过
    outter(closure); // 通过

    let closure2 = |z:usize|{ x.push(4);z == x.len()}; // 实现了 FnMut
    outter(closure2); // 通过
    outter(closure2); // 报错, closure2 的所有权已被转移
}

fn outter&lt;T&gt;(mut func: T)
where T: FnMut(usize) -&gt; bool { // Fn 可以传到 FnMut 标注的参数上
    let a = func;
}
</code></pre>
<p>这是非常合理的，对应着 Rust 借用的规则</p>
<blockquote>
<p>在同一时间点，对于同一个变量，<strong>要么</strong>只能有一个可变借用(FnMut)，<strong>要么</strong>只能有<strong>多个不可变借用</strong>(Fn)。</p>
</blockquote>
<p>至于 <code>FnOnce</code>，对环境变量的访问权限这么大，还想 Copy？只能是所有权 move。</p>
<h2>一些建议</h2>
<p>如果遇到函数的参数也是一个函数，需要标注 trait 的场景，又不知道到底应该标注哪一个 trait，建议先标注 Fn ( 权限最小的 trait)，由编译器提示后再进行修改。</p>
<p>另外，闭包的所有权部分并不推荐背书，尤其不推荐总结为正交规则。三个 traits 的区别与联系在代码层面非常简单且容易分析，总结为正交规则反而是把简单的事情复杂化，而且难记。</p>
<p>如果仍然难懂，可评论提出，后续改进。</p>]]></content>
        <category label="学习"/>
        <published>2022-06-14T01:51:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[PPT母版的制作与使用方法]]></title>
        <id>https://sansui233.com/posts/PPT母版的制作与使用方法</id>
        <link href="https://sansui233.com/posts/PPT母版的制作与使用方法"/>
        <updated>2021-11-12T00:08:55.000Z</updated>
        <content type="html"><![CDATA[<p>由于我需要批量编辑 PPT 的样式，但 PPT 没有组件化样式的概念，所以开始学习用母版。虽然之前也用过，但始终不明白 PPT 的迷之逻辑，有时候是调整了母版但不生效，或者调整了局部结果别的地方也被影响了……今天才大概明白了一点（还是 Figma 和 Sketch 的逻辑好懂……）所以从我的角度说一下对 PPT 的模版理解。</p>
<p>这个问题明显视频解释更好，但不太想做视频（躺）因为每次做视频前写大纲都要写好久……</p>
<p>图源 Github，图片不显示挂代理 Please。</p>
<h2>概念解释（母版/版式/主题）</h2>
<h3>打开母版</h3>
<p>母版的入口在“视图”→“幻灯片母版”。Mac 上的快捷键是 <code>command + alt + 1</code>。</p>
<h3>什么是母版和版式</h3>
<p>母版，是 PPT “主题” 的一部分，可以对多张幻灯片的排版进行统一的修改。</p>
<p>我们日常制作的 PPT，都会基于一个母版（虽然很多人不去用）。在后面的内容中，对于日常制作的 PPT，我会称为“PPT 内容”。</p>
<p>一个正常的母版包含着一个“<strong>幻灯片母版</strong>”和多个“<strong>版式</strong>”。</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/Screen%20Shot%202021-11-11%20at%207.03.24%20PM.png" alt="母版结构"/></p>
<h3>样式继承</h3>
<p>“<strong>版式</strong>” 会继承 “<strong>幻灯片母版</strong>”（以下简称为 <strong>母版</strong> ）中的一些元素的样式（包括位置、字体、大小、颜色等）。也就是说，只要更改 <strong>母版</strong> 里的样式，<strong>版式</strong>也会自动更新。</p>
<p>所以是哪些元素可以被继承呢？在菜单栏里的“母版版式”中，有五个选项分别是</p>
<ul>
<li>标题</li>
<li>正文</li>
<li>日期和时间</li>
<li>页脚</li>
<li>页码</li>
</ul>
<p>以上就是所有样式可以被继承的元素。是的，你在母版上<strong>只有这五个元素的样式可以被继承</strong>。你可以尝试在“主题”选项中打开任何一个母版，会发现所有母版都是这五个元素。你无法擅自增加其他可以被继承的元素。</p>
<p>并且以上显示的每个元素在母版上都只能设置一种样式，**你无法同时给标题设置两种样式。**也就是说，如果你有设置 <strong>一级标题 + 二级标题</strong> 样式的需求，你无法通过设置 <strong>母版</strong> 上的样式实现二级标题。你只能通过 <strong>版式</strong> 去设置二级标题。</p>
<p>另外 <strong>背景</strong> 也可以被继承，但它属于在正式的 PPT 内容中不可编辑的元素。</p>
<h2>如何编辑元素样式</h2>
<p>选中元素，在“开始”选项里编辑即可。</p>
<p>通常情况下，母版的排版需要设置得尽可能通用，之后的每个版式都将以母版为基准进行编辑。母版本身并不能直接被 PPT 内容所使用，做 PPT 能选择使用的只有继承了母版样式的 <strong>版式</strong>。</p>
<h2>版式如何继承母版</h2>
<h3>继承标题样式</h3>
<p>选择一个版式（或点“插入版式”），给菜单里的“标题”打上勾。</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/Screen%20Shot%202021-11-11%20at%207.35.09%20PM.png" alt="标题继承"/></p>
<p>需要注意的是，如果你在“开始”里添加一个文本框，移动到标题的位置，并不会被 PPT 识别成标题。从外面粘进来的文本框也一样，只会被识别为“一个普通的文本框”。之后批量更新标题的样式时，也并不会被更新。</p>
<p>所以在版式中设置正确设置标题的方法只有这一个——给标题打上勾。</p>
<p><strong>想设置二级标题怎么办？</strong></p>
<p>母版没有二级标题，只能用下面说的占位符实现。</p>
<h3>继承正文样式</h3>
<p>继承正文的正确方法，是点击上一节图中的“插入占位符” ，有好几个选项，一般选内容就可以了。</p>
<p>此占位符生成的文本框的样式和 <strong>母版</strong> 中完全一致。如果说 <strong>母版</strong> 的样式是全局变量，<strong>版式</strong> 中再次修改的样式就是局部变量。</p>
<p>对于<strong>修改过的部分</strong>，母版里对正文的更新不会导致版式中的正文更新。比如：</p>
<ul>
<li>母版中的正文字号是 20px</li>
<li>版式中的正文字号不变，但是给加粗了</li>
<li>修改母版中的正文字号为 22px</li>
<li>版式中的正文字号变成 22px，但仍然加粗。</li>
</ul>
<blockquote>
<p>❗️注意：不要从“开始”里新建文本框！也不要从母版界面外粘贴进来！</p>
<p>原因同上，非占位符生成的文本框，对其样式的修改并不会真正改到“正文”的样式。使用的时候就会发现了，更新版式了但 PPT 内容样式完全没更新……这种情况就是因为版式中的文本框不是占位符生成的</p>
</blockquote>
<p>所以如何实现二级标题？</p>
<ul>
<li>添加一个占位符</li>
<li>添加文本样式</li>
</ul>
<h3>继承日期和时间、页脚、页码</h3>
<p>在版式中，给“页脚”打上勾，以上三者的样式都会被继承。</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/Screen%20Shot%202021-11-11%20at%2011.06.48%20PM.png" alt="其他继承"/></p>
<h2>使用版式</h2>
<p>退出“幻灯片母版”模式。在正常 PPT 内容的模式下，菜单栏“开始”中有个“版式”选项。在侧边栏选中一页（或多页） PPT，点击相应版式即可应用。</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/image-20211111231429427.png" alt="使用版式"/></p>
<blockquote>
<p>如果你原来的 PPT 内容不是依靠版式中的“占位框”排版，而是靠手动创建的文本框，那直接应用版式是不会修改你原来的内容的。</p>
<p>换言之，如果想要达到批量、统一的排版效果，需要尽可能地应用版式给出的占位框，而不是手动创建的文本框。</p>
</blockquote>
<p>在“<strong>版式</strong>”选项下面一个“<strong>重置</strong>”，意思是重置到当前版式初始的样式。</p>
<p>比如，版式中的文字样式设置的是纯文本，而 PPT 内容里修改为列表。点击“<strong>重置</strong>”会使得列表项消失，再次成为纯文本。</p>
<h3>刷新修改后版式</h3>
<p>版式修改后，有时候并不会自动应用到 PPT 内容上去，这种情况通常发生于在 PPT 内容中对占位框的位置、大小等等进行了调整。</p>
<p>比如在 PPT 内容中调整过的占位框位置，将不再随着版式更新。如果需要复位（让占位框位置能随着版式更新），可以再应用一次版式。</p>
<h3>正在使用的版式</h3>
<p>对于被用到了 PPT 内容上的版式，只有一个建议：<strong>不要随便删除版式里的元素！</strong></p>
<p>这会导致已经被应用了版式的内容格式被清除……你需要去重新应用版式。</p>
<hr/>
<p>写在后面的吐槽：排版这种事情 <strong>Layout + 组件化</strong> 不香吗！PPT  的样式复用实在太局限了。看祖传的 PPT 排版看得我脑壳疼，每一页的小标题位置都不一样，字体也是用得乱七八糟的。排版的四原则，“亲密”“对齐”“对比”“重复”，每一项都很重要。但一项都不满足这是怎么做到的！强迫症（伪）哭晕在厕所。</p>
<p>其实还是祖传的习惯问题。比如 Word，小时候我也是有过一段时间空格排版居中……现在谁还空格排版居中，我见一个打一个（狗头）</p>]]></content>
        <category label="摸鱼"/>
        <published>2021-11-12T00:08:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[纯函数与算法]]></title>
        <id>https://sansui233.com/posts/pure-function</id>
        <link href="https://sansui233.com/posts/pure-function"/>
        <updated>2021-09-25T12:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>自从接触了纯函数，刷算法题刷得举步维艰。</p>
<blockquote>
<p>什么是纯函数：同样的传入参数，一定可以得到相同的输出</p>
</blockquote>
<p>纯函数又被称为无副作用的函数，不会改变外部的状态。</p>
<p>比如在 JS 中，array.slice()对数组的切片，返回的是一个新的数组，为纯函数。</p>
<p>相对的，array.splice()对数组的插入与删除是对于原数组操作，不是纯函数。</p>
<p>纯函数的意义，在于保证<strong>不会对函数外部的状态有隐式的修改</strong>。这在大型的、遍地都是状态的系统中非常重要。如果不保证纯函数，多个函数内部去修改了同一外部状态，容易出现意想不到的 Bug。</p>
<h2>图的邻接矩阵定义</h2>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/g61Yvh.jpg" alt=""/></p>
<pre><code class="language-ts">let map = {
  point: [&#x27;V0&#x27;, &#x27;V1&#x27;, &#x27;V2&#x27;, &#x27;V3&#x27;, &#x27;V4&#x27;, &#x27;V5&#x27;, &#x27;V6&#x27;, &#x27;V7&#x27;],
  side: [
    [0, 1, 0, 1, 1, 0, 0, 0],
    [1, 0, 1, 0, 1, 0, 0, 0],
    [0, 1, 0, 0, 0, 1, 0, 0],
    [1, 0, 0, 0, 0, 0, 1, 0],
    [1, 1, 0, 0, 0, 0, 1, 0],
    [0, 0, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 1, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 1, 0],
  ]
}
</code></pre>
<h2>图深度遍历的非纯函数实现</h2>
<pre><code class="language-ts">// DFS 深度优先遍历，从 第 index 个节点开始. visited 记录已访问的节点，全局共用一个 visited
function DFStraverse(index: number = 0, visited = [map.point[0]]) {
  if (visited.length === map.point.length) {
    console.log(visited.toString())
    return
  }

  map.side[index].forEach((isSide, targetv) =&gt; {
    if (isSide &amp;&amp; !visited.includes(map.point[targetv])) {
      visited.push(map.point[targetv])
      DFStraverse(targetv, visited)
    }
  })
}
</code></pre>
<p>以上代码的问题：</p>
<ul>
<li>map 定义在了外部，和别的函数共用</li>
<li>visited 是全局共用同一个，但却每次都要作为参数传入，逻辑上既不合也没有必要。并且作为函数参数（而不是全局变量），每次都对 visited 作了修改。这里还好，因为要的就是修改后的 visited（实际上是全局的 visited）。但如果题目是一个回溯问题，就需要管理 visited 的状态，在修改了之后，递归出栈时还得改回来。</li>
</ul>
<h2>图深度遍历的纯函数实现</h2>
<pre><code class="language-ts">// DFS 深度优先遍历，从 第 index 个节点开始. visited 记录已访问的节点，全局共用一个 visited
// 纯函数实现
function DFStraverse(index: number, map: { point: string[], side: number[][] }) {
  const visited = [map.point[index]]

  function traverse(index: number) {
    // 终止条件
    if (visited.length === map.point.length) {
      console.log(visited.toString())
      return
    }

    map.side[index].forEach((isSide, targetv) =&gt; {
      if (isSide &amp;&amp; !visited.includes(map.point[targetv])) {
        visited.push(map.point[targetv])
        traverse(targetv)
      }
    })
  }

  traverse(index)
}
</code></pre>
<p>使用闭包，把共用的 visited 固定为状态。内部再定义函数作递归。 map 也作为外层的参数传入，里面不去修改。</p>
<hr/>
<p>状态其实在各种算法里挺重要的。不少空间换时间的极限操作都要用到。</p>
<p>算法注定是“不纯”的，能做的也不过是用闭包来保存状态。有时候觉得，纯不纯的也没有这么重要。</p>]]></content>
        <category label="学习"/>
        <published>2021-09-25T12:00:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github hosts 更新脚本(MAC)]]></title>
        <id>https://sansui233.com/posts/github-hosttools</id>
        <link href="https://sansui233.com/posts/github-hosttools"/>
        <updated>2021-08-07T04:08:55.000Z</updated>
        <content type="html"><![CDATA[<p>此工具已更新至 <a href="https://github.com/Sansui233/mac-githubhosts-autoupdate">Github</a>。</p>
<ul>
<li>安装卸载脚本</li>
<li>自动定时运行</li>
<li>平时不占内存，运行时几乎不占内存</li>
</ul>
<p>原文如下：</p>
<hr/>
<p>最近 Github 墙得越来越厉害了。写了个 Shell 工具，连不上的时候就更新一下。可以配合 Alfred 使用。</p>
<p>使用的 host 源来自<a href="https://github.com/JohyC/Hosts">这里</a>。其实用 SwitchHosts 更新也行，但我真的讨厌 Electron App……麻了，现在听个歌写个笔记 1个多 G 的内存就没了。</p>
<p>也可以用写成定时程序后台运行，加个 LaunchDaemon 文件就行，但，我不会打包 Mac App……文件这么散着分发也太 emmm，而且别人装起来也麻烦……</p>
<p>麻烦归麻烦还是要写的……</p>
<p>文件和说明已经上传到 <a href="https://github.com/Sansui233/mac-githubhosts-autoupdate">Github</a>。</p>
<ul>
<li>下面这个文件保存取名为 <code>hoststool</code></li>
<li>赋予执行权限 <code>chmod +x hoststool</code>。如果为了执行起来方便，可以放进环境变量的目录（比如/usr/local/bin）</li>
<li>然后就可以使用 <code>hoststool -u</code> 更新 host 了，运行结果会发系统通知。之前可以自己看看 hosts 内容有没有问题。这是有几率失败的，因为用的 gittee 的 host 源，经常会提示文件疑似违规……这种时候再请求一次就好了，第二次就不违规了。我也不知道为什么。</li>
</ul>
<p>（定时任务的部分在后面）</p>
<pre><code class="language-shell">#!/bin/bash
showHelp() {
	echo &quot;-u [source_url]	update github hosts. You can specify a custom host source&quot;
	echo &quot;-b	backup /etc/hosts to /etc/hosts.backup&quot;
	echo &quot;-r	recover hosts.backup to hosts&quot;
	echo &quot;-f	list files in /etc which contains \&quot;hosts\&quot;&quot;
}


# ====== Main =====
if [ $# -eq 0 ]; then showHelp;exit 0;fi

# CONF
download_dir=&quot;$HOME/etc/hoststool&quot;
github_hosts=&quot;https://gitee.com/yuchi-shentang/GithubHosts/raw/main/hosts.txt&quot;
if [ ! -d &quot;$download_dir&quot; ]; then
  mkdir -p $download_dir
fi

case &quot;$1&quot; in
	-f)
		ls /etc | grep hosts;
		exit 0;;
	-b) 
		sudo cp /etc/hosts /etc/hosts.backup;
		exit 0;;
	-r) 
		sudo cp /etc/hosts.backup /etc/hosts;
		exit 0;;
	-u) 
		if [ $2 ]; then github_hosts=$2;fi
		curl -o ${download_dir}/hosts ${github_hosts};
		if [ $? -ne 0 ]; then
			echo &quot;[ERROR] 获取远程 host 出错，请尝试更换 source 或检查 download_dir 读写权限&quot;
			osascript -e &#x27;display notification &quot;获取远程 host 出错，请尝试更换 source&quot; with title &quot;hoststool&quot;&#x27;
			exit 1
		fi
		
		# Validate host content length
		lines=$(awk &#x27;{print NR}&#x27; ${download_dir}/hosts | tail -n1)
		if [ $lines -lt 10 ]
		then
			echo &#x27;[ERRO] 远程 Github Hosts 无效（Gitee源不稳定），通常重试即可&#x27;
			osascript -e &#x27;display notification &quot;远程 Github Hosts 无效（Gitee源不稳定），通常重试即可&quot; with title &quot;hoststool&quot;&#x27;
			rm ${download_dir}/hosts
			exit 1
		fi

		# Remove old content
		begin=$(sed -n  &#x27;/# ==== Github Start ====/=&#x27; /etc/hosts | awk &#x27;NR==1{print}&#x27;)
		end=$(sed -n  &#x27;/# ==== Github End ====/=&#x27; /etc/hosts | awk &#x27;END{print}&#x27;)
		echo &quot;Removing old hosts. Start at line \&quot;${begin}\&quot;, End at line \&quot;${end}\&quot;&quot;
		cat /etc/hosts | sed &quot;${begin},${end}d&quot; &gt; ${download_dir}/hosts.tmp
		if [ $? -ne 0 ]; then
			## Trip Failed
			echo &quot;[INFO] 当前 Host中 无旧的 Github Host 标记可清除&quot;
		else
			## Trip Succeed, move result
			echo &quot;[INFO] 清除旧的 Github Host 标记&quot;
			sudo cp /etc/hosts /etc/hosts.backup &amp;&amp; sudo cp ${download_dir}/hosts.tmp /etc/hosts;
		fi

		# Add new hosts
		sudo bash -c &quot;echo &#x27;# ==== Github Start ====&#x27; &gt;&gt; /etc/hosts&quot; # Add github host
		if [ $? -ne 0 ]; then
			echo &quot;[ERROR] 无root权限，请尝试运行脚本手动输入密码&quot;
			osascript -e &#x27;display notification &quot;无root权限，请尝试运行脚本手动输入密码&quot; with title &quot;hoststool&quot;&#x27;
			rm ${download_dir}/hosts.tmp
			rm ${download_dir}/hosts
			exit 1;
		fi
		sudo bash -c &quot;echo \&quot;# Updated at $(date)\&quot; &gt;&gt; /etc/hosts&quot; # Add github host
		sudo bash -c &quot;cat ${download_dir}/hosts &gt;&gt; /etc/hosts&quot;;
		sudo bash -c &quot;echo &#x27;# ==== Github End ====&#x27; &gt;&gt; /etc/hosts&quot;
		rm ${download_dir}/hosts.tmp
		rm ${download_dir}/hosts

		echo &quot;[INFO] Github Hosts 块更新于 $(date)&quot;
		osascript -e &#x27;display notification &quot;Github Hosts 已更新&quot; with title &quot;hoststool&quot;&#x27;
		exit 0;;
	-h|--help)
		showHelp;
		exit 0;;
	*)
		echo &quot;Unknown command&quot;;
		showHelp;
		exit 1;;
esac

</code></pre>
<h2>定时</h2>
<p>保存以下文件为 <code>hoststool.plist</code>。</p>
<pre><code class="language-plist">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
&lt;key&gt;Label&lt;/key&gt;&lt;string&gt;hoststool&lt;/string&gt;

&lt;key&gt;ProgramArguments&lt;/key&gt;
&lt;array&gt;
  &lt;string&gt;/usr/local/bin/hoststool&lt;/string&gt;
  &lt;string&gt;-u&lt;/string&gt;
&lt;/array&gt;

&lt;key&gt;RunAtLoad&lt;/key&gt;
&lt;true/&gt;

&lt;key&gt;StartInterval&lt;/key&gt;
&lt;integer&gt;3600&lt;/integer&gt;

&lt;key&gt;StandardOutPath&lt;/key&gt;
&lt;string&gt;/Library/Logs/hoststool.log&lt;/string&gt;

&lt;key&gt;StandardErrorPath&lt;/key&gt;
&lt;string&gt;/Library/Logs/hoststool.log&lt;/string&gt;

&lt;/dict&gt;
&lt;/plist&gt;
</code></pre>
<p>把 <code>/usr/local/bin</code> ，改成你存放脚本的路径。</p>
<p>时间间隔为 3600 秒，可以自己修改。</p>
<p>然后执行</p>
<pre><code class="language-shell">$ sudo cp hoststool.plist /Library/LaunchDaemons
$ sudo chown root:admin /Library/LaunchDaemons/hoststool.plist
$ sudo launchctl load -w /Library/LaunchDaemons/hoststool.plist
</code></pre>
<p>执行完就会立刻运行一次脚本。由于定时任务是 root 用户不是个人用户，不会有通知，可以去 Console 看 log。</p>]]></content>
        <category label="摸鱼"/>
        <published>2021-08-07T04:08:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[网盘目录程序比较]]></title>
        <id>https://sansui233.com/posts/网盘目录程序比较</id>
        <link href="https://sansui233.com/posts/网盘目录程序比较"/>
        <updated>2021-05-26T01:15:45.000Z</updated>
        <content type="html"><![CDATA[<p>比较一下私人网盘有关的程序</p>
<ul>
<li>cloudreve</li>
<li>onemanager</li>
<li>zfile</li>
<li>nextcloud</li>
</ul>
<h2>1. Cloudreve</h2>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/demo.cloudreve.org_home.png" alt="cloudreve"/></p>
<p>是个网盘程序，意思是在服务器上运行这个程序你就能成为了千度网盘的老板，可以拥有很多注册会员，还可以给他们收费，从此发家致富(bushi)。</p>
<ul>
<li>需要服务器和域名</li>
<li>文档不全，社区还行，使用方法社区找</li>
<li>是真的网盘，不是网盘列表程序，适合建站用，One Drive个人帐号不能用。</li>
<li>没事记得备份 (不知道换服务器时迁移数据麻不麻烦，反正可以用Docker)</li>
</ul>
<h2>2. One-manager</h2>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/herooneindex.herokuapp.com_Ali_.png" alt="one manager"/></p>
<p>网盘列表程序，阿里云或者 Onedrive 的网盘里的文件列出来，便于集中分享。单纯是个人分享站。</p>
<ul>
<li>serverless，不需要服务器和域名，可白嫖资本家的服务</li>
<li>README 即文档，issue 即社区。README写得像随便记的笔记，好在也不复杂都有引导</li>
<li>功能很多，除了基础的分享、预览、下载功能，可以上传重命名等进行管理(但是界面不好看导致体验并不好)。不依靠程序设定，而是把网盘里的文件作为功能性文件，挺方便的，再次部署时不用迁移任何数据</li>
<li>可以预览的文件格式很多，没什么bug</li>
<li>界面比较丑，前台可以换主题。但好看的功能不全，后台不能换主题(强行要换也是可以但可能功能不全)。</li>
</ul>
<h2>3. zfile</h2>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/zfile.jun6.net_.png" alt="zfile"/></p>
<p>是网盘列表程序，同 One Manager。</p>
<ul>
<li>需要服务器和域名。但看情况也许可以 Serverless ？不清楚Java</li>
<li>有文档，README说得很清楚，不用一脸懵逼找社区</li>
<li>功能不多，基础的分享、预览、下载功能，前端好，交互体验好</li>
<li>文件预览有Bug，OneDrive的视频流经常加载不出来，FLV会一直加载失败。但，好看是真的</li>
</ul>
<p>开发者是98年的(暴击)</p>
<h2>4. nextcloud</h2>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/top-homeimage@2x.png" alt="nextcloud"/></p>
<p>个人网盘程序，和Cloudreve一个性质的。很多插件，交互是最好的，也比较耗资源，适合家里获团队用。</p>
<p>external storage 装起来复杂，不好白嫖资本家。</p>]]></content>
        <category label="摸鱼"/>
        <published>2021-05-26T01:15:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[m3u8直播流实时录屏小记]]></title>
        <id>https://sansui233.com/posts/hslrecord</id>
        <link href="https://sansui233.com/posts/hslrecord"/>
        <updated>2021-05-12T15:16:44.000Z</updated>
        <content type="html"><![CDATA[<p>最近由于发现自己想回看的直播会被剪镜头，所以下定决心以后要学会录屏。但本人有强迫症，一般的录屏软件满足不了我的需要，主要是：</p>
<ol>
<li>会录出鼠标操作、网络卡顿、水印等影响观感的画面</li>
<li>由于显示器和录屏软件的和原视频帧数可能不同步的问题，非常容易造成画面卡顿</li>
<li>体积远大于原视频，二压后画质失真重</li>
</ol>
<p>通常来讲，能拿直播时的视频流就别真的屏幕录制。本来视频分段就都在缓存里，应该是有比较容易实现的办法做到实时保存的才对。</p>
<p>本文主要分为以下三个部分</p>
<ul>
<li>m3u8简介</li>
<li>保存视频分段与合并</li>
<li>DRM 版权保护问题</li>
</ul>
<h2>m3u8简介</h2>
<p>目前的各大流媒体平台视频（不管是直播还是回放）大多都会把视频切片为很小一段，长度可能10s左右，通常是.ts后缀的文件。而这一堆.ts文件的索引文件为m3u8文件。</p>
<p>一个通常的m3u8文件是如下格式</p>
<pre><code class="language-text">#EXTM3U
#EXT-X-VERSION:3
#EXT-X-TARGETDURATION:10
#EXT-X-MEDIA-SEQUENCE:0
#EXTINF:10.000000,
#EXT-X-PRIVINF:FILESIZE=3192240
https://website/xxx-00001.ts
#EXTINF:10.000000,
#EXT-X-PRIVINF:FILESIZE=3206904
https://website/xxx-00002.ts
#EXTINF:10.000000,
#EXT-X-PRIVINF:FILESIZE=2576164
https://website/xxx-00003.ts
</code></pre>
<p>也就是说，如果我们实时保存流媒体平台的视频，正常情况下，会保存一个.m3u8索引文件，和一堆.ts文件。有了这些文件我们可以直接使用支持m3u8的播放器（如IINA、VLC）进行播放。</p>
<p>m3u8是 HLS(HTTP Live Stream) HTTP直播流格式的基础。</p>
<h2>保存视频分段与合并为MP4</h2>
<p>工具准备：</p>
<ul>
<li><a href="https://www.ffmpeg.org/">ffmpeg</a>：强大的命令行视频处理工具，网上有很多安装教程，这里不重复</li>
<li><a href="https://chrome.google.com/webstore/detail/%E7%8C%AB%E6%8A%93/jfedfbgedapdagkghmgibemcoggfppbb">Chrome插件-猫抓</a>：资源嗅探插件，下载需要科学上网</li>
<li>一个多线程的下载器（为了下载速度更快），如 aria2，网上有很多教程，这里不重复</li>
<li>一个支持<strong>使用正则表达式批量替换文字</strong>的txt编辑器，如sublime、vscode</li>
</ul>
<p>以上方法会比较硬核，傻瓜式的方法可只准备下面这一个</p>
<ul>
<li><a href="https://www.hlsloader.com/">Chrome插件-Stream Recorder</a>：傻瓜式HLS一键保存插件，下载需要科学上网</li>
</ul>
<h3>方法一：下载所有分段并合并（稍硬核）</h3>
<p>首先打开一个视频网站，这里以优酷的综艺为例。<br/>
打开后点击右上角的猫抓插件，会看到一个m3u8文件，和一堆ts文件。</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240.png" alt="猫抓.png"/></p>
<p>首先我们可以先点下载按钮下载到本地 .m3u8 文件。</p>
<p>猫抓插件提供了对m3u8的解析，点击文件旁的放大镜就可以看见。</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240-20210512174624858.png" alt="image.png"/></p>
<p>复制所有的内容，放到支持多线程的下载器里下载。</p>
<p>下载完成后，先整理一下本地的文件目录成如下</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240-20210512174641967.png" alt="本地文件"/></p>
<p>（为了看起来更清晰，以上各个文件名我已修改）</p>
<p>然后修改m3u8文件。我这里使用的编辑器是vs code。</p>
<p>m3u8文件里的原链接是这样的：</p>
<pre><code class="language-text">https://valipl-vip.cp31.ott.cibntv.net/67756D6080932713CF4E/0300609724C6163EBF1C35DAC076221D-4673-49D8-A932-70FA-00001.ts?ccode=0502&amp;duration=6237&amp;expire=18000&amp;psid=28ae2c9bf869cf6f9ae28c814098b5fe43346&amp;ups_client_netip=3b4081be&amp;ups_ts=1620641730&amp;ups_userid=300380294&amp;utid=Xd0WGHofZhACAXtwDp2%2BGj22&amp;vid=XNTE0MDg5MTgyOA&amp;sm=1&amp;operate_type=1&amp;dre=u38&amp;si=78&amp;eo=0&amp;dst=1&amp;iv=1&amp;s=cbcad844c5894d209b9f&amp;type=mp4hd3v3&amp;bc=2&amp;hotvt=1&amp;t=d91e686d230165f&amp;cug=1&amp;rid=20000000DC17B06335EBB96917703D4A6B2DA12102000000&amp;vkey=B84707ca23f9e5899f9b0b9d97e4d1851
</code></pre>
<p>非常的长。我们首先要做的，是去掉每一行 <code>?</code> 之后的所有字符。使用正则表达式批量替换，在查询里输入<code>\?.*?\n</code>，替换为 <code>\n</code> 。注意要勾选正则表达式的符号。</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240-20210512174711034.png" alt="replace query"/></p>
<p>然后要替换的是<code>https://...</code>内容，替换为本地的文件路径，让最后的剩下文件名指向本地的文件。</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240-20210512174718097.png" alt="替换本地文件.png"/></p>
<p>替换后的.m3u8文件是这样的</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240-20210512174727634.png" alt="m3u8文件"/></p>
<p>此时可以使用支持m3u8的播放器打开m3u8文件，观看是视频能否正常播放。</p>
<p>能正常播放后，使用ffmpeg合并为mp4，不用转码速度就很快</p>
<pre><code class="language-shell">ffmpeg -i index.m3u8 -vcodec copy -acodec copy output.mp4
</code></pre>
<p>完成</p>
<h4>缺点</h4>
<p>对于回放的完整视频文件，通常会提供m3u8索引文件，但对于直播通常是没有m3u8索引的。这时候依然可以按上述方法下载所有分段，用ffmpeg进行合并。</p>
<p>但是直播时无法一次获取到所有ts的链接，而是边播边给。就算猫抓能批量复制链接，但为了防止直播时出什么意外（比如浏览器无响应了、突然断电），看一会儿就得存，无法好好享受直播，最后上千个文件的列表，也变得很麻烦。</p>
<h3>使用 Stream-Recorder插件 傻瓜式保存</h3>
<p>上一个方法的所有步骤，其实都能用这个插件搞定</p>
<ul>
<li><a href="https://www.hlsloader.com/">Chrome插件-Stream Recorder</a>：傻瓜式HLS一键保存插件，下载需要科学上网</li>
</ul>
<p>使用上也很简单。视频播放开始后，点击这个按钮就行了，自动保存视频分段，同时合并为一个mp4。</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240-20210512174735807.png" alt="Stream Recorder.png"/></p>
<p>简单介绍一下，这个插件主要有三个模式</p>
<ul>
<li>Live：实时获取直播时的ts分段，可以没有索引文件自动合并</li>
<li>HLS：看回放时获取ts分段，可以没有索引文件自动合并。但是像B站这种用m4s非标准HLS的似乎用不了。</li>
<li>Capture：实时获取正在播放的HLS，直播回放均可，大部分视频格式都能用，兼容性最好。缺点是真的要一直播着。</li>
</ul>
<p>也就是直播时使用Live抓取或Capture录屏，且可以自动合并视频音频，相当于直播时边看边存。</p>
<p>看回放时使用HLS或Capture保存视频。</p>
<h2>DRM 版权保护问题</h2>
<p>并不是所有的m3u8视频都能这么下载，有的经过了DRM(Digital rights management)的保护。这样的视频下载下来也是无法直接合并的。</p>
<p>有版权保护的视频，使用猫抓查看m3u8解析时，可以发现这么一行</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240-20210512174747126.png" alt="DRM m3u8.png"/></p>
<p>Stream Recorder 也不支持加密视频的下载。</p>
<p>解密不在讨论范围内（我也不会），总得来说还是尽量支持正版。</p>
<hr/>
<p>PS：目前风气真的太严了，如果不是发现片段被删减，也不会想到去研究怎么录屏。既然花了钱买了相应的单场直播，也说明了会提供回放，要求拥有一个和直播时相同的回放个人觉得并不过分。最终给一个删减版，感觉这服务有些不值得，即便直播和录屏混剪都得给剪出来一个完整的版本。</p>
<p>PPS：明白大环境，没有全指责流媒体平台的意思。</p>]]></content>
        <category label="摸鱼"/>
        <published>2021-05-12T15:16:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[记一次被骗388巨款的理发经历]]></title>
        <id>https://sansui233.com/posts/记录一次被骗388巨款的经历</id>
        <link href="https://sansui233.com/posts/记录一次被骗388巨款的经历"/>
        <updated>2021-04-18T21:59:11.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>我原本以为是只是一场诱导式的恶意营销，细想来竟是一个彻头彻尾的楚门的世界。</p>
</blockquote>
<h1>1 拉人</h1>
<p>昨天下午我逛商场时，一个短发美女姐姐叫住我说，他们的造型店在搞活动，有一个嘉宾来做一天发型设计，邀请剪短发的路人去体验。</p>
<p>由于我长相小，经常会成为骗子的下手对象，也明白这样就是诱导消费，换做从前都是装聋。然而许久没有出门，昨天脑子进水，想看看是什么花样。</p>
<p>我说我没钱，我才上大学，很穷。</p>
<p>美女姐姐说，一百多剪一次也贵吗？</p>
<p>我：贵。</p>
<p>美女姐姐说，没事，你不能成为我们的潜在客户也没关系，我们发型师做设计是免费的，剪不剪由你决定。不剪也没事，你就听一听设计理念，今后一定会有所启发。</p>
<p>又 battle 了几轮，我想那就去吧。然后果不其然，美女姐姐一路带出门，带路到了商店的背面的路对面，比较偏僻没什么车，马路上全是隔着的围栏。</p>
<p>我看这地儿明显不对劲，说您先走，我回去了。美女姐姐说来都来了，去看看吧。</p>
<p>在路上，这位美女一直在说我头发塌，后面剪断层了。我寻思着都活过了两轮，所有人都是说我头发炸的，好不容易拉直打薄才到了刚刚好的水平，这还是第一次有人说我头发塌。</p>
<p>美女又问我你对自己的发型满意吗，哪里剪的。我说我很满意，40块剪的，很帅。</p>
<p>美女说，他可以让你的发型更上一层楼。</p>
<h1>2 油腻</h1>
<p>进去是一家造型中心的装饰，装修一般，东西有些乱，在做头发的顾客只有一个，但人还显得挺多的。</p>
<p>一个身高不到170体重看起来180的Tony让我坐下，满脸堆笑，伸出手握手说：</p>
<p>“您好，您贵姓？”</p>
<p>“我姓林。”（假名）</p>
<p>“我叫星x，是今天来这的嘉宾，您可以叫我星哥。”</p>
<p>然后 Tony 分析起我的头发，说我头发的重量感都在耳旁，顶部太塌，头骨太平，和那位美女的说法如出一辙。“为了设计更符合您的脸型，可不可你请你把口罩摘下来呢？”</p>
<p>我觉得这算是个正常需求。摘下了口罩。然后……</p>
<p>Tony ：“你今天打了高光吗？”</p>
<p>“没有。”（这人看不出我没化妆？）</p>
<p>“那你鼻子天生这么立体吗？”</p>
<p>我：“光打得好吧。” （你有眼疾吗？）</p>
<p>“你知道你五官最吸引我的部位是哪里吗？”</p>
<p>我说不知道。</p>
<p>Tony笑了下，“是你的嘴唇。”</p>
<p>……………艹</p>
<p>Tony：“我应该今天应该好好收拾一下，主要是平时接待的都是30多岁的客户，没想到，可以遇见你。”</p>
<p>我无语了，这人有病。理发店Tony大多喜欢套人近乎，这种程度的还是头一次。长得帅的是撩，长得丑的是性骚扰。</p>
<h1>3 洗发小哥</h1>
<p>Tony说让我冲一下头发，看看发型发量和剪裁。</p>
<p>洗头小哥问，你是哪儿人，我说我是四川的。洗头小哥立刻说了句（貌似是）四川话。</p>
<p>我说您也四川的吗？</p>
<p>小哥：“我是云南的，在北京北漂。你知道我们这位嘉宾的价钱吗？”</p>
<p>我说不知道。</p>
<p>“这位嘉宾和很多明星艺人合作过，平时剪一次头要588。”</p>
<p>我：“我是学生，没钱。”</p>
<p>小哥：“你可以好好和他谈一下，应该学生的话能更低一点。”</p>
<p>小哥还向我打探了一下我最贵的理发消费是多少。</p>
<h1>4 装x</h1>
<p>回到梳妆台，Tony向我展示他手机，锁屏密码直接在我眼皮底下输入的。屏幕是他和关晓彤的合照，黑色的背景，国民闺女在照片上像在T台上一样有范，Tony穿着黑西装。相册里还有和高圆圆的合照，两照片风格差不多。当时时间太短没看细节。后来想想，这是P的，我也不是没见过明星的私下合照，哪有私下合照背景纯黑、这么正式和完美的。</p>
<p>Tony说，他平时是做培训的，也给明星艺人做造型。顾客受众一般都是30多岁的，会员费很贵，要两千。我表明我没钱，付不起，不是他的顾客。他说不是也没关系，你就先听听，你觉得可以了再考虑，要是你做得不满意我也不收你钱。</p>
<p>然后Tony又开始说我头发塌了，说有办法让发根蓬松维持四五个月不用去理发店，也能拉长上庭比例。我容易对没见过的东西有兴趣，也想看看是怎么发根蓬松法，再说我确实上庭稍微偏短，觉得可以试试。事后我总结了一下，只想要骗一次钱的人，说四五个月也肯定是忽悠人的。</p>
<p>我问Tony多少钱，Tony说我平时都是500起步，这次给你488。</p>
<p>我表示还是太贵了。Tony又说学生价的话，我可以给你388。然后又开始展示他的手机里看起来高端的东西，表示388真的很便宜。我勉强接受了。</p>
<p>Tony说：“我给你这么个优惠价”，然后俯下身轻轻在我耳边说，“一会儿你要好好想想怎么报答我。”</p>
<p>（先别急着吐，后面还有）</p>
<h1>5 x骚扰</h1>
<p>Tony开始聊老家是哪，我说四川的。他说成都吗，春熙路他去过一段时间，妹子都很不错。“当时我在那一天就干三件事，你知道是什么吗？”</p>
<p>我：……不知道</p>
<p>Tony：“喝酒，上网，泡妞。”</p>
<hr/>
<p>Tony：“你知道为什么我愿意给你做这个头发吗？”</p>
<p>我非常无语，我觉得他真的需要个捧哏。</p>
<p>Tony俯下身，到我耳边悄悄说：“因为我还挺喜欢南方姑娘的。”</p>
<p>……我有点恨我是个面瘫脸。</p>
<hr/>
<p>Tony拔下箍头发用的铁丝，上面缠着红色绒布，说给你变个魔术你信不信。</p>
<p>我抬头看了他一眼，然后他把那个铁丝缠绕成红戒指的形状，把我手拉过去戴我食指上。</p>
<p>我无了个大语，说：“这就是你泡妞的方式吗？”</p>
<p>Tony一把把铁丝拔下来，“什么泡妞的方式，我在说这是手艺人呢，编得挺好吧，我还专门看了你手指的宽度做的。”</p>
<p>我：“手艺人做什么不好，做戒指，不正经。”</p>
<p>Tony：“嘿，她还说我不正经？以后不给你剪头发了。”</p>
<p>（希望看到这你还没有吐）</p>
<hr/>
<p>问到学校，问我多大了，大几。我说我在读研。</p>
<p>Tony：研究生没有工资吗</p>
<p>我：有是有，一个月四百</p>
<p>Tony：这么少啊？感觉在学校收获了什么</p>
<p>我：没什么收获</p>
<p>Tony：收获了男朋友也算</p>
<p>我：好吧，收获了男朋友</p>
<p>Tony：挺好啊，解决了大事。你男朋友不给你提供你经济上的资助吗？</p>
<p>我：没有，我们各管各的。</p>
<p>Tony：要不我按你的标准给你介绍一个男朋友？</p>
<p>我：？这不太好吧</p>
<p>Tony：男性朋友</p>
<p>我：？这也不好吧</p>
<p>Tony：你不接受异性朋友？</p>
<p>我：对</p>
<h1>6 关于钱</h1>
<p>无一例外，推销就是让人花尽可能多的钱。而我之所以叫它骗钱，而非诱导消费，是因为完全超过了一般诱导消费的手段与范畴。</p>
<p>这个理发店有人专门负责陪聊天，陪聊小哥自称在德云社干过一段时间，老家是四川达州（怎么不是云南就是四川）。他主要负责宣传 “高端私人定制” 的概念。这应该是利用社会心理学的范畴了，但口才明显不比美女姐姐和Tony，可以说是很烂，说服不了我这种穷逼逻辑思维者。再说我一向对私人定制、高级vip等模式不看好，我一向认为商品化流水线化压低价格的形式才是最能说服大众购买其产品的。</p>
<p>我也很直接地说我这种人就是小白鼠，你们就是学着怎么解剖小白鼠的人。陪聊小哥解释说，我们和客户的关系更像是朋友，真心诚意为客户在服务。</p>
<p>然后又轮到Tony上场了。这个时候 Tony已经没有x骚扰了，重心全在钱上。因为我明显表示对发型不满意了，他开始宣传起了企业的靠谱性，打开了宣传册子。</p>
<p>“我们这个店在全国都有连锁，2013年开始就有店了，在北京、天津……”</p>
<p>我看了看，这个册子上店的名字和招牌不一样。事后再看大众点评，上面的名字又不一样。</p>
<p>我问Tony你不是被请来的嘉宾吗，他说自己在这个店有股份。</p>
<p>接着 Tony 又开始说办卡的事，给我看朋友圈的宣传，类似于“限定的诱惑”和饥饿营销，比如“今天可预约一位vip”。我说我对vip不感兴趣。</p>
<p>然后Tony又给我看了看微信列表，每个人都是名字+会员价的备注，比如 “金妮可 30000”。说会员卡谁都可以用，<strong>但不接待男性顾客</strong>。然后又和我说2000就能成为vip，他对不同价格的vip都是一个态度。我再次说我穷学生没钱。他说你把你的表当了都能剪好几次头发了。</p>
<p>他说的表是我手上戴的天梭表，因为太贵了我带了快10年了，自己动手换了一次表带换了三次电池。于是我说我表可以带10年，造型一年就过时了。</p>
<p>Tony又说我真的很想把你发展为顾客，学生价1000就行。我还是说没钱。他又说，1000让你三次烫染两次。我依旧说没钱，因为我是真没钱。</p>
<p>Tony说：“你没有花呗吗？”</p>
<p>我：“之前有过，我已经关了”</p>
<p>Tony说：“额度多少？”</p>
<p>我：“不记得，我不会超前消费的”</p>
<p>之后也问了我好几次花呗，使劲想让我用花呗。</p>
<hr/>
<p>我说我穷的时候，提到了一下我这个月剪了三次头了。他问怎么剪这么多次。我说，被忽悠的呗。</p>
<p>Tony：“嘿，说得我忽悠了你似的，我就给你剪这一次，以后不给你剪了，说真的我不缺客户。”</p>
<p>天啦，我该说这人演得太投入，还是该说他太自信？</p>
<hr/>
<p>在结帐的时候，我微信已经没钱了，抱怨了一下最近花得太多，只能用卡结账了。Tony明显顿了一下，什么卡？是信用卡吗？（因为信用卡负债状态跑路了商户也收不到钱）</p>
<p>后来记账时发现，结算页面没有此店的名字和标识，只有一个“美容美发中心”。</p>
<h1>7 关于发型</h1>
<p>Tony：“要是你回去同学看到了，就说我剪了一下，别说是做发根。”</p>
<p>我没明白怎么没头没尾来了这么一句，这能有啥不好说的。现在想来，是怕骗局被揭穿吧。</p>
<p>途中还来了一个妹子剪头。这个妹子的发型很迷，白色的头发，顶部特别高和头骨的比例完全不协调（我突然觉得我看骨相识人也不错）。当时Tony确认了一下，“这人是顾客吗？”然后让我等3分钟，看他展示什么叫3分钟剪完一个头发。我不知道这里的顾客是什么黑话。不过他剪的头发层次高得太离谱了，和妹子脸不配，太土了，审美实在不行。</p>
<p>现在觉得，这个顾客也可能是演员，带顶假发上场的。</p>
<p>至于我的发型，又变蓬了像狗熊。我剪完就去买个夹子夹塌了。朋友听了之后说你也是个奇葩，别人都要头发蓬，你要头发塌。</p>
<h1>总结</h1>
<p>这个事作为写报道的素材真的非常不错。流行元素兼备，社会心理诱导话术、普信男问题、骗钱流程展示得很齐全，是一场精心策划后的全店大型骗局体验店，就是楚门的世界一样，整个环境、公司、Tony的照片、微信列表、公司宣传册，全是精心策划过的，没有一个人是真的。手段很典型，流程固定。美女负责拉人，Tony（主演人）负责展示“专业”分析能力让人“上道”，然后洗头小哥负责一次抬预期价，Tony 负责展示自己贵又忙，二次抬预期价，再给优惠价。途中不停打探你的经济状况以看办卡最多能收你多少钱，询问烫染和妆造意向，顺带言语性骚扰和暗示。最后证明此店的连锁真实性和规模庞大，再让人办卡。</p>
<p>另外这个诈骗集团应该不只有一个地点，因为他们问过我住哪，和我讲最近的连锁店是哪，那个地方应该也很偏僻，没有我熟悉的地标，我也记不住。另外，他说烫发根全北京只有两家能做，还把另一家的名字说出来了，推测也应该是同伙（谁会主动推荐自己的竞争对手），但我也没记住。如果要深入调查，应该会是个人不少的组织，干的事也不只表面理发这么简单。整个流程策划也挺全面的，绝非一时半会儿兴起的骗子能办出来的。</p>
<p>但希望主演人可以改进一下，对一般女性能有点常识，用力过猛了。群演的年纪普遍偏小，就按规矩说话不怎么能自由发挥，需要再练下演技。</p>
<p>对于我这种容易被忽悠的人，解决方法也很简单，足够穷就不会被骗钱了。</p>
<p>PS：我觉得我写得好开心…………</p>]]></content>
        <category label="Diary"/>
        <published>2021-04-18T21:59:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[看看是谁在D我]]></title>
        <id>https://sansui233.com/posts/看看是谁在D我</id>
        <link href="https://sansui233.com/posts/看看是谁在D我"/>
        <updated>2020-12-12T02:45:46.000Z</updated>
        <content type="html"><![CDATA[<p>自从部署了服务器，一直都觉得访问量不太正常。但我也仅仅是对IP做了防护，CDN防火墙也没怎么设置。</p>
<p>直到最近觉得，天天访问上万，唯一IP数却一千不到，cache率更是一直都在1%以下。决定看看是哪些人（IP）干的事，服务器实在不值得。</p>
<h2>查看ip访问行为</h2>
<p>web服务器使用的nginx，由于CDN的关系，nginx需要有http-realip的模块才能查看CDN前的ip。找了不少资料就只觉得这个文章不错，废话少过程清晰，还很贴心给了生成脚本。</p>
<blockquote>
<p><a href="https://www.nenew.net/cloudflare-cdn-nginx-get-real-ip-tutorial.html">CloudFlare CDN下Nginx正确获取真实IP教程</a></p>
</blockquote>
<p>配置完成后运行了一段时间。先统计下当前的log文件前10名的访问量和相应ip：</p>
<pre><code class="language-bash">$ cat access.log | awk &#x27;{print $1}&#x27;| sort -n | uniq -c | sort -n -r | head -10

    979 103.242.119.217
    285 1.163.108.18
    204 18.166.211.38
    176 184.170.243.198
    154 66.98.113.44
    149 40.65.134.91
    116 2400:8902::f03c:92ff:fe7b:5f02
    113 113.71.61.213
     92 185.245.1.151
     80 107.148.250.111
</code></pre>
<p>第一名， <code>103.242.119.217</code> ，979次？这多得也太夸张了？！</p>
<p>好吧，来看看这个ip在干什么。</p>
<pre><code class="language-bash">$ cat access.log | grep 103.242.119.217 | tail -n 20
103.242.119.217 - - [10/Dec/2020:08:54:41 +0000] &quot;GET /WWW/phpMyAdmin/index.php HTTP/1.1&quot; 404 178 &quot;-&quot; &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;
103.242.119.217 - - [10/Dec/2020:08:54:41 +0000] &quot;GET /phpMyAdmln/index.php HTTP/1.1&quot; 404 178 &quot;-&quot; &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;
103.242.119.217 - - [10/Dec/2020:08:54:41 +0000] &quot;GET /phpMyAdmin_ai/index.php HTTP/1.1&quot; 404 178 &quot;-&quot; &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;
103.242.119.217 - - [10/Dec/2020:08:54:41 +0000] &quot;GET /__phpMyAdmin/index.php HTTP/1.1&quot; 404 178 &quot;-&quot; &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;
103.242.119.217 - - [10/Dec/2020:08:54:42 +0000] &quot;GET /program/index.php HTTP/1.1&quot; 404 178 &quot;-&quot; &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;
103.242.119.217 - - [10/Dec/2020:08:54:42 +0000] &quot;GET /shopdb/index.php HTTP/1.1&quot; 404 178 &quot;-&quot; &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;
103.242.119.217 - - [10/Dec/2020:08:54:42 +0000] &quot;GET /phppma/index.php HTTP/1.1&quot; 404 178 &quot;-&quot; &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;
103.242.119.217 - - [10/Dec/2020:08:54:42 +0000] &quot;GET /phpmy/index.php HTTP/1.1&quot; 404 178 &quot;-&quot; &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;
103.242.119.217 - - [10/Dec/2020:08:54:43 +0000] &quot;GET /mysql/admin/index.php HTTP/1.1&quot; 404 178 &quot;-&quot; &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;
103.242.119.217 - - [10/Dec/2020:08:54:43 +0000] &quot;GET /mysql/dbadmin/index.php HTTP/1.1&quot; 404 178 &quot;-&quot; &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;
103.242.119.217 - - [10/Dec/2020:08:54:43 +0000] &quot;GET /mysql/sqlmanager/index.php HTTP/1.1&quot; 404 178 &quot;-&quot; &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;
103.242.119.217 - - [10/Dec/2020:08:54:43 +0000] &quot;GET /mysql/mysqlmanager/index.php HTTP/1.1&quot; 404 178 &quot;-&quot; &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;
103.242.119.217 - - [10/Dec/2020:08:54:44 +0000] &quot;GET /wp-content/plugins/portable-phpmyadmin/wp-pma-mod/index.php HTTP/1.1&quot; 404 178 &quot;-&quot; &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;
103.242.119.217 - - [10/Dec/2020:08:54:44 +0000] &quot;GET /sqladmin/index.php HTTP/1.1&quot; 404 178 &quot;-&quot; &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;
103.242.119.217 - - [10/Dec/2020:08:54:44 +0000] &quot;GET /sql/index.php HTTP/1.1&quot; 404 178 &quot;-&quot; &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;
...
</code></pre>
<p>…………尼玛，恶意扫描啊！扫描常用路由啊碰运气啊！人干事？</p>
<p>但估计这种恶意扫描的也是日抛ip，ban也没什么意义。只能设置limit rate了。</p>
<p>看看第二名在干什么。</p>
<pre><code class="language-bash">$ cat access.log | grep 1.163.108.18 | tail -n 10
1.163.108.18 - - [10/Dec/2020:10:15:38 +0000] &quot;GET /clash/config HTTP/1.1&quot; 200 4978 &quot;-&quot; &quot;ClashforWindows/0.13.1&quot;
1.163.108.18 - - [10/Dec/2020:10:16:36 +0000] &quot;GET /clash/config HTTP/1.1&quot; 200 4978 &quot;-&quot; &quot;ClashforWindows/0.13.1&quot;
1.163.108.18 - - [10/Dec/2020:10:17:36 +0000] &quot;GET /clash/config HTTP/1.1&quot; 200 4978 &quot;-&quot; &quot;ClashforWindows/0.13.1&quot;
1.163.108.18 - - [10/Dec/2020:10:18:31 +0000] &quot;GET /clash/config HTTP/1.1&quot; 200 4978 &quot;-&quot; &quot;ClashforWindows/0.13.1&quot;
1.163.108.18 - - [10/Dec/2020:10:19:32 +0000] &quot;GET /clash/config HTTP/1.1&quot; 200 4978 &quot;-&quot; &quot;ClashforWindows/0.13.1&quot;
1.163.108.18 - - [10/Dec/2020:10:20:35 +0000] &quot;GET /clash/config HTTP/1.1&quot; 200 4978 &quot;-&quot; &quot;ClashforWindows/0.13.1&quot;
1.163.108.18 - - [10/Dec/2020:10:21:30 +0000] &quot;GET /clash/config HTTP/1.1&quot; 200 4978 &quot;-&quot; &quot;ClashforWindows/0.13.1&quot;
1.163.108.18 - - [10/Dec/2020:10:22:34 +0000] &quot;GET /clash/config HTTP/1.1&quot; 200 4978 &quot;-&quot; &quot;ClashforWindows/0.13.1&quot;
1.163.108.18 - - [10/Dec/2020:10:23:36 +0000] &quot;GET /clash/config HTTP/1.1&quot; 200 4978 &quot;-&quot; &quot;ClashforWindows/0.13.1&quot;
1.163.108.18 - - [10/Dec/2020:10:24:32 +0000] &quot;GET /clash/config HTTP/1.1&quot; 200 4978 &quot;-&quot; &quot;ClashforWindows/0.13.1&quot;
</code></pre>
<p>这应该是个用户吧，但你这更新就更新吧，每分钟更新一次？能不能积点德？（哽塞.jpg）</p>
<p>消耗流量都是其次，也并没有多出很多。但我不喜欢泡沫和虚高的数值，也讨厌因为不用付出成本所以极其浪费资源的做法，于我而言就像房间堆满了垃圾。看起来好像有很多东西，实际上什么也没有。</p>
<p>要是我这种心态，创业肯定找不到风投，很快就倒闭。</p>
<p>这些IP ban了也不太好……开个Challenge吧。</p>
<p>顺带一提，默认配置文件的更新间隔早就给取消了。取消的原因倒不是怕被D，当时还完全没想过会租服务器，只是单纯的因为程序会有各种意想不到的BUG，时不时出现全NULL，连之前能用的都没有了……自动更新太容易挂掉，于是取消了自动更新。</p>
<p>然后继续看，从第2名到第8名都是这种行为。我说呢，今天从浏览器进入的配置文件的页面一直无法加载，但服务端不管怎么请求都没有问题，最后不得已换成了一个静态文件。敢情就是你们搞没的？</p>
<p>再加上gin的静态cache本身就不太稳。之前使用css的时候基本运行3天就外链请求不出来了，最后也是用nginx挂的静态文件。</p>
<p>第7名到第10名，很明显，同类程序的爬虫。Duang地一下请求几个一般人不用的链接。对于这些爬虫我觉得倒还行，请求频率并不会太高。但非常不喜欢直接伸手全爬别人爬好的，这是极其恶劣的生态与shame的想法。爬虫的理想的状态是网状分布式的部署，而不是树。</p>
<h2>防护措施</h2>
<p>由于挂了 CloudFlare，iptables 自然没什么用，还容易不小心把 CF 的 IP ban 掉（虽然在发现这一点之前我折腾了快一下午的 iptables ）。直接去配置CF的防火墙。</p>
<p>我需要应对的情况主要就这一个：</p>
<ul>
<li>一分钟更新一次配置文件的ip，给他们一个小小的JS Chanllenge</li>
</ul>
<p>（突然有点后悔写了JS Chanllenge的破解是什么回事……）</p>
<p>但是啊，这些ip还是不少活人的，长期都Chanllenge没有必要。而且我也不能天天都像今天这么看log，实在是消耗时间，消耗时间就是生命。</p>
<p>而 Nginx 和 CloudFlare 的rate limit 都是防止CC，限制的每秒或者每分钟的请求数。但这恰恰是我不能做的，默认的配置文件的写法1s内会请求十几次，多请求几次就一分钟就几十次了（配置文件该改改了）。我需要处理的是过于规律且相对频繁的请求，而非CC。</p>
<p>于是连夜写了个分析log的程序，主要是以下功能：</p>
<ul>
<li>根据请求间隔的规律判断是否为需要处理的ip
特征：
<ul>
<li>请求间隔过于规律，比如每分钟一次、每分钟两次等等。有容错率。</li>
<li>不计算大于 <code>threshold</code> 分钟的间隔与等于0分钟的间隔。</li>
</ul>
</li>
<li>排除 CloudFlare 子网下的IP。CloudFlare 的 ip 网段在线获取。</li>
<li>使用 CloudFlare Api 更新 JS Chanllenge 的 filter，给需要过滤的 ip 加上 Challenge</li>
</ul>
<p>然后用 cron 定时执行。常驻后台没必要，也没想做实时监控。</p>
<p>把恶意 IP 和常见的 IP 过滤掉后，最新的就只剩下 CloudFlare 的请求了，终于干净了……但好寂寞啊…………看来是真的没什么活人用呢。</p>
<h2>一天后</h2>
<p>今天的Requests数是17435。</p>
<p>Unique Request是1188。</p>
<p>Challenge挑战的Request数是，8200（微笑脸）。</p>
<p>你妹啊，Bot一样的自动更新占了快一半啊！摔！</p>
<p>而且每次防火墙每次更新过滤的ip都是那么40个左右，Challenge通过率是0.5%。</p>
<p>40ip个会不会有点多？是不是程序有问题？我开始也这么想过，但我自己也设置有定时更新，还设置了三份，都没见把我自己ban掉。</p>
<p>累了，感觉不再爱了。</p>]]></content>
        <category label="摸鱼"/>
        <published>2020-12-12T02:45:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于指针与Golang的结构体]]></title>
        <id>https://sansui233.com/posts/关于指针与Golang的结构体</id>
        <link href="https://sansui233.com/posts/关于指针与Golang的结构体"/>
        <updated>2020-11-26T23:14:47.000Z</updated>
        <content type="html"><![CDATA[<p>之前在学C++的时候，指针的用法就困惑了很久。后来有了计算机体系结构基础后，再加上Golang的一些说明，就突然明白了，之前为什么不理解指针。纠结的点在哪里。</p>
<h2>指针的概念</h2>
<p>(学的语言太多语法有些混了，看个意思就好，代码是四不像并不可以运行)</p>
<ul>
<li><strong>地址</strong>：一个变量在内存中的存储形式是 <strong>地址 + value</strong>，地址是在指内存中的地址。</li>
</ul>
<p>比如 <code>int a = 3</code>，意思是变量 a 在内存中有一个地址，<strong>这个地址储存的 value 为 3</strong>。</p>
<ul>
<li><strong>指针 (pointer)</strong> ：是一种变量，<strong>它的 value 仍然是一个地址</strong>。常用<code>*</code>定义指针变量。</li>
</ul>
<p>比如 <code>int *b = &amp;a</code>，意思是 <strong>指针变量</strong> b 在内存中有一个地址，<strong>这个地址储存的 value 为 a 的地址</strong>。</p>
<p>在使用变量（而不是声明或定义变量）时，<code>&amp;</code> 为取地址符。对应的还有一个<code>*</code>为取内容符。比如</p>
<pre><code class="language-c++">int a = 3
int *b = &amp;a // 将 a 的地址作为 b 的 value
print(b) // 输出 b 的 value，结果为一个地址，等于 a 的地址(&amp;a)
print(*b) //将 b 的 value 作为地址，输出地址中存的值，结果为 3
</code></pre>
<p>上面仅是个人的概念解释，尽量少地引入新概念。以上概念有更通俗的叫法。</p>
<p>比如<code>int *b = &amp;a</code>，通常会叫做“变量 b 持有 a 的引用”。个人觉得虽然直观，但对于初学者并不友好。首先，“变量 b”就没有说清楚指针变量的特殊性。然后“a 的引用”，倒是说清楚什么叫做 a 的引用啊……尤其是一些语言没有指针的概念，但引用是随处可见的（比如 Javascript 的 Object 类型）</p>
<h2>Golang Struct 与 指针的访问</h2>
<p>其实让我明白的只是因为<a href="https://tour.golang.org/moretypes/4">Go tour</a>中的两句话：</p>
<blockquote>
<p>Struct fields can be accessed through a struct pointer.<br/>
结构体字段可以使用结构体指针获取。</p>
</blockquote>
<blockquote>
<p>To access the field X of a struct when we have the struct pointer p we could write <code>(*p).X</code>. However, that notation is cumbersome, so the language permits us instead to write just <code>p.X</code>, without the explicit dereference.<br/>
结构体指针访问字段本来应该写成<code>(*p).x</code>，但是由于这么写太蠢了，所以允许直接写成<code>p.x</code>。</p>
</blockquote>
<p>也就是说，如果见到类似<code>T.x</code>的结构体访问，T有可能是结构体本身，也可能是指针……需要自行区分。仅此而已。</p>
<p>而我之前一直以为 T 只能是结构体本身= =，所以对于指针一直头大……</p>
<p>但由于存在指针这种特殊的访问方式，在结构体的组合与接口实现中会有一些想不到的情况：</p>
<ul>
<li>
<p>定义了一个接口Interface，方法有Intera()，Interb()</p>
<pre><code class="language-go">type Interface interface{
	Intera()
	Interb()
}
</code></pre>
</li>
<li>
<p>定义了一个结构体Base，用结构体指针的方式实现了Intera()</p>
<pre><code class="language-go">type Base struct {}
func (b *Base) Intera() {}
</code></pre>
</li>
<li>
<p>定义了一个结构体Extend，匿名组合了Base，用正常结构体的方式实现了Interb()</p>
<pre><code class="language-go">type Extend struct {
  	Base
}
func (e Extend) Interb() {}
</code></pre>
</li>
</ul>
<p>这个时候，请问有谁实现了Interface？</p>
<p>答案是：<strong>Base和Extend本身都没有实现Interface</strong>。但是上述代码中完全没有出现的*<strong>Extend（Extend的指针）实现了Interface</strong>。</p>
<p>为什么呢？虽然*<strong>Extend</strong>并没有实现第二个方法，但<strong>Extend</strong>实现了，所以*<strong>Extend</strong>是也是可以直接访问第二个方法的（参考上面的(*p).x的解释）。</p>
<p>而*<strong>Base</strong>实现了第一个方法（Base没有实现），而<strong>Extend</strong>组合了<strong>Base</strong>。因此第一个方法可以也通过*<strong>Extend</strong>访问（Extend无法访问）。</p>
<p>所以*<strong>Extend</strong>两个方法都能访问，因此实现了Interface。而<strong>Extend</strong>只能访问第二个方法，因此没有实现Interface。</p>
<p>然后日常使用<strong>Extend</strong>的时候，为了能使用Interface的方法，需要使用*<strong>Extend</strong>：</p>
<pre><code class="language-go">interfacelist := make([]Interface, 0)
interfacelist = append(interfacelist, &amp;Extend{}) // 因为是指针实现Interface，需要传入地址
e = interfacelist[0]
</code></pre>
<p>在goland对e按下F1时，只会显示，这是个Interface，不会告诉你这是*<strong>Extend</strong>。如果不是自己从头写的代码，你可能很久都无法发现，是个指针类型实现了Interface。你必须在层层组合中，找到是哪一层（这里是Base）让Extend变成了Interface的指针实现。</p>
<p>对e的type assertion也应该这么写：</p>
<pre><code class="language-go">e_ptr = e.(*Extend) // 从Interface类型返回一个Extend类型的指针
e_ptr.Base // 等于(*e_ptr).Base
</code></pre>]]></content>
        <category label="学习"/>
        <published>2020-11-26T23:14:47.000Z</published>
    </entry>
</feed>