{"pageProps":{"client":"static","source":[{"id":"2024-01-01 00:00:00","content":"\n那就祝大家都能便建康吧。可能不能便匆名，但可以便建康。\n\n","tags":[],"imgsmd":[],"sourceFile":"002.md","csrIndex":[0,0],"code":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"那就祝大家都能便建康吧。可能不能便匆名，但可以便建康。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","length":30},{"id":"2023-12-30 14:37:45","content":"\n加了个 logseq 群，感想是不要加群。要么你就发布一个对于阅读者极其友好的结构化页面，引导读者视线看哪里哪里。要么就自由记录。不要想着又要记录又要好看地发布，很累的。说实话我写点 CSS 只是消遣，做导航页也是消遣，还有符合我在别的软件的使用习惯，并不代表着用这一套效率就会变高。notion 的导航页做了后我是一次没用过……侧边栏导航到数据库还不够用吗。\n\n可以方法论，但不要在没有需求的情况下方法论。\n\n","tags":[],"imgsmd":[],"sourceFile":"002.md","csrIndex":[0,1],"code":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"加了个 logseq 群，感想是不要加群。要么你就发布一个对于阅读者极其友好的结构化页面，引导读者视线看哪里哪里。要么就自由记录。不要想着又要记录又要好看地发布，很累的。说实话我写点 CSS 只是消遣，做导航页也是消遣，还有符合我在别的软件的使用习惯，并不代表着用这一套效率就会变高。notion 的导航页做了后我是一次没用过……侧边栏导航到数据库还不够用吗。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"可以方法论，但不要在没有需求的情况下方法论。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","length":207},{"id":"2023-12-30 01:38:49","content":"\n可以用 obsidian 搞出图里的这种统计页面…… 那个 button 插件很有用啊，非常十分有用啊……没有根据 template 新建文档的数据展示是没有灵魂的。\n\n这样我就可以躺着写日记了，为了各种能躺着干电脑才能干的活真是煞费苦心。虽然会延迟发布233。但是不重要，能方便写比较重要，之前就为了可以在手机上写日记，还在苦恼要不要用云cms，但我又实在不想把个人数据托管到服务器上。现在好了，obsidian 就是 cms。而且支持标签语法，这样和我博客里的解析就是一样的了。也还持 tag 查询。越想越觉得这就是为静态博客 cms 而生的……\n\n而且 git 的话，目录是可以软链接的。这使得 ob 的一个 vault 可以同时兼顾博客数据与其他数据，博客数据软链接到博客的代码仓库下就 ok 了。\n\n","tags":[],"imgsmd":["![Obsidian dashboard](https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202312300138986.webp)"],"sourceFile":"002.md","csrIndex":[0,2],"code":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"可以用 obsidian 搞出图里的这种统计页面…… 那个 button 插件很有用啊，非常十分有用啊……没有根据 template 新建文档的数据展示是没有灵魂的。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"这样我就可以躺着写日记了，为了各种能躺着干电脑才能干的活真是煞费苦心。虽然会延迟发布233。但是不重要，能方便写比较重要，之前就为了可以在手机上写日记，还在苦恼要不要用云cms，但我又实在不想把个人数据托管到服务器上。现在好了，obsidian 就是 cms。而且支持标签语法，这样和我博客里的解析就是一样的了。也还持 tag 查询。越想越觉得这就是为静态博客 cms 而生的……\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"而且 git 的话，目录是可以软链接的。这使得 ob 的一个 vault 可以同时兼顾博客数据与其他数据，博客数据软链接到博客的代码仓库下就 ok 了。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","length":356},{"id":"2023-12-29 15:13:31","content":"\n一键查询热门无头 CMS： https://jamstack.org/headless-cms/\n\n我还是在想要不要用数据库，对我来说博客内容确实是Typora 就够用了，管理也方便。但人，就是如此的，三心二意。昨天改改改，算了，还是用回第一版吧。大概需要写总结一下当下数据库托管方案，脑子乱糟糟的。\n\n","tags":[],"imgsmd":[],"sourceFile":"002.md","csrIndex":[0,3],"code":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    p: \"p\",\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"一键查询热门无头 CMS： \", _jsx(_components.a, {\n        href: \"https://jamstack.org/headless-cms/\",\n        children: \"https://jamstack.org/headless-cms/\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"我还是在想要不要用数据库，对我来说博客内容确实是Typora 就够用了，管理也方便。但人，就是如此的，三心二意。昨天改改改，算了，还是用回第一版吧。大概需要写总结一下当下数据库托管方案，脑子乱糟糟的。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","length":153},{"id":"2023-12-27 18:09:43","content":"\n关于笔记 #工具\n\n有一种印象是国人很爱折腾效率工具。我也是只要是出的笔记工具全都有用过，但是说来真正有长期用的，也一共只有三个。非常好奇经常换笔记软件的人是怎么管理的……\n\n最开始用的是印象笔记，用了3年多吧。当时 markdown 还没有卷起来。印象笔记剪藏确实是挺好用的。缺点也很明显……富文本格式，当时对代码块十分不友好，markdown 支持得太晚了，要是支持得早点的话我也会继续用的。如果是有大量媒体附件的行业，印象笔记到现在也还是不错的选择。\n\n印象笔记总在宣传 All in one，我也信了一段时间的邪，拿它来存微博的图。现在觉得不如系统的文件管理器。\n\n用了一段时间的 mweb，没有记太多，好像一共就 80个 md 文件。这个不是所见即所得的，始终感觉不是很好。后来换软件时，这些笔记基本都因为难以一键迁移原因，大多留在了原本的平台上。现在对待新工具的态度非常谨慎，能不换就不换吧，简简单单才是真。当时 markdown + 文件管理的软件当时也不是很多，IA writer、 Ulysses 又太贵了。\n\n后面 notion 公测了，不得不说 notion 确实很强。但我是拿它当数据库用，而不是记笔记。notion 更方便管理，而不是记录……虽然也可以记录，但是如果作为一个笔记软件，它还是过于复杂了，页面切换速度也太慢了。\n\n被 Antarx 荼毒了双链后，开始用 logseq……为什么不是 roam research，因为穷啊（划掉）因为数据又是存在平台上的，rr 的结构又做不到notion的扩展程度和量级，但价格太贵了…… notion 一月 5 刀是可以接受的，但是 rr 记得算下来是每年要 1000 多 CNY 吧……哒咩，红豆泥\n\nlogseq 的笔记又是船新的了，没法把 notion 里一些零散的笔记迁移过来，而且就算 mweb 是本地markdown，格式转换也很麻烦。logseq 虽然用了本地文件系统，但完全抛弃了树形结构化的管理（讲真我不明白为什么 namespace 不直接目录结构，还不一样）。反正早就是污染了800遍的 markdown，和 obsidian 共用起来十分糟糕，倒是觉得 logseq 也大可再做得狠一点。\n\n在 logseq 中，分类是由页面元数据和 `pages tagged with xx` 完成的。还有大量的空白页，专门拿来看 backlink 的。这两块基本就代替了传统笔记中分类整理功能。\n\n我也不会拿 logseq 写长文，大纲模式的层级关系和长文很冲突，长文一般意味着要发布，基本还是用 notion 写的，写完不会再看一眼……大纲模式写的内容太随意了，几个月后我可能不知道我当时在想什么，笔记就是这么随意的一个东西。 logseq 复习的时候体验非常棒，想不起来的点进去就可以了，相关的所有东西都能用得到有效的复习。\n\nlogseq 的界面设计是非常的草台班子感……我觉得这不是去套一个设计系统可以解决的事情。设计系统只负责统一，用上设计系统还在写灰色 modal 套灰色 modal 这种层级，真的救不了……\n\n哦对了，剧本也是长文，但不发布，还是大纲写的。剧本真的非常非常适合大纲和块级白板，没有之一。obsidian 和 logseq 的大纲模式写剧本都很好用。对我来说，obsidian大纲的唯一问题是代码块编辑太拉了，用 obsidian 的意义只有一个…… Excalidraw 最好的客户端。\n\n总体而言，现在的 markdown 笔记多了三个常见的语法，其中后面两个是无法与 published markdown 兼容的关键。\n\n- yaml 数据头\n- `[[App内文章链接]]`\n- `#标签链接`\n\n","tags":["工具"],"imgsmd":[],"sourceFile":"002.md","csrIndex":[0,4],"code":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    li: \"li\",\n    p: \"p\",\n    ul: \"ul\",\n    ...props.components\n  }, {Tag} = _components;\n  if (!Tag) _missingMdxReference(\"Tag\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"关于笔记 \", _jsx(Tag, {\n        text: \"工具\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"有一种印象是国人很爱折腾效率工具。我也是只要是出的笔记工具全都有用过，但是说来真正有长期用的，也一共只有三个。非常好奇经常换笔记软件的人是怎么管理的……\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"最开始用的是印象笔记，用了3年多吧。当时 markdown 还没有卷起来。印象笔记剪藏确实是挺好用的。缺点也很明显……富文本格式，当时对代码块十分不友好，markdown 支持得太晚了，要是支持得早点的话我也会继续用的。如果是有大量媒体附件的行业，印象笔记到现在也还是不错的选择。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"印象笔记总在宣传 All in one，我也信了一段时间的邪，拿它来存微博的图。现在觉得不如系统的文件管理器。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"用了一段时间的 mweb，没有记太多，好像一共就 80个 md 文件。这个不是所见即所得的，始终感觉不是很好。后来换软件时，这些笔记基本都因为难以一键迁移原因，大多留在了原本的平台上。现在对待新工具的态度非常谨慎，能不换就不换吧，简简单单才是真。当时 markdown + 文件管理的软件当时也不是很多，IA writer、 Ulysses 又太贵了。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"后面 notion 公测了，不得不说 notion 确实很强。但我是拿它当数据库用，而不是记笔记。notion 更方便管理，而不是记录……虽然也可以记录，但是如果作为一个笔记软件，它还是过于复杂了，页面切换速度也太慢了。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"被 Antarx 荼毒了双链后，开始用 logseq……为什么不是 roam research，因为穷啊（划掉）因为数据又是存在平台上的，rr 的结构又做不到notion的扩展程度和量级，但价格太贵了…… notion 一月 5 刀是可以接受的，但是 rr 记得算下来是每年要 1000 多 CNY 吧……哒咩，红豆泥\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"logseq 的笔记又是船新的了，没法把 notion 里一些零散的笔记迁移过来，而且就算 mweb 是本地markdown，格式转换也很麻烦。logseq 虽然用了本地文件系统，但完全抛弃了树形结构化的管理（讲真我不明白为什么 namespace 不直接目录结构，还不一样）。反正早就是污染了800遍的 markdown，和 obsidian 共用起来十分糟糕，倒是觉得 logseq 也大可再做得狠一点。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在 logseq 中，分类是由页面元数据和 \", _jsx(_components.code, {\n        children: \"pages tagged with xx\"\n      }), \" 完成的。还有大量的空白页，专门拿来看 backlink 的。这两块基本就代替了传统笔记中分类整理功能。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"我也不会拿 logseq 写长文，大纲模式的层级关系和长文很冲突，长文一般意味着要发布，基本还是用 notion 写的，写完不会再看一眼……大纲模式写的内容太随意了，几个月后我可能不知道我当时在想什么，笔记就是这么随意的一个东西。 logseq 复习的时候体验非常棒，想不起来的点进去就可以了，相关的所有东西都能用得到有效的复习。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"logseq 的界面设计是非常的草台班子感……我觉得这不是去套一个设计系统可以解决的事情。设计系统只负责统一，用上设计系统还在写灰色 modal 套灰色 modal 这种层级，真的救不了……\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"哦对了，剧本也是长文，但不发布，还是大纲写的。剧本真的非常非常适合大纲和块级白板，没有之一。obsidian 和 logseq 的大纲模式写剧本都很好用。对我来说，obsidian大纲的唯一问题是代码块编辑太拉了，用 obsidian 的意义只有一个…… Excalidraw 最好的客户端。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"总体而言，现在的 markdown 笔记多了三个常见的语法，其中后面两个是无法与 published markdown 兼容的关键。\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"yaml 数据头\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"[[App内文章链接]]\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"#标签链接\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","length":1562},{"id":"2023-12-26 19:13:52","content":"\nwindows 上 fallback 到 monospace 的中文怎么是宋体啊我服了爸爸。  \n\n","tags":[],"imgsmd":[],"sourceFile":"002.md","csrIndex":[0,5],"code":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"windows 上 fallback 到 monospace 的中文怎么是宋体啊我服了爸爸。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","length":51},{"id":"2023-12-22 18:47:22","content":"\n易用的 Vlan 工具 [EasyN2N](https://bugxia.com/357.html)。用来 steam 共享库局域网联机。但朋友才是最高配置。\n\n","tags":[],"imgsmd":[],"sourceFile":"002.md","csrIndex":[0,6],"code":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    p: \"p\",\n    ...props.components\n  };\n  return _jsxs(_components.p, {\n    children: [\"易用的 Vlan 工具 \", _jsx(_components.a, {\n      href: \"https://bugxia.com/357.html\",\n      children: \"EasyN2N\"\n    }), \"。用来 steam 共享库局域网联机。但朋友才是最高配置。\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","length":82},{"id":"2023-12-17 15:50:20","content":"\n好想画画！但哒咩……长久以来都觉得一画画就有罪恶感。真的不要老给人传输什么分清主次一类的思想，因为是个人都分得清，什么事情对人生有利什么没利难道会不知道吗？但如果不停地强调这一点，只会让人觉得自己不配做除了工作外的任何事情，如果想做，第一个念头是转行去做。但能转行吗？不行，根本没有进行足够的专业训练，并且也因为会有摸鱼的罪恶感也没法进行长久的训练，一天画4个小时就觉得已经很花时间和精力了，但写代码一天12小时就觉得正常。这就是两难。要问我水平真的一点工作内容也画不了吗？也不是，什么工作都有门槛低的部分，但这样的水平又达不到我的期望，我又不是那种对于自己的事情可以随便糊弄过的人……虽然不是很高的期望，因为每个领域都有我不能看懂的部分，但我能看到的，也是达不到的。\n\n","tags":[],"imgsmd":[],"sourceFile":"002.md","csrIndex":[0,7],"code":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"好想画画！但哒咩……长久以来都觉得一画画就有罪恶感。真的不要老给人传输什么分清主次一类的思想，因为是个人都分得清，什么事情对人生有利什么没利难道会不知道吗？但如果不停地强调这一点，只会让人觉得自己不配做除了工作外的任何事情，如果想做，第一个念头是转行去做。但能转行吗？不行，根本没有进行足够的专业训练，并且也因为会有摸鱼的罪恶感也没法进行长久的训练，一天画4个小时就觉得已经很花时间和精力了，但写代码一天12小时就觉得正常。这就是两难。要问我水平真的一点工作内容也画不了吗？也不是，什么工作都有门槛低的部分，但这样的水平又达不到我的期望，我又不是那种对于自己的事情可以随便糊弄过的人……虽然不是很高的期望，因为每个领域都有我不能看懂的部分，但我能看到的，也是达不到的。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","length":337},{"id":"2023-12-17 15:42:18","content":"\n用 sunshine(windows) 和 moonlgiht(ios) 搞上了steam的串流以躺着打游戏。躺着不论干什么都比较容易睡着。\n\n","tags":[],"imgsmd":[],"sourceFile":"002.md","csrIndex":[0,8],"code":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"用 sunshine(windows) 和 moonlgiht(ios) 搞上了steam的串流以躺着打游戏。躺着不论干什么都比较容易睡着。\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","length":73},{"id":"2023-12-10 08:20:20","content":"\n互联网平台没有记忆，再也找不到从前的消息，域名更新，API更迭，连日记和笔记软件都换了一个又一个，点开就是404，但我有想记住的东西，所以会建立博客和仓库，让他们不要轻易消失。个站和常驻平台是不一样的，像是手账本一样，从零开始一点点构建出一切，不受任何的限制，做成什么样取决于自己。这也是为什么我坚持渲染成静态博客，因为动态的服务持早会关闭，随时面临着service down。但静态的已经是最终的成品，就算有一天我死了，它也将永远在那里，直到大公司们全都消失的那一天。\n\n说来这个博客已经有7年了，当然我没怎么用，因为也没什么好写的。我灌水写得很多倒是。但是 dayone 怎么说，这些别人维护的软件，感觉总不是自己的。而且一换电脑，东西也都会没有。网易博客和新浪博客有小时候写的文章，太黑历史了算了吧，不整合了，反正也是快倒闭了嗯……\n\n我也一直对markdown的图片和文字不能一起放不开心，但是没啥办法的事，不是一个模态的编码不能统一就不好做，除了硬编码也没有什么比较好的解决方法。除非哪天有什么新的格式，不再是.html，而是.canvas，可以一个文件存不同模态的资源不用到外部获取，就有可能吧…… `.textbundle`也主要还是本地的\n\n","tags":[],"imgsmd":[],"sourceFile":"002.md","csrIndex":[0,9],"code":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"互联网平台没有记忆，再也找不到从前的消息，域名更新，API更迭，连日记和笔记软件都换了一个又一个，点开就是404，但我有想记住的东西，所以会建立博客和仓库，让他们不要轻易消失。个站和常驻平台是不一样的，像是手账本一样，从零开始一点点构建出一切，不受任何的限制，做成什么样取决于自己。这也是为什么我坚持渲染成静态博客，因为动态的服务持早会关闭，随时面临着service down。但静态的已经是最终的成品，就算有一天我死了，它也将永远在那里，直到大公司们全都消失的那一天。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"说来这个博客已经有7年了，当然我没怎么用，因为也没什么好写的。我灌水写得很多倒是。但是 dayone 怎么说，这些别人维护的软件，感觉总不是自己的。而且一换电脑，东西也都会没有。网易博客和新浪博客有小时候写的文章，太黑历史了算了吧，不整合了，反正也是快倒闭了嗯……\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"我也一直对markdown的图片和文字不能一起放不开心，但是没啥办法的事，不是一个模态的编码不能统一就不好做，除了硬编码也没有什么比较好的解决方法。除非哪天有什么新的格式，不再是.html，而是.canvas，可以一个文件存不同模态的资源不用到外部获取，就有可能吧…… \", _jsx(_components.code, {\n        children: \".textbundle\"\n      }), \"也主要还是本地的\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","length":530}],"info":{"pages":16,"memos":163,"tags":6,"imgs":12,"fileMap":[{"srcName":"002.md","lastModified":1704112676364,"dateRange":{"start":"2024-01-01 00:00","end":"2023-08-21 08:00"},"startAt":{"page":0,"index":0},"endAt":{"page":6,"index":8}},{"srcName":"001.md","lastModified":1699708351643,"dateRange":{"start":"2023-03-17 08:00","end":"2019-07-16 08:00"},"startAt":{"page":6,"index":9},"endAt":{"page":16,"index":1}},{"srcName":"000.md","lastModified":1704112748054,"dateRange":{"start":"1980-01-01 00:48","end":"1980-01-01 00:48"},"startAt":{"page":16,"index":2},"endAt":{"page":16,"index":2}}],"pageMap":[{"page":0,"startDate":1704038400000,"endDate":1702167620000},{"page":1,"startDate":1702161776000,"endDate":1701132910000},{"page":2,"startDate":1700931080000,"endDate":1700339352000},{"page":3,"startDate":1700312752000,"endDate":1699520072000},{"page":4,"startDate":1699488259000,"endDate":1698934854000},{"page":5,"startDate":1698867557000,"endDate":1695254400000},{"page":6,"startDate":1695168000000,"endDate":1679011200000},{"page":7,"startDate":1677974400000,"endDate":1676332800000},{"page":8,"startDate":1676073600000,"endDate":1670716800000},{"page":9,"startDate":1670025600000,"endDate":1663113600000},{"page":10,"startDate":1662681600000,"endDate":1654819200000},{"page":11,"startDate":1654732800000,"endDate":1652832000000},{"page":12,"startDate":1652745600000,"endDate":1638403200000},{"page":13,"startDate":1638230400000,"endDate":1635379200000},{"page":14,"startDate":1633996800000,"endDate":1616428799000},{"page":15,"startDate":1616083199000,"endDate":1606406399000},{"page":16,"startDate":1606319999000,"endDate":-1}]},"memotags":[{"name":"工具","memoIds":["2023-12-27 18:09:43","2023-11-29 03:12:05","2023-11-21 00:57:14","2023-11-02 22:20:54","2023-08-30"]},{"name":"故事","memoIds":["2023-12-10 06:42:56"]},{"name":"react","memoIds":["2023-11-08 01:30:55"]},{"name":"博客","memoIds":["2023-11-06 21:20:06","2023-10-29 01:13:43","1980-01-01 00:48:28"]},{"name":"漫画","memoIds":["2023-11-06 21:20:06"]},{"name":"mdx","memoIds":["2023-11-05 21:04:56"]}]},"__N_SSG":true}