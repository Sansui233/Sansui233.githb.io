{"pageProps":{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    hr: \"hr\",\n    code: \"code\",\n    pre: \"pre\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"此工具已更新至 \", _jsx(_components.a, {\n        href: \"https://github.com/Sansui233/mac-githubhosts-autoupdate\",\n        children: \"Github\"\n      }), \"。\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"安装卸载脚本\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"自动定时运行\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"平时不占内存，运行时几乎不占内存\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"原文如下：\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: \"最近 Github 墙得越来越厉害了。写了个 Shell 工具，连不上的时候就更新一下。可以配合 Alfred 使用。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"使用的 host 源来自\", _jsx(_components.a, {\n        href: \"https://github.com/JohyC/Hosts\",\n        children: \"这里\"\n      }), \"。其实用 SwitchHosts 更新也行，但我真的讨厌 Electron App……麻了，现在听个歌写个笔记 1个多 G 的内存就没了。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"也可以用写成定时程序后台运行，加个 LaunchDaemon 文件就行，但，我不会打包 Mac App……文件这么散着分发也太 emmm，而且别人装起来也麻烦……\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"麻烦归麻烦还是要写的……\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"文件和说明已经上传到 \", _jsx(_components.a, {\n        href: \"https://github.com/Sansui233/mac-githubhosts-autoupdate\",\n        children: \"Github\"\n      }), \"。\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"下面这个文件保存取名为 \", _jsx(_components.code, {\n          children: \"hoststool\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"赋予执行权限 \", _jsx(_components.code, {\n          children: \"chmod +x hoststool\"\n        }), \"。如果为了执行起来方便，可以放进环境变量的目录（比如/usr/local/bin）\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"然后就可以使用 \", _jsx(_components.code, {\n          children: \"hoststool -u\"\n        }), \" 更新 host 了，运行结果会发系统通知。之前可以自己看看 hosts 内容有没有问题。这是有几率失败的，因为用的 gittee 的 host 源，经常会提示文件疑似违规……这种时候再请求一次就好了，第二次就不违规了。我也不知道为什么。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"（定时任务的部分在后面）\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-shell\",\n        children: \"#!/bin/bash\\nshowHelp() {\\n\\techo \\\"-u [source_url]\\tupdate github hosts. You can specify a custom host source\\\"\\n\\techo \\\"-b\\tbackup /etc/hosts to /etc/hosts.backup\\\"\\n\\techo \\\"-r\\trecover hosts.backup to hosts\\\"\\n\\techo \\\"-f\\tlist files in /etc which contains \\\\\\\"hosts\\\\\\\"\\\"\\n}\\n\\n\\n# ====== Main =====\\nif [ $# -eq 0 ]; then showHelp;exit 0;fi\\n\\n# CONF\\ndownload_dir=\\\"$HOME/etc/hoststool\\\"\\ngithub_hosts=\\\"https://gitee.com/yuchi-shentang/GithubHosts/raw/main/hosts.txt\\\"\\nif [ ! -d \\\"$download_dir\\\" ]; then\\n  mkdir -p $download_dir\\nfi\\n\\ncase \\\"$1\\\" in\\n\\t-f)\\n\\t\\tls /etc | grep hosts;\\n\\t\\texit 0;;\\n\\t-b) \\n\\t\\tsudo cp /etc/hosts /etc/hosts.backup;\\n\\t\\texit 0;;\\n\\t-r) \\n\\t\\tsudo cp /etc/hosts.backup /etc/hosts;\\n\\t\\texit 0;;\\n\\t-u) \\n\\t\\tif [ $2 ]; then github_hosts=$2;fi\\n\\t\\tcurl -o ${download_dir}/hosts ${github_hosts};\\n\\t\\tif [ $? -ne 0 ]; then\\n\\t\\t\\techo \\\"[ERROR] 获取远程 host 出错，请尝试更换 source 或检查 download_dir 读写权限\\\"\\n\\t\\t\\tosascript -e 'display notification \\\"获取远程 host 出错，请尝试更换 source\\\" with title \\\"hoststool\\\"'\\n\\t\\t\\texit 1\\n\\t\\tfi\\n\\t\\t\\n\\t\\t# Validate host content length\\n\\t\\tlines=$(awk '{print NR}' ${download_dir}/hosts | tail -n1)\\n\\t\\tif [ $lines -lt 10 ]\\n\\t\\tthen\\n\\t\\t\\techo '[ERRO] 远程 Github Hosts 无效（Gitee源不稳定），通常重试即可'\\n\\t\\t\\tosascript -e 'display notification \\\"远程 Github Hosts 无效（Gitee源不稳定），通常重试即可\\\" with title \\\"hoststool\\\"'\\n\\t\\t\\trm ${download_dir}/hosts\\n\\t\\t\\texit 1\\n\\t\\tfi\\n\\n\\t\\t# Remove old content\\n\\t\\tbegin=$(sed -n  '/# ==== Github Start ====/=' /etc/hosts | awk 'NR==1{print}')\\n\\t\\tend=$(sed -n  '/# ==== Github End ====/=' /etc/hosts | awk 'END{print}')\\n\\t\\techo \\\"Removing old hosts. Start at line \\\\\\\"${begin}\\\\\\\", End at line \\\\\\\"${end}\\\\\\\"\\\"\\n\\t\\tcat /etc/hosts | sed \\\"${begin},${end}d\\\" > ${download_dir}/hosts.tmp\\n\\t\\tif [ $? -ne 0 ]; then\\n\\t\\t\\t## Trip Failed\\n\\t\\t\\techo \\\"[INFO] 当前 Host中 无旧的 Github Host 标记可清除\\\"\\n\\t\\telse\\n\\t\\t\\t## Trip Succeed, move result\\n\\t\\t\\techo \\\"[INFO] 清除旧的 Github Host 标记\\\"\\n\\t\\t\\tsudo cp /etc/hosts /etc/hosts.backup && sudo cp ${download_dir}/hosts.tmp /etc/hosts;\\n\\t\\tfi\\n\\n\\t\\t# Add new hosts\\n\\t\\tsudo bash -c \\\"echo '# ==== Github Start ====' >> /etc/hosts\\\" # Add github host\\n\\t\\tif [ $? -ne 0 ]; then\\n\\t\\t\\techo \\\"[ERROR] 无root权限，请尝试运行脚本手动输入密码\\\"\\n\\t\\t\\tosascript -e 'display notification \\\"无root权限，请尝试运行脚本手动输入密码\\\" with title \\\"hoststool\\\"'\\n\\t\\t\\trm ${download_dir}/hosts.tmp\\n\\t\\t\\trm ${download_dir}/hosts\\n\\t\\t\\texit 1;\\n\\t\\tfi\\n\\t\\tsudo bash -c \\\"echo \\\\\\\"# Updated at $(date)\\\\\\\" >> /etc/hosts\\\" # Add github host\\n\\t\\tsudo bash -c \\\"cat ${download_dir}/hosts >> /etc/hosts\\\";\\n\\t\\tsudo bash -c \\\"echo '# ==== Github End ====' >> /etc/hosts\\\"\\n\\t\\trm ${download_dir}/hosts.tmp\\n\\t\\trm ${download_dir}/hosts\\n\\n\\t\\techo \\\"[INFO] Github Hosts 块更新于 $(date)\\\"\\n\\t\\tosascript -e 'display notification \\\"Github Hosts 已更新\\\" with title \\\"hoststool\\\"'\\n\\t\\texit 0;;\\n\\t-h|--help)\\n\\t\\tshowHelp;\\n\\t\\texit 0;;\\n\\t*)\\n\\t\\techo \\\"Unknown command\\\";\\n\\t\\tshowHelp;\\n\\t\\texit 1;;\\nesac\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"定时\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"保存以下文件为 \", _jsx(_components.code, {\n        children: \"hoststool.plist\"\n      }), \"。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-plist\",\n        children: \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<!DOCTYPE plist PUBLIC \\\"-//Apple//DTD PLIST 1.0//EN\\\" \\\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\\">\\n<plist version=\\\"1.0\\\">\\n<dict>\\n<key>Label</key><string>hoststool</string>\\n\\n<key>ProgramArguments</key>\\n<array>\\n  <string>/usr/local/bin/hoststool</string>\\n  <string>-u</string>\\n</array>\\n\\n<key>RunAtLoad</key>\\n<true/>\\n\\n<key>StartInterval</key>\\n<integer>3600</integer>\\n\\n<key>StandardOutPath</key>\\n<string>/Library/Logs/hoststool.log</string>\\n\\n<key>StandardErrorPath</key>\\n<string>/Library/Logs/hoststool.log</string>\\n\\n</dict>\\n</plist>\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"把 \", _jsx(_components.code, {\n        children: \"/usr/local/bin\"\n      }), \" ，改成你存放脚本的路径。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"时间间隔为 3600 秒，可以自己修改。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"然后执行\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-shell\",\n        children: \"$ sudo cp hoststool.plist /Library/LaunchDaemons\\n$ sudo chown root:admin /Library/LaunchDaemons/hoststool.plist\\n$ sudo launchctl load -w /Library/LaunchDaemons/hoststool.plist\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"执行完就会立刻运行一次脚本。由于定时任务是 root 用户不是个人用户，不会有通知，可以去 Console 看 log。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{"title":"Github hosts 更新脚本(MAC)","date":"2021-08-07","categories":"摸鱼","tags":"工具"},"scope":{}},"prevPost":{"title":"纯函数与算法","link":"/posts/pure-function"},"nextPost":{"title":"网盘目录程序比较","link":"/posts/网盘目录程序比较"}},"__N_SSG":true}