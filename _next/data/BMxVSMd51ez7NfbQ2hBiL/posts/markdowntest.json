{"pageProps":{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    hr: \"hr\",\n    h2: \"h2\",\n    del: \"del\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"此文件留做 Blog 开发的新 feature 测试文件。\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      id: \"draft属性\",\n      children: \"Draft属性\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"目前，在 yaml header 中，draft 属性设置为 false ，意思此 posts 将作为草稿，后续可能修订，不在 rss 中发布。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"此举主要是考虑到，由于某些 rss 服务的缓存机制，一旦获取过旧的 rss 订阅，即便后续更新过内容，后续读者也不会获得更新的内容。这使得 rss 的发布相对网页发布而言更加正式。而我个人写博客的时候通常较为随意，会有挤牙膏式修订。\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"具体是否在网页上是标注为草稿待考量，\", _jsx(_components.del, {\n        children: \"设计太难了\"\n      }), \"。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"添加于 2023-08-30 日。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{"title":"Markdown 测试","date":"2023-08-30","categories":"其他","description":"测试 draft 属性","draft":true,"tags":["blog"]},"scope":{}},"prevPost":null,"nextPost":{"title":"Windows 调整 - 基础功能与常用插件","link":"/posts/2023-08-30-windows-tweak-and enhancement"},"excerpt":" 此文件留做 Blog 开发的新 feature 测试文件。\r \r ----\r \r ## Draft属性\r \r 目前，在 yaml header 中，draft 属性设置为 false ，意思此 posts 将作为草稿，后续可能修订，不在 rss 中发布。\r \r 此举主要是考虑到，由于某","headings":[{"title":"Draft属性","rank":1,"id":"draft属性"}]},"__N_SSG":true}