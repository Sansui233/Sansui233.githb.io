{"pageProps":{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    a: \"a\",\n    code: \"code\",\n    del: \"del\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"自从感觉内存硬盘越来越不够用，以及对老黄的显卡需求，从mac换成了多年不见的 windows11 。做了非常多的调整，至现在基本稳定，记录下来以供参考。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"基本调整与基础功能增强\",\n      children: \"基本调整与基础功能增强\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"右键菜单\"\n        }), \"： 使用 \", _jsx(_components.a, {\n          href: \"https://nilesoft.org/download\",\n          children: \"shell\"\n        }), \"，恢复被藏到“更多选项”中的的右键菜单项，同时保持 win11 的设计风格。并且带有用 vs code 打开和用 windows Terminal 打开。虽然说 Windows Terminal 自己也有一个“用终端打开”，但那个有 Bug，打开的目录会被两个程序同时占用句柄，导致无法对目录本身进行操作。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"批量重命名\"\n        }), \"：使用 \", _jsx(_components.a, {\n          href: \"https://learn.microsoft.com/en-us/windows/powertoys/\",\n          children: \"Powertoys\"\n        }), \" 中的 PowerRename，可选中多个文件后右键批量重命名，整理素材时太有用了。大致与 mac 的多文件重命名相同。缺点是不能改成 \", _jsx(_components.code, {\n          children: \"同名称 + 编号\"\n        }), \" 。但系统自带的重命名恰好只能同名编号。Powertoys 有很多别的小工具，但都不够好用，按需关掉。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"快速预览\"\n        }), \"：使用 \", _jsx(_components.a, {\n          href: \"https://github.com/QL-Win/QuickLook\",\n          children: \"QL-Win/QuickLook\"\n        }), \" ，选中文件后按空格直接预览，再按空格关闭。对于看各种后缀的文本文件、zip 压缩包目录结构非常有用。也用了 mac 后没法割舍的一个功能。前面说的 Powertoys 也有，但快捷键一定要加 ctrl（真的难按），功能更少，图片不能显示大小，无法定制。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"文件快速搜索\"\n        }), \"：使用 \", _jsx(_components.a, {\n          href: \"https://www.voidtools.com/\",\n          children: \"Everything\"\n        }), \"，我大部分使用场景是在卸载程序后，清除残留的下载数据与用户数据。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"快速启动/全局搜索\"\n        }), \"：\", _jsx(_components.a, {\n          href: \"https://fluentsearch.net/\",\n          children: \"Fluent Search\"\n        }), \"，按 \", _jsx(_components.code, {\n          children: \"alt+ 空格 \"\n        }), \" 快速在中央唤起搜索栏以快速进入目录、启动程序。相比于 windows 自带的 search，可以搜索到绿色程序。相比于 \", _jsx(_components.a, {\n          href: \"https://www.flowlauncher.com/\",\n          children: \"Flow Launcher\"\n        }), \"，有好一万倍的排序。而更老的 \", _jsx(_components.a, {\n          href: \"https://www.listary.com/download\",\n          children: \"Listary\"\n        }), \"，无法搜索绿色软件，排序也很拉。经过多次对比后，只有 Fluent Search 能在大量同名目录中快速定位到我要找的目录，而不会被一堆杂乱的东西包裹。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"优化合集\"\n        }), \"：\", _jsx(_components.a, {\n          href: \"https://github.com/hellzerg/optimizer\",\n          children: \"hellzerg/optimizer\"\n        }), \" 微调 windows 的合集程序，包括禁止系统更新、改 hosts 文件刷新 DNS、移除开机启动项、添加自定义右键菜单等。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"历史剪贴板\"\n        }), \"：在 \", _jsx(_components.code, {\n          children: \"设置→系统→剪贴板\"\n        }), \" 中启用。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"屏幕颜色配置文件(ICC Profile)\"\n        }), \"：在 \", _jsx(_components.code, {\n          children: \"设置→屏幕→显示配置文件\"\n        }), \" 中，换成对应屏幕的sRGB文件。否则对于广色域屏幕，某些不读 ICC Profile 的照片查看器会出现色彩过饱和的情况。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"输入法\"\n        }), \"：微软输入法需要改成回车时键入英文，否则会清空，不方便中英混输。不过作为一个五笔用户，我现在使用的是基于 Rime 的 \", _jsx(_components.a, {\n          href: \"http://98wb.ysepan.com/\",\n          children: \"98五笔输入法\"\n        }), \" 和 \", _jsx(_components.a, {\n          href: \"https://github.com/Sansui233/98wubi\",\n          children: \"我的配置\"\n        }), \"。\", _jsx(_components.del, {\n          children: \"因为微软输入法 shift 加 空格会标点变全角，而这个功能在中英混输时非常容易触发，还不能改掉，实在太弱智了\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"关闭顶部自动布局\"\n        }), \"：关闭 \", _jsx(_components.code, {\n          children: \"系统→多任务处理→贴靠窗口\"\n        }), \"。此功能乍一看非常贴心，实则非常容易阻碍鼠标精准排列窗口，尤其是想把上沿拉到顶部时。不建议使用鼠标时开启，更适合手指操控设备。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"多线程下载器\"\n        }), \"：使用 \", _jsx(_components.a, {\n          href: \"https://aria2.github.io/\",\n          children: \"aria2\"\n        }), \"，在网上抄了一个配置文件，并且让 chatgpt 写了一个开机自启脚本。面板使用的是 Chrome 插件 \", _jsx(_components.a, {\n          href: \"https://chrome.google.com/webstore/detail/mpkodccbngfoacfalldjimigbofkhgjn\",\n          children: \"Aria2 Explorer\"\n        }), \"，考虑到都是在浏览器中下载，没必要使用独立的客户端 App。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"与手机互传文件\"\n        }), \"（折腾但稳定版）：使用 \", _jsx(_components.a, {\n          href: \"https://github.com/alist-org/alist\",\n          children: \"alist\"\n        }), \" 进行磁盘目录映射，并且使用 \", _jsx(_components.a, {\n          href: \"https://github.com/jeessy2/ddns-go/wiki\",\n          children: \"DDNS-Go\"\n        }), \" 动态绑定本机的 ipv6 地址到公网。手机上将相应的 alist 页面添加到主屏幕，便可在该页面互传文件。好处是能走局域网，速度快，不同网络环境下可用，可远程传输等等。依然让 chatgpt 写脚本将两个程序加入开机启动。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"音频调整\",\n      children: \"音频调整\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"使用 \", _jsx(_components.a, {\n            href: \"https://sourceforge.net/projects/equalizerapo/files/\",\n            children: \"Equalizer APO\"\n          }), \" 调全局声音的均衡，需要搭配 \", _jsx(_components.a, {\n            href: \"https://github.com/jaakkopasanen/AutoEq\",\n            children: \"Autoeq\"\n          }), \" 仓库中说的 peace 插件使用（现在好像直接叫autoeq.app）。耳机发烧友的必备。注意蓝牙耳机无法使用卷积eq。\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"内录用虚拟声卡：\", _jsx(_components.a, {\n            href: \"https://vb-audio.com/Cable/\",\n            children: \"VBCABLE_Driver\"\n          }), \"。网上有很多教程，为轻量级内录解决方案。另外如果系统带有 xbox，用 xbox 的录制视频是默认走的内录。\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"降低 Midi 键盘延迟：键盘连接电脑练琴，无独立声卡时，可用 \", _jsx(_components.a, {\n            href: \"https://asio4all.org/\",\n            children: \"ASIO4ALL\"\n          }), \" 降低延迟。效果显著。缺点是 ASIO 是设备独占的，比如宿主软件使用 ASIO 到耳机，那看 b 站视频就只能外放（或者别的耳机/音响）。\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{"title":"Windows 调整 - 基础功能与常用插件","date":"2023-08-30","categories":"折腾","description":"让 windows11 变得更好用的一些自定义设置","tags":["工具"],"keywords":"Windows工具, 软件推荐, Windows调整，Windows设置，插件"},"scope":{}},"prevPost":{"title":"Markdown 测试","link":"/posts/markdowntest"},"nextPost":{"title":"图像超分辨率工具推荐","link":"/posts/20230822-Super_resolution_models_and_tools"},"excerpt":" 自从感觉内存硬盘越来越不够用，以及对老黄的显卡需求，从mac换成了多年不见的 windows11 。做了非常多的调整，至现在基本稳定，记录下来以供参考。\r \r ## 基本调整与基础功能增强\r - **右键菜单**： 使用 [shell](https://nilesoft.org/dow","headings":[{"title":"基本调整与基础功能增强","rank":1,"id":"基本调整与基础功能增强"},{"title":"音频调整","rank":1,"id":"音频调整"}]},"__N_SSG":true}