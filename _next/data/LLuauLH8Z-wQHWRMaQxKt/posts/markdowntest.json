{"pageProps":{"meta":{"title":"Markdown 测试","date":"2023-08-30 10:54","tags":["blog"],"categories":"其他","description":"测试 draft 属性","draft":true},"content":"\r\n此文件留做 Blog 开发的新 feature 测试文件。\r\n\r\n----\r\n\r\n## Draft属性\r\n\r\n目前，在 yaml header 中，draft 属性设置为 false ，意思此 posts 将作为草稿，后续可能修订，不在 rss 中发布。\r\n\r\n此举主要是考虑到，由于某些 rss 服务的缓存机制，一旦获取过旧的 rss 订阅，即便后续更新过内容，后续读者也不会获得更新的内容。这使得 rss 的发布相对网页发布而言更加正式。而我个人写博客的时候通常较为随意，会有挤牙膏式修订。\r\n\r\n具体是否在网页上是标注为草稿待考量，~~设计太难了~~。\r\n\r\n添加于 2023-08-30 日。 \r\n\r\n## Code  HighLight\r\n\r\n```rust\r\nfn main() {\r\n    let x = 1;\r\n    let sum = |y: i32| { x + y }; // 说明： 闭包 sum 接收一个参数 y，且捕获前面的 x = 1, 返回 x + y\r\n    println!(\"{}\", sum(99)); // 输出 100\r\n\r\n    let sum2 = |y :i32| x + y + 1; // 也可以省略花括号\r\n    println!(\"{}\", sum2(99)); // 输出 101\r\n}\r\n```\r\n\r\n添加于 2023-09-15。\r\n\r\n## Typography\r\n\r\n排版，以功能性划分，而非纯粹的美学scaling划分。\r\n\r\n很多时候web的一级标题应该独立设计，不是正文的一部分，仅作字号展示\r\n\r\n# 很大很大的一级标题\r\n\r\n## 很大的二级标题\r\n\r\n分Section的功能，下面经常接的是正文或直接的三级标题\r\n\r\n### 三级标题\r\n\r\n正文，需要和二级标题在远距离明显区分\r\n\r\n#### 四级标题\r\n\r\n正文，一般不用\r\n\r\n##### 五级标题\r\n\r\n正文，一般不用\r\n\r\n###### 六级标题\r\n\r\n正文，图一乐。下面是夹杂在正文中的列表。\r\n\r\n- Item1\r\n- Item2\r\n- Item3\r\n\r\n完毕","excerpt":" 此文件留做 Blog 开发的新 feature 测试文件。  ----  ## Draft属性  目前，在 yaml header 中，draft 属性设置为 false ，意思此 posts 将作为草稿，后续可能修订，不在 rss 中发布。  此举主要是考虑到，由于某些 rss 服务","prevPost":{"title":"Windows调整之基础功能与常用插件","link":"/posts/2023-08-30-windows-tweak-and-enhancement"},"nextPost":{"title":"图像超分辨率工具推荐","link":"/posts/20230822-Super_resolution_models_and_tools"},"headings":[]},"__N_SSG":true}