{"pageProps":{"meta":{"title":"关于指针与Golang的结构体","date":"2020-11-27 08:00","tags":["Golang"],"categories":"学习","description":"关于指针与Golang的结构体","keywords":"Mac, shell, 自动化, 脚本"},"content":"\r\n之前在学C++的时候，指针的用法就困惑了很久。后来有了计算机体系结构基础后，再加上Golang的一些说明，就突然明白了，之前为什么不理解指针。纠结的点在哪里。\r\n\r\n## 指针的概念\r\n\r\n(学的语言太多语法有些混了，看个意思就好，代码是四不像并不可以运行)\r\n\r\n- **地址**：一个变量在内存中的存储形式是 **地址 + value**，地址是在指内存中的地址。\r\n\r\n比如 `int a = 3`，意思是变量 a 在内存中有一个地址，**这个地址储存的 value 为 3**。\r\n\r\n- **指针 (pointer)** ：是一种变量，**它的 value 仍然是一个地址**。常用`*`定义指针变量。\r\n\r\n比如 `int *b = &a`，意思是 **指针变量** b 在内存中有一个地址，**这个地址储存的 value 为 a 的地址**。\r\n\r\n在使用变量（而不是声明或定义变量）时，`&` 为取地址符。对应的还有一个`*`为取内容符。比如\r\n\r\n```c++\r\nint a = 3\r\nint *b = &a // 将 a 的地址作为 b 的 value\r\nprint(b) // 输出 b 的 value，结果为一个地址，等于 a 的地址(&a)\r\nprint(*b) //将 b 的 value 作为地址，输出地址中存的值，结果为 3\r\n```\r\n\r\n上面仅是个人的概念解释，尽量少地引入新概念。以上概念有更通俗的叫法。\r\n\r\n比如`int *b = &a`，通常会叫做“变量 b 持有 a 的引用”。个人觉得虽然直观，但对于初学者并不友好。首先，“变量 b”就没有说清楚指针变量的特殊性。然后“a 的引用”，倒是说清楚什么叫做 a 的引用啊……尤其是一些语言没有指针的概念，但引用是随处可见的（比如 Javascript 的 Object 类型）\r\n\r\n## Golang Struct 与 指针的访问\r\n\r\n其实让我明白的只是因为[Go tour](https://tour.golang.org/moretypes/4)中的两句话：\r\n\r\n> Struct fields can be accessed through a struct pointer.\r\n> 结构体字段可以使用结构体指针获取。\r\n\r\n> To access the field X of a struct when we have the struct pointer p we could write `(*p).X`. However, that notation is cumbersome, so the language permits us instead to write just `p.X`, without the explicit dereference.\r\n> 结构体指针访问字段本来应该写成`(*p).x`，但是由于这么写太蠢了，所以允许直接写成`p.x`。\r\n\r\n也就是说，如果见到类似`T.x`的结构体访问，T有可能是结构体本身，也可能是指针……需要自行区分。仅此而已。\r\n\r\n而我之前一直以为 T 只能是结构体本身= =，所以对于指针一直头大……\r\n\r\n但由于存在指针这种特殊的访问方式，在结构体的组合与接口实现中会有一些想不到的情况：\r\n\r\n- 定义了一个接口Interface，方法有Intera()，Interb()\r\n\r\n  ```go\r\n  type Interface interface{\r\n  \tIntera()\r\n  \tInterb()\r\n  }\r\n  ```\r\n\r\n- 定义了一个结构体Base，用结构体指针的方式实现了Intera()\r\n\r\n  ```go\r\n  type Base struct {}\r\n  func (b *Base) Intera() {}\r\n  ```\r\n\r\n- 定义了一个结构体Extend，匿名组合了Base，用正常结构体的方式实现了Interb()\r\n\r\n  ```go\r\n  type Extend struct {\r\n    \tBase\r\n  }\r\n  func (e Extend) Interb() {}\r\n  ```\r\n\r\n这个时候，请问有谁实现了Interface？\r\n\r\n答案是：**Base和Extend本身都没有实现Interface**。但是上述代码中完全没有出现的***Extend（Extend的指针）实现了Interface**。\r\n\r\n为什么呢？虽然***Extend**并没有实现第二个方法，但**Extend**实现了，所以***Extend**是也是可以直接访问第二个方法的（参考上面的(*p).x的解释）。\r\n\r\n而***Base**实现了第一个方法（Base没有实现），而**Extend**组合了**Base**。因此第一个方法可以也通过***Extend**访问（Extend无法访问）。\r\n\r\n所以***Extend**两个方法都能访问，因此实现了Interface。而**Extend**只能访问第二个方法，因此没有实现Interface。\r\n\r\n然后日常使用**Extend**的时候，为了能使用Interface的方法，需要使用***Extend**：\r\n\r\n```go\r\ninterfacelist := make([]Interface, 0)\r\ninterfacelist = append(interfacelist, &Extend{}) // 因为是指针实现Interface，需要传入地址\r\ne = interfacelist[0]\r\n```\r\n\r\n在goland对e按下F1时，只会显示，这是个Interface，不会告诉你这是***Extend**。如果不是自己从头写的代码，你可能很久都无法发现，是个指针类型实现了Interface。你必须在层层组合中，找到是哪一层（这里是Base）让Extend变成了Interface的指针实现。\r\n\r\n对e的type assertion也应该这么写：\r\n\r\n```go\r\ne_ptr = e.(*Extend) // 从Interface类型返回一个Extend类型的指针\r\ne_ptr.Base // 等于(*e_ptr).Base\r\n```","excerpt":" 之前在学C++的时候，指针的用法就困惑了很久。后来有了计算机体系结构基础后，再加上Golang的一些说明，就突然明白了，之前为什么不理解指针。纠结的点在哪里。  ## 指针的概念  (学的语言太多语法有些混了，看个意思就好，代码是四不像并不可以运行)  - **地址**：一个变量在内存","prevPost":{"title":"看看是谁在D我","link":"/posts/看看是谁在D我"},"nextPost":{"title":"Mac上如何开机与关机时自动运行Shell脚本","link":"/posts/Mac上如何开机与关机时自动运行Shell脚本"},"headings":[]},"__N_SSG":true}