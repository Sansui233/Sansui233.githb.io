[{"id":"2023-10-09-the-little-prince-review.md","title":"重读《小王子》","content":"《小王子》在不同年龄阶段都看过，中译和原著也都读过，当时只是觉得有趣。但尝试自己写故事后，才惊觉其实所有的有趣都是是作者的刻意表达。仅仅以生活中的“有趣”与“想象力”写出的故事远远不够，别人看起来并没有你认为的那么有趣，内核是空洞的。人在成年人后，所经历的一切容易让笔下故事的发展陷入自身所见所闻，很难写出孩子般质朴的想象，无法逃离现实的束缚。\r\r举个例子，如果你的故事需要一个超现实的“天体引力”进行推动，你会用怎样的方式让这样的力产生？我搜集了很多宇宙的资料，试图从中找到什么想法。但事实上我并不是想写硬科幻，也没人想在简短的剧情中读一大堆物理考据。我对此一筹莫展，觉得怎样都编不出一个合理的解释……最后决定拉出上帝作为隐喻，上帝按自己心意去裁定天体引力。听起来很离谱吧，就好像是小孩子的瞎想，仅仅是“上帝裁定天体引力”不也是一具无意义空壳吗？但如果将这个设定赋予别的象征，就不再是无意义的。或者说，我其实是想象征什么，才拉出一个离谱的上帝。不过这个处理我也并不满意，但一时想不到更好的方法。\r\r幻想的意义不在于幻想本身，而是幻想对故事带来的推动。感到有趣的事在深入思考后也不仅是罕见、超现实的表象，它会带来的新体验，又或者：“喜剧的内核是悲剧”。\r\r今天复看《小王子》，试图从写故事的角度去理解，作者在下笔时是带着怎样的想法与心情呢？或是单纯是觉得有趣吗？怎么想出这些光怪陆离的可爱小故事？我是一个强逻辑性的Ne人，这样的思考也许能提高一下Ni的水平，带来一些不一样的启发。\r\r## 第1章\r\r介绍“我”与“大人”之间的区别。\r\r“我”在成为大人后 ，依然有着孩子般的心灵。如果不是这样，后文的“我”将是一个很难理解小王子的大人。体现这一点是“蛇吞象”与“帽子”的故事（作者真的很会想）。大人看东西只关注现实，不现实的事情对于大人毫无意义。\r\r## 第2-7章\r\r介绍小王子的由来。\r\r“我”困在沙漠中时遇到来自另一个星球的小王子，一个礼貌的、有点忧伤的小王子。小王子想要我画一只绵羊给他，但挑三拣四，最后对一只藏在箱子里看不见的小绵羊表示满意，还觉得小羊在箱子里睡着了。\r\r为什么想到在这里安排这么一只奇怪的绵羊，如果仅仅想有趣，那安排一只会走钢丝的山羊不行吗？读到最后才隐隐有了答案——美丽的事物往往是不被看见的，这也许是“箱子里的羊”的动机。\r\r第6章的写小王子星球上的猴面包树。从编剧的角度，不描写羊吃什么食物也无伤故事发展，但写了，还写的是特别具体也不常见的猴面包树，大概是有什么想法在里面的。猴面包树是会无限扩张的、不好的东西，但这和小王子的生活有什么关系呢，也就是多了一些并不让人开心的日常打扫。\r\r我不认为这里是象征自私的欲望、野心，小王子的星球上没有出现这类元素的必要性，含义也并不太深刻，在后续别的星球遇到更合理。后来看知乎上感觉有一个（我认为）挺靠谱的说法：\r\r> 作者发表时正值二战期间，作者是一名法国人，国土沦丧旅居纽约。旅居纽约的法国人又分成戴高乐派和维希派，他想劝告两派捐弃前嫌共同对敌，却遭到两派的夹攻，非常无奈，这三棵灌木正是代表法西斯的德国、意大利和日本。\r\r破坏这份宁静的、疯长的、夺取人生存空间的猴面包树。\r\r然后引出了对于小王子最重要的玫瑰花。作者是先想到绵羊再编出的玫瑰花，还是本来就想写玫瑰花与小王子的故事、再编出绵羊？如果以先写大纲让剧情先行的角度，我偏向于后者。无论以何种方式开始，绵羊和玫瑰花的情节是精妙契合的。情节的前后衔接一向不是一个简单的事情，如果先写剧情可能人物 ooc，如果先写人物可能会想不出后续，好多长篇就是这么坑掉的……\r\r这部分里还有一些别的情节，比如说谈到小王子的星球叫做行星 B612 时，讽刺了大人们喜欢以衣冠取人，关注外在与代号，不关注人的本质。\r\r小王子的星球上还有两座活火山一座死火山，非常有趣的脑洞，对剧情发展没什么用但并不觉得无聊，气质很符合小王子的星球（氛围渲染也是有必要的？）。小王子有一天最多看了43次日落，后文对不同星球的日落次数描写对比起来也非常有趣。至此基本表现出了小王子日常生活。\r\r## 第8-9章\r\r玫瑰花与小王子的相处这两章浪漫温柔，明显以人物情感先行，对话自然发生。剧情上没有太多刻意安排。有刻意安排的剧情是小王子最后一时冲动生了玫瑰花的气，离星出走。虽说是生气了，但看起来还是十分的文艺……整个文笔的基调就是这样的，very童话。\r\r## 第10-15章\r\r离星出走章节。不同星球上住着不同的奇怪大人，写得非常直白。后面有许多章节都会显得较为独立且直白，是娓娓道来的日常故事。\r\r第10章：有理性但放不下权威架子的大人。\r\r第11章：爱慕虚荣的大人。\r\r第12章：永远在犯同样错误的酒鬼。非常短，像四格漫画一样，但闭环的对白好有趣。\r\r第13章：除了钱和财产再脑子也容不下别的东西的商人。一些人看到什么东西就觉得是自己的，什么也不做就想据为己有，像是在讽刺资本主义的起源嗯……\r\r第14章：守规矩的、不知变通的打工人。观看一千多次日落这个吐槽也很有趣，像是人物先行写出来的。\r\r第15章：不出门的地理学家。看到好多模板的影子：不深入基层的高高在上的 leader、掉书袋不实践的人、把别人的成果据为己有的人、不切实际的甲方。地理学家知道地球，但连自己的星球上有没有大洋和火山都不知道，却觉得理所当然。\r\r## 第16-19章\r\r小王子来地球的见闻。\r\r第16章介绍地球。\r\r第17章小王子来到地球寻找人类，第一个遇见的毒蛇是为以后小王子回家埋下的伏笔（好残忍）。\r\r第18章向花问路的写作视角很有趣。以花的视角，人没有根，所以被风送走了。\r\r第19章的回声有点类似空镜的作用？我不理解，但隐约觉得好像是有用的，好可爱。\r\r## 第20-21章\r\r算是主线章节（？）很多玫瑰的花圃，小王子最初知道自己的玫瑰在外形上不是独一无二的后，很伤心。但小狐狸的出现又让他明白了\r\r> **正是因为小王子在玫瑰身上花费的时间，才使得玫瑰变得如此珍贵。因此单她一朵，就胜过了这世间所有。**\r\r此外小狐狸还教会了他仪式感。\r\r## 第22-23章\r\r永远在向往别处，行色匆匆，忽视脚下风景的人。\r\r永远在节省时间，追求效率的现代人。\r\r## 第24-25章\r\r沙漠里的井水，突出主题的两章，和星星上的玫瑰花一样。这个情节的设置和作者的自身经历有关，对于没有经历过的人而言难以复刻。\r\r> “沙漠美丽，因为沙漠的某处隐藏着一口井。”\r\r> “房子也好，星星、沙漠也好，美化他们的东西，是肉眼看不见的。”\r\r## 第26-27章\r\r小王子通过死亡回去了，“我”不舍。这两章人物先行，对白比较重要。\r\r总体感想是，这是一本给成年人读的童话。我清楚记得我小学时看到第一章，只觉得这是一个有点可爱的怪孩子。到高中时，可以感受到文笔有童话的美好，但并不太理解作者要表达什么。大学时看原著也没有懂，纯学英文去了。直到现在才对里面的情节有所体会。小王子的“童真”是人在成长过程中需要慢慢获得的，是成年人的反思，在小时候的记忆中类似的想法我从未存在过，会现实得多，真正的小孩子有着更原始更本能的残酷。\r\r语文考试总是在问“作者在这一段想要表达什么”，小时候总觉得有时候是出题想太多。现在觉得，不是的，但也不应该有标准答案。刻意设计的剧作可以解释，很多人带着心情自然而然书写而成的东西，自己也是无法准确剖析的。剖析自己对每个人都是困难的，何况是一纸之隔的他人呢。","description":"以故事写作的角度重读世界名著《小王子》","keywords":"小王子,世界名著,童话,读后感,书评","date":"2023-10-09 21:56"},{"id":"2023-09-29-windows-system-chinese-fonts-adjustment.md","title":"Windows调整之中文字体","content":"> 以下仅适用于低于 4k 缩放 200% 的显示器\r\n\r\n微软雅黑作为随着 Windows7 出现的字体，加上遥遥领先（？）的 ClearType，在当时的 1080p 显示器上十分清晰易读。但如今的显示器分辨率越来越高，旧版微软雅黑的设计存在着明显的缺陷。一是其字形设计并不平衡，中宫过大，有的字形可以以难看来形容；二是微软雅黑字形只在4K屏上有着准确的显示。如果你不巧像我一样用着2.5K屏，在ClearType的加持下，仔细观察资源管理器侧边栏中，“桌面”二字短横的间距并不平衡。\r\n\r\n微软曾经设计过“另一版的微软雅黑”，即 Noble Scarlet，但不知出于何种原因并没有在正式的系统中使用。这一版字体设计依然中宫偏大，但相对老版收敛了不少，平衡了一些。据传言汉字部分是兰亭黑Pro。但这个字体在标点处理上很差，最直观的就是中文引号，太像西文的处理方式，很难看出前引号与后引号的区别。其实我在写这一篇文的时候，换了 Typora 的字体，才发现前后引号全打反了……\r\n\r\n个人推荐的配置和工具如下：\r\n\r\n- **Noble Scarlet**  替换系统的微软雅黑。由于版权原因无官方公开链接，需自行搜索\r\n- 系统字体替换工具：自行搜索 “字体替换工具 by 随风飘扬”。win7 时代的产物，太古老了找不到原作者出处。替换完后最好重启，否则可能有一些错误，比如字体大小错误。另外，github 上还有一个非侵入式的系统字体替换工具 [noMeiryoUI](https://github.com/Tatsu-syo/noMeiryoUI)，但是换不全，只是作为预览不同字体在系统上的效果倒是个很不错的工具。\r\n- [**MacType**](https://www.mactype.net/) 改善 ClearType 丢细节带来的不平衡\r\n- 安装一个 **苹方**。有一些中文网站 Fallback Font 也是苹方在前。由于版权原因无官方公开链接，需自行搜索。浏览器对于字体的渲染不受 MacType 的影响，在PPI不足的情况下，浏览器的渲染是偏细的，默认设置还得是微软雅黑。\r\n- **[思源宋体](https://source.typekit.com/source-han-serif/cn/)**：推荐将浏览器的 Serif 字体设置为此字体。默认的宋体真的，不论中文英文，都很丑……只适合打印。\r\n\r\n苹方是一款设计上很优秀的字体，但它对于低 PPI 的显示器不友好，人话说，不是4K屏缩放200%都别用。首先苹方粗体相对其他黑体本身就较细，在ClearType下，苹方被削掉的细节使得其字重偏小，Bold 看起来像 Medium。另外，苹方在2.5K屏上表现非常糊，毕竟苹方问世时已经 Retina 屏已经出了好久了，人家压根没考虑过在低 PPI 屏幕上的表现。最后是版权问题，当然苹果大概不会因为这点事起诉个人用户。\r\n\r\n更纱黑体也非常适合作为 windows 的系统字体，在1080p 和 2.5k 下都能保证良好的清晰度。相比起微软的两款字体，更纱黑体可以称得上是秀气了，但汉字覆盖率不如系统级别的字体。自己看下来，更纱黑体与思源黑体设计的细节不太统一，比如“用”字明显矮了一截，使句子看起来不太稳定。但是在宋体设计上，“用”字矮的这一截反而让字体看起来平衡。一个系列的字体的统一感和比例关系又很大，个人理解为思源/更纱系列是优先考虑宋体的字形，但也不是传统的宋体字形，和黑体的比例有一定的结合。整体而言还是宋体的设计更加优秀。\r\n\r\n思源黑体作为更纱黑体的前辈，是不太适合低 ppi 屏的，它的 Regular 字重看起来像 Bold。","description":"让 windows11 字体更好看的一些设置与字体浅谈","keywords":"Windows工具, 软件推荐, Windows调整, Windows设置, 字体, 字体设置, Noble Scarlet, 微软雅黑","date":"2023-09-29 10:25"},{"id":"2023-09-26-minecraft-settings-for-v1-20.md","title":"Minecraft v1.20常用设置","content":"在 Minecraft 1.20 版本光照引擎被大幅改写，使得帧数提升，模组的数量似乎又多了起来。另外在 fabric 发展起来以后，mod的社区生态有了很大的变化，有很多老牌模组有了更新的替代。现在记录一下实现常用的基本功能需要的模组与修改设置。\r\r我使用的 hmcl 启动器，在其中进行模组下载可显示模组间的依赖情况。以下内容在1.20.1中完全兼容，且项目均在维护中。\r\r## Mods\r\r使用以 fabric-api 构建的模组。\r\r### 渲染类\r\r- Sodium: 渲染优化之神，许多模组的前置\r- Sodium-extra: 渲染优化之神的扩展，相应 GUI 为reeses sodium options\r- Lithium: 原版机制的算法改进\r- Iris: Sodium 加光影\r- Custom Entity Models: 自定义实体模型，增强对 optifine 材质包的支持\r- Continuity: 无缝纹理，安装后需要启用相应的材质包\r- Indium: 许多模组的前置，提供 Fabric Rendering API的支持\r\r### 功能类\r\r- modmenu: 显示所有模组和相应的设置页面（如果有的话）\r- carpet: 单人生存必备，可使用命令放置假人以常加载区块刷红石\r- tweakeroo: 一系列微调的小功能。主要使用 freecamera（灵魂出窍）以获得更好的摄影视角，zoom 开启类似 optifine 的按 c 视角放大，handrestock 可自动补货手里的工具、方块\r- JourneyMap: 小地图，降肝度必备。Xae 的小地图也不错，两者都需要设置一下显示的东西，默认会非常多，我只开启了玩家、时间、坐标。关闭了各种网络显示和生物显示。\r- Invertory Profile Next: 高版本的 R 键背包整理，强迫症必备。另有捡物品时默认扔到背包中，以及在打开箱子时使用滚轮移动物品，个人非常喜欢，更快，且减少食指的腱鞘炎。\r- Roughly Enough Items: 物品搜索，查看合成配方、查看方块用途，ctrl点击后快速移动到合成台。尽管原版有合成书，但一页条目显示太少，且不支持拼音搜索，不支持模组物品。REI依旧方便很多。\r- imblock: 输入法冲突修复\r\r## 设置\r\r- 画面尺寸: 1920*1080@60fps，窗口化\r- 视场角: 85\r- 鼠标灵敏度: 75\r- 模拟距离：8\r- 渲染距离：10\r\r### 快捷键修改\r\r首先把 ctrl 改到 capslock 键位，方便疾跑。系统全局 powertoys 改的（吐槽一万句control的键位）\r\r- tab 长按: 快速显示背包中物品，在 tweakroo 中的 hotbarswapbase 设定\r- tab+1/2/3: 快捷键切换到背包中下一行。 tweakroo 中的 hotbarswap 每一行单独设定\r- j: 显示 jouneymap 小地图\r- m: 显示 jouneymap 大地图和设定\r- v: 切换第三人称视角，很常用的功能。原本是f5，实在太远了\r- f5:  灵魂出窍，在 tweakroo 的 freecamera 中设定\r- z: 望远镜，在 tweakroo 的 zoomactivate 中设定\r\r#### 合成台、箱子UI\r\r- y: REI 查看光标下物品的配方\r- u: REI 查看光标下物品用途\r- ctrl + 左键点击REI的物品，移动物品到合成台\r- r: Invertory Profile Next 整理。按 r+c 在 IPN 的设置中修改\r- 使用滚轮以在背包和箱子间移动物品，按shift移动整组\r\r## 光影\r\r- BSL v8.2.04，默认配置High，把 Camera 中的 Bloom 关闭，把 Atmosphere 中的 fog 调到 0.5，开启 lighting 中的handDynamicLight。抗锯齿的TAA随便开不开，取决于风扇响不响\r- Complementary Reimagined，默认配置 medium，high 会开启镜面反射运算量明显变大\r\r## 材质\r\r- 任意矿物发光材质。比如 [New Glowing Ores](https://www.curseforge.com/minecraft/texture-packs/new-glowing-ores)。主要是因为 BSL 光影没有矿物发光，所以要加一个材质以确保有 fallback。\r- [彩虹像素](https://afdian.net/a/Nan2uu)，非常优秀的免费猛男材质包，原版风但更精致。有很多更可爱的附加包。","description":"一些自用的Minecraft高版本常用设置","keywords":"Minecraft, fabric, 常用设置, mods","date":"2023-09-26 10:38"},{"id":"2023-08-30-windows-tweak-and-enhancement.md","title":"Windows调整之基础功能与常用插件","content":"自从感觉内存硬盘越来越不够用，以及对老黄的显卡需求，从 mac 换成了多年不见的 windows11 。做了非常多的调整，至现在基本稳定，记录下来以供参考。\r\r## 基本调整与基础功能增强\r- **右键菜单**  \r\r   使用 [shell](https://nilesoft.org/download)，恢复被藏到“更多选项”中的的右键菜单项，同时保持 win11 的设计风格。并且带有用 vscode 打开和用 windows Terminal 打开。虽然说 Windows Terminal 自己也有一个“用终端打开”，但那个有 Bug，打开的目录会被两个程序同时占用句柄，导致无法对目录本身进行操作。\r\r- **批量重命名**  \r\r  使用 [Powertoys](https://learn.microsoft.com/en-us/windows/powertoys/) 中的 PowerRename，可选中多个文件后右键批量重命名，整理素材时太有用了。大致与 mac 的多文件重命名相同。缺点是不能改成 `同名称 + 编号` 。但系统自带的重命名恰好只能同名编号。Powertoys 有很多别的小工具，但都不够好用，按需关掉。\r\r- **快速预览**  \r\r  使用 [QL-Win/QuickLook](https://github.com/QL-Win/QuickLook) ，选中文件后按空格直接预览，再按空格关闭。对于看各种后缀的文本文件、zip 压缩包目录结构非常有用。也用了 mac 后没法割舍的一个功能。前面说的 Powertoys 也有，但快捷键一定要加 ctrl（真的难按），功能更少，图片不能显示大小，无法定制。\r\r- **文件快速搜索** \r\r  使用 [Everything](https://www.voidtools.com/)，我大部分使用场景是在卸载程序后，清除残留的下载数据与用户数据。\r\r- **快速启动/全局搜索** \r\r  [Fluent Search](https://fluentsearch.net/)，按 `alt+ 空格 ` 快速在中央唤起搜索栏以快速进入目录、启动程序。相比于 windows 自带的 search，可以搜索到绿色程序。相比于 [Flow Launcher](https://www.flowlauncher.com/)，有好一万倍的排序。而更老的 [Listary](https://www.listary.com/download)，无法搜索绿色软件，排序也很拉。经过多次对比后，只有 Fluent Search 能在大量同名目录中快速定位到我要找的目录，而不会被一堆杂乱的东西包裹。\r\r- **优化合集** \r\r  [hellzerg/optimizer](https://github.com/hellzerg/optimizer) 微调 windows 的合集程序，包括禁止系统更新、改 hosts 文件刷新 DNS、移除开机启动项、添加自定义右键菜单等。\r\r- **历史剪贴板**：在 `设置→系统→剪贴板` 中启用。\r\r- **屏幕颜色配置文件(ICC Profile)**  \r\r  在 `设置→屏幕→显示配置文件` 中，换成对应屏幕的sRGB文件。否则对于广色域屏幕，某些不读 ICC Profile 的照片查看器会出现色彩过饱和的情况。\r\r- **输入法** \r\r  微软输入法需要改成回车时键入英文，否则会清空，不方便中英混输。不过作为一个五笔用户，我现在使用的是基于 Rime 的 [98五笔输入法](http://98wb.ysepan.com/) 和 [我的配置](https://github.com/Sansui233/98wubi)。~~因为微软输入法 shift 加 空格会标点变全角，而这个功能在中英混输时非常容易触发，还不能改掉，实在太弱智了~~\r\r- **关闭顶部自动布局** \r\r  关闭 `系统→多任务处理→贴靠窗口`。此功能乍一看非常贴心，实则非常容易阻碍鼠标精准排列窗口，尤其是想把上沿拉到顶部时。不建议使用鼠标时开启，更适合手指操控设备。\r\r- **多线程下载器** \r\r  使用 [aria2](https://aria2.github.io/)，在网上抄了一个配置文件，并且让 chatgpt 写了一个开机自启脚本。面板使用的是 Chrome 插件 [Aria2 Explorer](https://chrome.google.com/webstore/detail/mpkodccbngfoacfalldjimigbofkhgjn)，考虑到都是在浏览器中下载，没必要使用独立的客户端 App。\r\r- **与手机互传文件**（折腾但稳定版）  \r\r  使用 [alist](https://github.com/alist-org/alist) 进行磁盘目录映射，并且使用 [DDNS-Go](https://github.com/jeessy2/ddns-go/wiki) 动态绑定本机的 ipv6 地址到公网。手机上将相应的 alist 页面添加到主屏幕，便可在该页面互传文件。好处是能走局域网，速度快，不同网络环境下可用，可远程传输等等。依然让 chatgpt 写脚本将两个程序加入开机启动。\r\r## 硬件调整\r\r- 硬件信息监测\r\r  使用[hwinfo](https://www.hwinfo.com/)的实时监测数据作为硬件调整的基准\r\r- 功耗/风扇转速调整\r\r  使用 [g-helper](https://github.com/seerge/g-helper) 调整日常使用的风扇曲线。我买的幻16，作为全能本，出厂的奥创调教特别垃，首发时还有bug。它的三种模式\r\r  1. 静音模式风扇完全不转，经常温度突然飙升很吵地转一会儿\r  2. 性能模式开什么都以游戏本的方式转，对我来说挺吵的\r  3. 增强模式的声音不是给人用的。\r  \r  如果用windows默认电源管理方案的话，似乎和程序资源占用有关，即使只有60度也给转上4000转。打个小游戏真的不配这么吵……\r  \r  后面用g-helper关闭睿频，功耗限制35w。测下来开原神默认高画质 1080p 稳定在CPU 65度，风扇3500转，不卡。这代 GPU 的散热反而问题不大，至少玩原神不会超过60度。然后测试了带光影的 Minecraft 1.20.1。MC 对 CPU 的要求更高，不过单机的话，不刻意刷红石，35w也够了，一般在25w左右，温度还是差不多的65度，全程电压没有超过1V，降压对于控温还是很有用的。奥创之所以动不动就吵就是因为一开性能模式，什么都不干电压给到1.8V……没必要，真的没必要。\r  \r  日常使用场景下，好像也就编译比较耗CPU，其他时候都用不到很好的CPU性能。图形处理还是占GPU更多。音乐制作一类的也是耗CPU但也还好，但更耗内存硬盘。\r\r## 音频调整\r\r- **[Equalizer APO](https://sourceforge.net/projects/equalizerapo/files/)**  \r\r  调全局声音的均衡，需要搭配 [Autoeq](https://github.com/jaakkopasanen/AutoEq) 仓库中说的 peace 插件使用（现在好像直接叫autoeq.app）。耳机发烧友的必备。注意蓝牙耳机无法使用卷积eq。\r\r- **内录用虚拟声卡：[VBCABLE_Driver](https://vb-audio.com/Cable/)**  \r\r  网上有很多教程，为轻量级内录解决方案。另外如果系统带有 xbox，用 xbox 的录制视频是默认走的内录。\r\r- **降低 Midi 键盘延迟**  \r\r  键盘连接电脑练琴，无独立声卡时，可用 [ASIO4ALL](https://asio4all.org/) 降低延迟。效果显著。缺点是 ASIO 是设备独占的，比如宿主软件使用 ASIO 到耳机，那看 b 站视频就只能外放（或者别的耳机/音响）。","description":"让 windows11 变得更好用的一些自定义设置","keywords":"Windows工具, 软件推荐, Windows调整，Windows设置，插件","date":"2023-08-30 17:42"},{"id":"markdowntest.md","title":"Markdown 测试","content":"此文件留做 Blog 开发的新 feature 测试文件。\r\r----\r\r## Draft属性\r\r目前，在 yaml header 中，draft 属性设置为 false ，意思此 posts 将作为草稿，后续可能修订，不在 rss 中发布。\r\r此举主要是考虑到，由于某些 rss 服务的缓存机制，一旦获取过旧的 rss 订阅，即便后续更新过内容，后续读者也不会获得更新的内容。这使得 rss 的发布相对网页发布而言更加正式。而我个人写博客的时候通常较为随意，会有挤牙膏式修订。\r\r具体是否在网页上是标注为草稿待考量，~~设计太难了~~。\r\r添加于 2023-08-30 日。 \r\r## Code  HighLight\r\r```rust\rfn main() {\r    let x = 1;\r    let sum = |y: i32| { x + y }; // 说明： 闭包 sum 接收一个参数 y，且捕获前面的 x = 1, 返回 x + y\r    println!(\"{}\", sum(99)); // 输出 100\r\r    let sum2 = |y :i32| x + y + 1; // 也可以省略花括号\r    println!(\"{}\", sum2(99)); // 输出 101\r}\r```\r\r添加于 2023-09-15。\r\r## Typography\r\r排版，以功能性划分，而非纯粹的美学scaling划分。\r\r很多时候web的一级标题应该独立设计，不是正文的一部分，仅作字号展示\r\r# 很大很大的一级标题\r\r## 很大的二级标题\r\r分Section的功能，下面经常接的是正文或直接的三级标题\r\r### 三级标题\r\r正文，需要和二级标题在远距离明显区分\r\r#### 四级标题\r\r正文，一般不用\r\r##### 五级标题\r\r正文，一般不用\r\r###### 六级标题\r\r正文，图一乐。下面是夹杂在正文中的列表。\r\r- Item1\r- Item2\r- Item3\r\r完毕","description":"测试 draft 属性","keywords":"","date":"2023-08-30 10:54"},{"id":"20230822-Super_resolution_models_and_tools.md","title":"图像超分辨率工具推荐","content":"~~推特~~，现在叫X.com，是我的桌面壁纸来源，但是推特的图压缩得非常糊，喜欢的动画人基本也只传 1080p 图，导致壁纸糊上加糊。因此需要使用 AI 放大模型进行图像处理。\r\r- 放大效果外链预览：[Comparison](https://imgsli.com/MjAwMDcx)\r- 细节对比：  \r![](https://raw.githubusercontent.com/NamiLing/upic/master/picgo/comparison.jpg)\r\r文章分为三个部分：\r\r- 图像处理工具\r- AI 图像放大模型\r- 如何使用\r\r## 图像处理工具\r\r### 1. [chaiNNer](https://github.com/chaiNNer-org/chaiNNer)\r\r一个无代码的图像处理自动化工具，可以实现批量改大小、调色、压缩、拼接等等等。同时也支持用 AI 对图像放大，也能接入 Stable Diffusion 的工作节点，上限非常高。缺点没有内置模板，即便是很小的功能（比如文件批量重命名）都需要自己创建。\r\r应用内置使用文档，不过不看文档也能一眼知道怎么用。\r\r**只有英文，没有中文。**\r\r- 传送门：[chaiNNer](https://chainner.app/)\r\r### 2. [imagestool](https://imagestool.com/zh_CN/)\r\r对于单张图和 gif 的常见处理小工具合集，网页打开即用，完全本地运行无隐私问题。特点是非常易用，支持小批量处理，支持 pipline，也就是说如果想在调整大小后转换格式再压缩，不需要每一步都上传下载图片，可以处理完每一步直接选下一步，只下载最终的处理结果。\r\r- 传送门：[imagestool](https://imagestool.com/zh_CN/)\r\r## AI 图像放大模型\r\r超分辨率成像(Super-Resolution，简称 SR) 是一种提高图像分辨率的技术，通俗的叫法就是图像放大。如果你曾经使用过 Photoshop 对小图进行放大，会发现放大后的边缘总是非常模糊，并且用锐化等操作无法弥补，这是传统方法的在图像放大上的缺陷。\r\r但是神经网络（Neural Networks，简称NN）的出现对图像放大的效果带来了极大的提升，几年前就已经有不少 AI 图像放大的应用，但最近两年的模型效果尤其好。下面介绍几个现阶段应用上比较火的模型。\r\r### 1. [SwinIR](https://github.com/JingyunLiang/SwinIR)\r\r2021年基于 Transformer 的图像超分辨率模型，放大任何图片的效果都非常好。风格偏锐利且干净，且参数少，处理速度快。此模型分为 3 类，经典图像超分辨率（Classical image SR）、轻量级图像超分辨率（Lightweight image SR）、真实世界图像超分辨率（Real-world image SR）。\r\r- 下载链接： [Release  · JingyunLiang/SwinIR](https://github.com/JingyunLiang/SwinIR/releases/tag/v0.0)\r\r可下载的版本很多，不知道选哪个的就选 [001_classicalSR_DIV2K_s48w8_SwinIR-M_x4.pth](https://github.com/JingyunLiang/SwinIR/releases/download/v0.0/001_classicalSR_DIV2K_s48w8_SwinIR-M_x4.pth) ，这个为4倍放大的模型，也是 Stable Diffusion 的 SwinIR 预置模型。\r\r### 2. [Real-ESRGAN](https://github.com/xinntao/Real-ESRGAN)\r\r2021年的经典图像超分辨率模型，这论文出来后大家疯狂在它基础上卷，基于 ESRGAN 改进的模型和论文非常非常多。不过最初的版本也已经足够好用。\r\r下载链接：[Releases · xinntao/Real-ESRGAN](https://github.com/xinntao/Real-ESRGAN/releases)\r\r依旧版本很多，不知道下哪个的下载 [RealESRNet_x4plus.pth](https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.1/RealESRNet_x4plus.pth) 即可。\r\r### 3. 4x-AnimeSharp\r\r基于 ESRGAN 架构的动漫类放大，~~可能由于训练集选得好~~，在众多动漫类放大中它可以很好地处理景深，其他的Anime模型多少在景深部分会有一些清晰过度的问题，包括著名的 [RealESRGAN 动漫模型](https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.2.4/RealESRGAN_x4plus_anime_6B.pth)\r\r- 下载链接：[AnimeSharp - OpenModelDB](https://openmodeldb.info/models/4x-AnimeSharp)\r\r OpenModelDB.info 上有更多的微调模型，可以试试。总体来说，AI 放大的图像质量目前来说还是乍一看可以，涉及商用美术的话质量仍然不过关。~~如果商用美术能过关，岂不是能画糊图然后丢AI出高精图了。~~ 作为壁纸放大非常合适，即便是补充的细节不能推敲，但把像素精度补齐到屏幕分辨率带来的视觉提升也是非常大的。4k壁纸就是比1080p看起来舒服。\r\r## 如何使用\r\r使用 chaiNNer 时可照抄下图结构，使用 4x-AnimeSharp 模型放大原图、重命名图片并保存。\r\r![chaiNNer](https://raw.githubusercontent.com/NamiLing/upic/master/picgo/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-22%20213633.jpg)\r\r如果使用的是 [stable-diffusion-webui](https://github.com/AUTOMATIC1111/stable-diffusion-webui) ，Extra Network 选项卡中也有预置模型，可以使用 SwinIR 和 ESRGAN。\r\r---\r\r可能对您有用的资料：\r\r- [4x-AnimeSharp](https://openmodeldb.info/models/4x-AnimeSharp)\r- [Interactive Visual Comparison of Upscaling Models](https://phhofm.github.io/upscale/)\r\r---\r\rPS：我在尽力不要让语句变得不要和写论文一样啰嗦，但总是难以避免……以及我原本想写个内置的交互式组件来演示图像前后的区别，这也是我最初架构博客时选用 mdx 的原因，但真的开始写的时候……怎么还要多写一个东西？好麻烦！还要考虑 rss 兼容的问题，之后再补吧，现在写什么都像坐牢。\r\rPPS：强烈建议无代码应用都能开发个template market……","description":"AI图像放大模型+工具推荐","keywords":"AI，图像处理，图像放大，超分辨率，CV, SR","date":"2023-08-23 06:20"},{"id":"2023-02-20-stable-diffusion-AI-experience.md","title":"Stable Diffusion AI 绘画的实用经验与总结","content":"2023-03-03：待大量补充和修订。\r\r------\r\r进阶经验，非科普。分为五个部分：模型选择，分辨率调整，采样方法，ControlNet，Lora概述。\r\r此文章涉及多平台发布，由于生成类 AI 的争议，文中无外链推荐。\r\r## 一、模型选择\r\r模型影响构图和笔触和色彩，决定成图的平均水平。社区经常都在换流行的模型，还是根据需求定，huggingface 和 civitai 上很多。\r\r二次元目前主流三家 Anything Orange Counterfeit 。\r\r目前有不少混合了 2D 和 3D 的 2.5D 模型，用来出 cos 的，个人不喜欢。\r\r下图模型为 pastel-mix，图片画质已严重压缩（看不见则需要开代理，如果你用的 Innoreader 手机版阅读此文，大概率被放头图了）\r\r![pastel-mix](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/00153-2596022983-masterpiece,%20best%20quality,%20ultra-detailed,%20illustration,%201boy,%20Link%20in%20Breath%20of%20the%20wild,%20sun%20shine,water,%20on%20back,%20lying%20in%20wa.jpg)\r\r### 模型精度选择\r\rfp-16(2G)，fp-32(4G)，full(7G) 用于生产没有肉眼可见的区别。full 主要是训练用的。fp16 生产够用了，快，占用小。\r\rbf-16(2G) 相对 fp-16 会损失一小部分细节，不推荐，会发布 bf-16 版本的模型也较少。\r\r### VAE权重网络\r\r影响色彩，主观效果是增加饱和度（比修图软件饱和度增强好太多）。目前流行的 VAE 就两个，一个 Waifu 的一个 Anything 的，很多带 vae 模型都是用的这两个改了个名字。\r\r下图为 mix-pro-v3-fp16 模型，叠加了其配套的 WD vae 的 效果。\r\r![Mix-pro-v3](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/00045-311454338-Original%20Characters,%201boy,%20sea%20shore,%20%20pastel-full.jpg)\r\r### Prompt\r\rprompt（提示词）是玄学范围。不同模型的 prompt 词库不一，目前主流的词库有两个\r\r- 适用 SD v1.x 及其衍生模型的 lexica\r- 适用二次元模型的 Danbooru。\r\r对于二次元模型，Prompt 指定物体，调整动作、指定颜色比较容易。取决于模型的泛化能力。\r\rPrompt 难以精确控制画风，所以尽管上限非常高，但主流越来越不倾向于用大量 Prompt 叠 buf，转成微调模型以达成精确需求。\r\r在两个月前关于 Prompt 研究的文档就已经非常多了，这里不做推荐，因为不看文档，直接翻译成英文大概率是有效的。\r\r### 文生图与图生图\r\r文生图与图生图本质上没有什么不同，文生图只是将图片输入换成了一张随机的噪声图。\r\r## 二、分辨率\r\r不同模型在生成时有最佳的分辨率，大部分都在 512px 左右，不超过 1024px。\r\r提高分辨率不仅是单纯放大图片，AI 能够用模型细化图片。\r\r### 图生图\r\rimg2img(图生图) 大部分时候被用来衍生，但是其效果最好的是将 txt2img 的低分辨率图放大（用同一个seed）。\r\r在 web-ui 中，仅缩放(just-resize)为无 AI 的放大算法处理。 AI 放大使用的 Latent 方法即将被归入 Upscaler，也就是下面说的 Hires fix。\r\r### Hires fix\r\rHires fix（高清修复）的作用是用 AI 从小图生成高分辨率图，处理用得好可以提高大幅提高图片上限。upscaler（放大器）可选几种放大方法，其中的 Latent 就是 SD 的画图方法，文生图与图生图均是这个方法。\r\r在 web-ui 中， 默认只有 txt2img 可用，因为 img2img 本身就可以做图片放大。另外，有专门的 upscaler 选项卡。\r\r使用 Latent upscaler (图生图) 放大到高分辨率图涉及局部重绘，部分模型支持较好，如 Pastel。但在 512 px 完成度就很高的模型上通常没有效果，或者更差（比如炫彩厚涂），这种用 GAN 类 Upscaler 直接放大比较好。\r\r值得注意的是 web-ui 的 Hires fix 有两版算法，目前 txt2img 是新版， img2img是旧版，效果有一些小差别，很难比较好坏。\r\r## 三、采样方法\r\rSampler（采样方法） 决定笔触和结构的稳定性。常用的有：\r\r- Euler a 是一个规整稳定的采样方法，出的图较平滑\r- DDIM 是一个过程不算稳定的采样方法，通常看起来比 Euler a 细节更多\r- DPM++ 2M Karas，最近在用的，过程稳定但有细节\r\r有部分 Sampler 对高分辨率（1024px 以上）支持不好。\r\r## 四、 ControlNet\r\rControlNet 目前是一个需要额外安装的插件，可以用于给线稿上色并细化，或从草图细化。\r\r你的草图可以决定的是：\r\r- 60%-100% 的线条位置（构图）\r- 主要色块位置。需要搭配图生图，并且色块越碎越好，需要提前做好整体的光影效果。因为 大部分 AI 只会画整，会画碎的比较少（Pastel 会画碎）。\r\r细化风格（画风）由模型决定，不由你的草稿决定。模型风格对于画风影响非常关键。Prompt 也可以影响画风。\r\r细化内容（画的具体是什么）由 Prompt 、草稿、模型共同决定，调整 CFG、Denoise 、 ControlNet 的 Weight 可改变三者比例。\r\r下图为自己的较草的线稿使用 ControlNet 与 Anything V3.0 上色：\r\r![Control-Net](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/00275-3225619170-masterpiece,%20best%20quality,%20illustration,face,%20right%20hand,%20atomespheric,%20cold,%20sunshine,%20sky,,%20high%20detail,%20flowers%20and%20leafs.jpg)\r\r（这个东西出名是因为某博说 ControlNet 初衷是洗稿……之前 Pixiv 也出过线稿上色的 AI，只是效果好和不好的差别，怎么没人说是搭配 PS 的线稿提取功能洗稿）\r\r## 五、Lora\r\rLora 是一种训练小模型的方法，可以在 15 张图以上生成稳定的单个角色图。\r\r已有大量角色图积累的流水线漫画苦力会比较省事，搭配 ControlNet 可生成固定姿势，或者使用线稿稳定地上色。但对于连续动作的细微差别不太行，细节演出表现依旧需要依赖线稿，或手动重绘\r\r训练过程分为裁剪、自动打标、训练，最终生成约 100M 左右的 Lora 网络。Web-ui 已自带。\r\r## 写在后面\r\r风格迁移渐渐成熟了，过拟合的问题在逐渐减少。减少过拟合的最终解决思路，还是把端到端的网络，按需求拆成了人为可控的 pipline。个人认为 AI 如果真的要作为工具，模块化的 pipline 是终点。\r\r直接出成图的是对已有作品的模拟，抽抽卡，融入不到创意的工作流。\r\r但是在发展好之前，地球可能已经枯竭了。\r\r![pastel-mix](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/00162-1748765688-masterpiece,%20best%20quality,%20ultra-detailed,%20illustration,%201boy,%20Link%20in%20Breath%20of%20the%20wild,%20stronde%20hair,%20sun%20shine,water,%20emotio.jpg)","description":"AI 画画现状","keywords":"AI绘画, stable-diffusion, AI绘图, AI画画","date":"2023-02-21 08:00"},{"id":"dontstarvetogether-linux-server.md","title":"部署饥荒联机版Linux服务器","content":"此文为 Docker 版饥荒联机版服务器在 CentOS 下的部署教程。\r\r> 为什么要部署Linux服务器？因为玩到后面，只要一联机连主机都卡，闲得想试\r\r[这个中文教程](https://www.roci.ltd/dstserver/)讲了native steam版的安装方法，包括了Cent OS缺少的库，坑全踩了一遍写得十分详细。官方文档实在太拉，基本就是没有文档，像跨平台缺库这种事情也没有解决，没有脚本。不过教程中对于网络环境问题与mod的配置方法提得不多。\r\r我这里使用的是[Docker版本](https://hub.docker.com/r/jamesits/dst-server)。优点是\r\r- 国内的云平台对于Dockerhub的加速后走内网流量，不使用公网流量下载镜像。而且国内的服务器公网下载速度堪忧。\r- Docker版本的文档写得对用户友好，易上手\r- 文件管理集中，比较方便。原版服务器的mod和存档是分开放的\r\r也有一些在国内环境下比较要命的缺点\r\r- 网络环境原因，无法下载创意工坊mod。最近靠改 hosts 也不行了。\r- 如果想开代理下载，docker容器开代理（设置环境变量）非常麻烦，具体来讲\r  1. 如果每次开关代理都创建一个新的容器，Steam和游戏文件的更新都得再触发一次，又消耗流量又慢\r  2. 如果动态修改容器的配置文件，docker需要重启才能生效，所有docker服务都得宕机一会儿\r\r## 准备\r\r- 一台至少2G内存的服务器\r- 使用ssh连接服务器、传输并管理文件的技能\r\r## Docker的安装\r\r由于涉及到Docker镜像和Dockerhub加速的问题，具体安装步骤建议看docker的文档和各个云平台。\r\r我使用的腾讯云，见[安装 Docker 并配置镜像加速源](https://cloud.tencent.com/document/product/1207/45596)，大约花费2分钟。\r\r## 服务器防火墙设置\r\r需要放行 10999，11000，12346，12347 这四个端口的UDP流量。\r\r- 在国内云平台的控制台-防火墙中，放行服务器的这四个端口\r- 如果服务器上iptables有流量拦截，也需要放行\r\r## 饥荒服务器镜像的启动\r\r```bash\rmkdir ${HOME}/Klei # 创建存放数据有文件夹\r\r# 拉取镜像并在前台启动\r# 由于Steam要更新，根据网络环境可能要等比较久的时间\r# 如果实在无法连接，再考虑给容器挂个代理下载。但总体不建议容器挂代理，因为我不清楚挂代理后steam是连接到服务器的游戏端口还是连到代理的端口上去了，取消容器的代理也非常麻烦。\rdocker run --name dst -v ${HOME}/Klei:/data -p 10999-11000:10999-11000/udp -p 12346-12347:12346-12347/udp -it jamesits/dst-server:latest\r```\r\r以上命令执行期间，可以去准备一下游戏存档和Mod相关文件。\r\r## 准备游戏存档和Mod\r\r我使用的Mac，饥荒的游戏文件相关目录位于\r\r```bash\r# 游戏存档\rSAVE_DIR=\"~/Documents/Klei/DoNotStarveTogether/324927772/Cluster_1\"\r# mod下载目录\rMODS_DIR=\"~/Library/Application Support/Steam/steamapps/common/Don't Starve Together/dontstarve_steam.app/Contents/mods\" #\r\rcd $SAVE_DIR # 进入存档目录\r```\r\rwindows可以在饥荒游戏内点数据打开游戏存档，并在Steam中查看游戏的安装目录。\r\r### 准备存档信息\r\r点开[饥荒的账号](https://accounts.klei.com/account/info)，记下 **Klei User ID**。如果没有就注册一个。\r\r然后，新建`adminlist.txt`，并写入你的**Klei User ID。**\r\r```bash\r$ vim adminlist.txt\r# 写入以下内容\r你的Klei User ID\r```\r\r点开[自建饥荒服务器的页面](https://accounts.klei.com/account/game/servers?game=DontStarveTogether)，新建一个服务器，记下生成的Server Token，其他不用管。\r\r然后，新建 `cluster_token.txt`，并写入Server Token。\r\r```bash\r$ vim cluster_token.txt\r# 写入以下内容\r你的Server Token\r```\r\r### 准备mods\r\r不开mod的可以跳过这一步。\r\r由于国内环境没法下载mod，需要把对应的mod文件复制过来。我为了方便就全复制了\r\r```bash\rcp -r \"$MODS_DIR\" mods\r```\r\r先查看一下目前的存档开了哪些mod。\r\r```bash\r$ cat Master/modoverrides.lua\r# 开启的mod\rreturn {\r  [\"workshop-1172839635\"]={ configuration_options={ icebox_freeze=\"0.5\" }, enabled=true },\r  [\"workshop-1294206358\"]={ configuration_options={  }, enabled=true },\r}\r```\r\r然后，编辑 `mods/dedicated_server_mods_setup.lua` 文件，写入上面的mod编号\r\r```bash\r$ vim mods/dedicated_server_mods_setup.lua\r# 写入以下内容\rServerModSetup(\"workshop-1294206358\")\rServerModSetup(\"workshop-1595631294\")\r```\r\r至此，游戏存档和mods就准备好了。\r\r## 转移游戏存档和Mods至服务器\r\r上传游戏存档到服务器。打包和上传文件我一般使用GUI操作，用命令行的话是这样\r\r```bash\rcd ~/Documents/Klei/DoNotStarveTogether/324927772/\rtar -cvf Cluster_1.tar.gz Cluster_1 \rscp Cluster_1.tar.gz root@myserver:/Klei/\r```\r\r如果之前的服务器连接还在，等无新日志输出后使用control+c退出容器。如果已断开连接，重新用ssh登录服务器。\r\r然后可以看到在服务器的 `~/Klei/DoNotStarveTogether` 中有了一个 `Cluster_1` 存档。\r\r**转移游戏存档时，需要注意有两种情况（来自[文档](https://hub.docker.com/r/jamesits/dst-server)）**\r\r第一种情况是，如果自己的存档开启了洞穴，把自己的存档覆盖过去即可。\r\r```bash\rrm -rf Cluster_1\rtar -xvf Cluster_1.tar.gz\r```\r\r第二种情况是，自己的存档没有开启洞穴，需要\r\r1. 在自己的电脑中，存档的上一级有个 `client_save` 。复制下面的除了 `session` 外的所有文件到服务器的 `Cluster_1/save` 。\r2. 自己存档中的 `Cluster_1/save/session` 需要删除，其他文件可以直接覆盖\r\r存档覆盖完毕后，启动容器\r\r```bash\rdocker start -a dst\r# 如果最后输出了 Sim Pause 就代表 OK 了，按 ctrl + c 退出，容器继续后台运行\r```\r\r我第一次装Mod启动时发生了一个莫名其妙的 **Segmentation fault**，程序退出了，但是第二次启动就好了。搜了一下[相关issue](https://github.com/Jamesits/docker-dst-server/issues/48)，完全相同的情况，也是CentOS，偶尔发生，难稳定复现。\r\r## 游玩\r\r之前自己的存档叫什么名字就搜什么名字，加入就完事，好好玩吧w\r\r------\r\r参考资料：\r\r- [jamesits/dst-server](https://hub.docker.com/r/jamesits/dst-server)\r- [docker-dst-server issue](https://github.com/Jamesits/docker-dst-server/issues)\r- [饥荒独立服务器入门级快速搭建](https://www.roci.ltd/dstserver/)\r- [Guides/Don't Starve Together Dedicated Servers - Fandom](https://dontstarve.fandom.com/wiki/Guides/Don’t_Starve_Together_Dedicated_Servers)","description":"此文为 Docker 版饥荒联机版服务器在 CentOS 下的部署教程。","keywords":"游戏, 服务器, Linux, Docker, 摸鱼, 饥荒联机版","date":"2022-12-28 08:00"},{"id":"记一道题排列组合题解.md","title":"记一道题排列组合题解","content":"难得在网上遇到有认真在做题的人，在此表示深深的感谢。另外个人不太会写题解类的文，权当一个记事了。\r\n\r\n## 题目\r\n\r\n![8B414946-F4D4-479C-9092-9AEA8EC26FA3.jpeg](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/8B414946-F4D4-479C-9092-9AEA8EC26FA3.jpeg)\r\n\r\n题来自 tg 里玩 ai 的小水群，很多人第一眼是想全排列剪枝……阶乘的复杂度得瞎了。\r\n\r\n不过看到求方案数，帮人面试时被动态规划虐过的直觉在告诉我，凡事让写方案数不枚举方案的，很可能能写动态规划。\r\n\r\n于是从动态规划的方面想去了。\r\n\r\n## 关于素数\r\n\r\n这个题有一个非常奇怪的地方，就是要和为素数。我不禁想，和为素数是对解题方法有什么加成吗？\r\n\r\n（其实因为我最初看走眼了，以为是子集里所有数为素数，且和为素数，还以为素数和有什么定理）\r\n\r\n素数的特殊点在于乘法分解，至于加法上与一般数有什么不同，以凡人视角未曾听说。并且这题还并不限于子集中取用什么数。\r\n\r\n综上，和为素数对解题方法不仅没有什么加成，反而是多了个如何判断一个数是不是素数的问题。\r\n\r\n至于如何判断素数，在 Leetcode 204，略，也没什么很省时间的方法，就是筛，不算简单。\r\n\r\n## 子集动态规划\r\n\r\n既然素数对于解题思路没有加成，就按一般数处理，很快写出了下面的思路：\r\n\r\n1. 一维dp中存下和为当前数的方案数\r\n2. 遍历更新dp，把新数n拆分成已有数+余数，按余数从大到小（已有数从小到大），把所有已有数的拆分方案加起来，再+1，即可得到当前数的子集数。\r\n   1. 需要注意的是，为了保证不重复，也就是保证子集序列递增，已有数不会超过n/2（余数不会小于n/2）\r\n3. 更新dp时，也要计算新数n是否为质数，是的话把其子集数加入最终结果（算质数见leetcode 204）\r\n4. 由于取值范围1-2000，最大和为1000^2，100w，也是dp要遍历的次数。\r\n\r\n下面的图是在解释什么叫“遍历但不用枚举子集”时写的，也是上述dp的步骤。\r\n\r\n![img](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/2E06B8C3-1DF4-492D-A009-55F4D7A041CE.jpeg)\r\n\r\n发题人仔细看了，并且手动枚举了10个数后，指出，我这会漏掉10=1+2+3+4。（后面自己发现这样还漏了145和235，后面越漏越多）\r\n\r\n仔细回顾了一下之前的思路，发现我的问题出在递增的判断上。我当时认为保证递增序列，只要保证已有数小于余数就行，所以余数>2/n。\r\n\r\n但不是的，比如n=10时，已有数为6，余数为4，6拆分为1+2+3就行，1234还是序列递增的。6拆分为2+4、1+5就不行。\r\n\r\n归根结底就是我只把余数算了较大的一半，因为余数较大的一半肯定能保证序列递增。如果不想漏情况，余数要全部遍历，但怎么保证序列递增呢？比如6+4，如何只拆到1+2+3+4，不算1+5+4和2+4+4呢？\r\n\r\n于是更新了一下递增的条件：\r\n\r\n- 已有数的拆分的子序列最大数小于余数，则拆分方案合法\r\n\r\n再更新dp时余数范围：\r\n\r\n- 余数从n取到1，分别计算子集数后再sum。\r\n\r\n这样可以保证思路没问题了，但这个“已有数的拆分的子序列最大数小于余数”，明显当前dp只统计了子集数，根本不知道各个子集中具体最大数的情况。因此，我改成了个二维dp，含义和过程如下图：\r\n\r\n![img](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/6D139DD5-A95F-4467-BA58-3B5E61D9207D.jpeg)\r\n\r\n简单总结一下，整个问题我简化到了求“和为 n 的子集数”，并利用二维动规从 1 求到 n。 n 是不是素数单独算的。\r\n\r\n并且发现，其实更新每一行时，都是把上一行为止的方阵以“/”方向45度拆开，mask掉右边部分，按行求和后，从右往左地写进下一行，还能用gpu加个速（不是）。\r\n\r\n## 另一种解法\r\n\r\n发题人在看了我的新方案后，说在上面看到了类似杨辉三角之类的东西。并且得出了另一个方案：\r\n\r\n> 和为 n 的子集组合数，为多项式 (x^n+1)(x^(n-1)+1)(x^(n-2)+1)…(x+1) 的 x^n 项系数\r\n\r\n![多项式展开](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/IMG_5434.JPG)\r\n\r\n（我本来没理解，是死缠烂打地问才知道他在说什么）\r\n\r\n仔细一想真的是这个理， x^n 对应的多项式系数就是排列组合到 n 的所有方案数了，也天然没有重复用数的问题。怎么想到的，神。\r\n\r\n所以现在问题是：怎么求 (x^n+1)(x^(n-1)+1)(x^(n-2)+1)…(x+1)的多项式系数。\r\n\r\n（当时已经不想动脑了，又是死缠烂打地问）\r\n\r\n其实迭代就能算，因为 F(n) = x^n • F(n-1) + F(n-1)，对应系数直接挪位置后复制粘贴再相加就好了。\r\n\r\n## 空间复杂度\r\n\r\n这里有点难以定义 n 具体指哪个，默认 n = 2000 。\r\n\r\n我的解法是要 1000^4 的空间去存方案数，矩阵中有很多地方是空的，有点浪费。\r\n\r\n后者的解法要1000^2 空间去存多项式系数。省很多。\r\n\r\n## 时间复杂度\r\n\r\n以我的动规方法，时间复杂度为在 O(n^6)，准确说是O(n^2(n^2+1)(2n^2+1)/6)，因为要算到 (n/2)^2，且内部还有已填矩阵按行遍历。\r\n\r\n以后者的的解法，时间复杂度为 O(n^3)，因为多项式的 n 需要到 (n/2)^2。\r\n\r\n线性筛到 (n/2)^2 的素数, 时间复杂度为 O(n^2)。\r\n\r\n------\r\n\r\n总得来说还是数学好的强啊。\r\n\r\n另外还有一个人非让我看完一个 30 分钟的高斯素数判断法，结果我一直在想 dp，搞得他怨念深重 hh","description":"难得在网上遇到有认真在做题的人，在此表示深深的感谢。另外个人不太会写题解类的文，权当一个记事了。","keywords":"数学, 算法","date":"2022-11-18 08:00"},{"id":"rust-closure-and-ownership.md","title":"理解 Rust 闭包与环境变量所有权","content":"本文将以（自认为）最简单易懂的方式讲述 Rust 中的闭包与环境变量所有权的关系。在现存的类似中文教程中，要么语言表述歧义太大，逻辑上难以理清；要么试图把事情总结得过于复杂。实际上闭包对于环境变量所有权的处理规则是非常简单的。\r\n\r\n阅读本文需要的基础： Rust 变量的所有权、引用与借用、函数、traits。\r\n\r\n## 什么是 Rust 的闭包\r\n\r\nRust 中的闭包是**一种函数**。与 Rust 普通函数不同，它可以**捕获函数外部的变量并使用**。\r\n\r\n基本语法：`|参数列表| {函数体}`\r\n\r\n```rust\r\nfn main() {\r\n    let x = 1;\r\n    let sum = |y: i32| { x + y }; // 说明： 闭包 sum 接收一个参数 y，且捕获前面的 x = 1, 返回 x + y\r\n    println!(\"{}\", sum(99)); // 输出 100\r\n\r\n    let sum2 = |y :i32| x + y + 1; // 也可以省略花括号\r\n    println!(\"{}\", sum2(99)); // 输出 101\r\n}\r\n```\r\n\r\n> 说明： 闭包 sum 接收一个参数 y，返回 x + y。其中 x 是第一行定义的 `let x = 1;` ，为闭包外部的变量。\r\n\r\n像 `x` 这样在定义在闭包外部、可被闭包直接访问的变量，我们称为“**环境变量**”。\r\n\r\n## 闭包中环境变量的所有权\r\n\r\n有 rust 基础的人应该知道，普通的 rust 函数的传入参数有三种形式\r\n\r\n1. 所有权 move（默认行为）。\r\n2. 可变借用，形式为 `&mut param`\r\n3. 不可变借用 ，形式为 `&param`\r\n\r\n> 上述为 rust 所有权基础知识，不再赘述。\r\n\r\n普通的 rust 函数可以使用参数，但无法使用环境变量。闭包则加上了 **捕获当前环境变量** 的功能。\r\n\r\n**捕获当前环境变量** 仅仅是指闭包 “知道有哪些环境变量”。闭包在使用环境变量时，依然可能会对环境变量执行三种操作：\r\n\r\n1. 所有权 move\r\n2. 可变借用\r\n3. 不可变借用\r\n\r\n具体是执行了哪种操作呢？这个问题就比较复杂了，我们可以从上面的例子出发。\r\n\r\n回顾上面的例子，对于环境变量 `x` ，首先排除了所有权 move。\r\n\r\n```rust\r\n    let x = 1;\r\n    let sum = |y: i32| { x + y }; // 使用了 x\r\n    println!(\"{}\", sum(99)); // 输出 100\r\n\r\n    let sum2 = |y :i32| x + y + 1; // 再次使用了 x\r\n    println!(\"{}\", sum2(99)); // 输出 101\r\n```\r\n\r\n> 说明： `x` 在 sum1 中使用后，还能在 sum2 中再次使用，说明 `x` 所有权没有 move。\r\n\r\n实际上，上述例子的 `x` 在闭包中是作为 **不可变借用** 使用的，**因为这个闭包实现了 `Fn` trait**。\r\n\r\n## 闭包的三种 traits\r\n\r\n闭包是一种函数，它的三种 traits 恰好对应了三种处理所有权的方式。\r\n\r\n三种 traits 如下（划重点，请背下来）：\r\n\r\n1. `FnOnce`：表示此闭包调用时会获取环境变量所有权（**所有权 move**)。因此取名 `FnOnce`，表示此闭包只能执行一次，因为再次执行时，环境变量可能由于之前所有权 move 过，已经没法用了。\r\n2. `FnMut` ：表示此闭包调用时会对环境变量进行**可变借用**，可能会修改环境变量\r\n3. `Fn` ： 表示此闭包调用时会对环境变量进行**不可变借用**，不会修改环境变量\r\n\r\n并且，**一个闭包可以同时实现多个 traits**。比如实现了 `Fn` 的闭包也一定实现了 `FnOnce` （后续解释）。\r\n\r\n上面是从“对环境变量如何处理所有权” 来解释三个 traits，大部分教程也是这么写，但个人并不推荐完全按这样去理解。因为上述表述中，三个 traits 看起来是互不重叠的（实际并非如此），导致可能会出现这样的疑问：\r\n\r\n> “实现了 `Fn` 的闭包说是对环境变量进行了不可变借用，那怎么还能同时实现 `FnOnce` ，去获取环境变量的所有权呢？到底是仅仅进行不可变借用，还是获取了所有权呢？”\r\n\r\n但是看三个 traits 的源代码，可以直接回答上述问题：是不可变借用。虽然确实也实现了 `FnOnce`（所有权 move） ，但并没有调用 `FnOnce` 的 call 函数，而是调用了 `Fn`(不可变借用) 的 call 函数。\r\n\r\n```rust\r\npub trait Fn<Args> : FnMut<Args> {\r\n    extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\r\n}\r\n\r\npub trait FnMut<Args> : FnOnce<Args> {\r\n    extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\r\n}\r\n\r\npub trait FnOnce<Args> {\r\n    type Output;\r\n\r\n    extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\r\n}\r\n```\r\n\r\n> 分析：如果 `FnOnce` 的 call 函数被调用，则直接传入了 `self` ，也就是获取了当前的环境变量的所有权，自然运行一次后回被销毁。而 `Fn` 的 call 函数传入的是不可变借用 `&self`。\r\n\r\n并且会发现， `Fn` 的前提是实现了 `FnMut` , `FnMut` 的前提是实现了 `FnOnce` 。\r\n\r\n- 从继承关系来讲： `Fn` 继承 `FnMut` 继承 `FnOnce`\r\n- 从访问变量的权限范围来讲： `Fn` < `FnMut` < `FnOnce`\r\n\r\n也可以说，**闭包就算实现了 `FnOnce` 也不一定会用到所有权 move，因为可能还实现了 `Fn` ，那么环境变量的所有权会按 `Fn` 处理**。\r\n\r\n------\r\n\r\n由于上述继承关系，如果定义一个普通函数，参数需要传入 `FnOnce` ，实际上也可以传入 `Fn` 。\r\n\r\n```rust\r\nfn fn_once<F>(func: F)\r\nwhere\r\n    F: FnOnce(usize) -> bool, // 传入闭包\r\n{\r\n    println!(\"{}\", func(3));\r\n}\r\n\r\nfn main() {\r\n    let x = vec![1, 2, 3];\r\n    let closure = |z|{z == x.len()}; // 此闭包实现了 Fn、 FnMut 和 FnOnce\r\n    fn_once(closure); // Fn 可传入标注为 FnOnce 的参数\r\n    println!(\"{:?}\", x); // x 还能用，所有权没转移\r\n\r\n    let closure2 = move |z|{z == x.len()}; //  此闭包只实现了 FnOnce，因为 x 被强制转移所有权到闭包内部\r\n    fn_once(closure2); // 传入 FnOnce\r\n    println!(\"{:?}\", x); // 报错，x 已经没了\r\n}\r\n```\r\n\r\n> 说明：fn_once 需要接收 `FnOnce` 的闭包作为参数，但传入 `Fn` 也是合理的，编译器也会按照 `Fn` 的调用方式处理为不可变借用，并不会因为标注着 `FnOnce` 而变成所有权 move。\r\n\r\n> 闭包对所有权的处理并不会随着标注改变，标注仅仅是为了取悦编译器 ——鲁迅\r\n\r\n## 闭包实现三种 traits\r\n\r\n上述例子中，直接标注了闭包实现了三种 traits，但并没有具体说明为什么这么写就是实现了三种 traits。这是本节需要说明的内容。\r\n\r\n闭包实现 traits 是**隐式**的。也就是说，你不用（也没法）标注这个闭包是实现的哪个 traits。具体实现了哪些 traits 是根据你的闭包写法决定的。\r\n\r\n1. 实现`FnOnce`\r\n\r\n所有的闭包都自动实现了 `FnOnce` 。不用特别做什么。\r\n\r\n但更普遍的情况是，定义闭包时会顺带实现 `Fn` 或者 `FnMut` 。如果想要只实现 `FnOnce`，不要实现另外两个，需要用 `move` 。这个关键字会强制转移所有权，使闭包无法满足 `FnMut` 和 `Fn` 的条件。\r\n\r\n- 例：只实现了 `FnOnce` 的闭包\r\n\r\n```rust\r\nfn main() {\r\n    let x = [1,2,3];\r\n    \r\n    let closure2 = move |z|{z == x.len()}; // 只实现了 FnOnce，所有权转移\r\n    closure2(2);\r\n    \r\n    println!(\"{:?}\", x); // 报错，x 所有权被转移\r\n}\r\n```\r\n\r\n2. 实现`FnMut`\r\n\r\n在闭包中修改外部变量，即实现了 `FnMut` （自然也实现了 `FnOnce` ），同时没有实现 `Fn` 。\r\n\r\n```rust\r\nfn main() {\r\n    let mut x = vec![1,2,3];\r\n\r\n    let mut closure = ||{x.push(4);}; // 修改了外部的 x, 实现了 FnMut， x 所有权没有转移\r\n    closure();\r\n    \r\n    println!(\"{:?}\", x);\r\n}\r\n```\r\n\r\n3. 实现`Fn`\r\n\r\n在闭包中访问外部变量，不做任何修改，即实现了 `Fn` （自然也实现了 `FnMut` 和 `FnOnce`）。\r\n\r\n```rust\r\nfn main() {\r\n    let s = String::new();\r\n\r\n    let update_string =  || println!(\"{}\",s); // 访问外部的 s, 实现了 Fn\r\n\r\n    exec(update_string);\r\n    exec1(update_string);\r\n    exec2(update_string);\r\n}\r\n\r\nfn exec<F: FnOnce()>(f: F)  { // Fn 也可以传到 FnOnce 类型\r\n    f() // 调用的是 Fn，所有权不会转移\r\n}\r\n\r\nfn exec1<F: FnMut()>(mut f: F)  { // Fn 也可以传到 FnMut 类型\r\n    f()\r\n}\r\n\r\nfn exec2<F: Fn()>(f: F)  {\r\n    f()\r\n}\r\n```\r\n\r\n## 闭包自身的所有权\r\n\r\n上述讨论的是闭包对于环境变量的所有权处理。那闭包自己呢？当闭包自己作为变量被传来传去时，是 Copy 还是所有权 Move？\r\n\r\n答案是，`Fn` 是 Copy，`FnMut` 和 `FnOnce` 是所有权 Move。\r\n\r\n```rust\r\nfn main() {\r\n    let x = vec![1,2,3];\r\n\r\n    let closure = |z:usize|{ z == x.len()}; // 实现了 Fn\r\n    outter(closure); // 通过\r\n    outter(closure); // 通过\r\n\r\n    let closure2 = |z:usize|{ x.push(4);z == x.len()}; // 实现了 FnMut\r\n    outter(closure2); // 通过\r\n    outter(closure2); // 报错, closure2 的所有权已被转移\r\n}\r\n\r\nfn outter<T>(mut func: T)\r\nwhere T: FnMut(usize) -> bool { // Fn 可以传到 FnMut 标注的参数上\r\n    let a = func;\r\n}\r\n```\r\n\r\n这是非常合理的，对应着 Rust 借用的规则\r\n\r\n> 在同一时间点，对于同一个变量，**要么**只能有一个可变借用(FnMut)，**要么**只能有**多个不可变借用**(Fn)。\r\n\r\n至于 `FnOnce`，对环境变量的访问权限这么大，还想 Copy？只能是所有权 move。\r\n\r\n## 一些建议\r\n\r\n如果遇到函数的参数也是一个函数，需要标注 trait 的场景，又不知道到底应该标注哪一个 trait，建议先标注 Fn ( 权限最小的 trait)，由编译器提示后再进行修改。\r\n\r\n另外，闭包的所有权部分并不推荐背书，尤其不推荐总结为正交规则。三个 traits 的区别与联系在代码层面非常简单且容易分析，总结为正交规则反而是把简单的事情复杂化，而且难记。\r\n\r\n如果仍然难懂，可评论提出，后续改进。","description":"B站反查用户弹幕小记","keywords":"Rust, 闭包, Closure, 所有权","date":"2022-06-14 08:00"},{"id":"PPT母版的制作与使用方法.md","title":"PPT母版的制作与使用方法","content":"由于我需要批量编辑 PPT 的样式，但 PPT 没有组件化样式的概念，所以开始学习用母版。虽然之前也用过，但始终不明白 PPT 的迷之逻辑，有时候是调整了母版但不生效，或者调整了局部结果别的地方也被影响了……今天才大概明白了一点（还是 Figma 和 Sketch 的逻辑好懂……）所以从我的角度说一下对 PPT 的模版理解。\r\r这个问题明显视频解释更好，但不太想做视频（躺）因为每次做视频前写大纲都要写好久……\r\r图源 Github，图片不显示挂代理 Please。\r\r## 概念解释（母版/版式/主题）\r\r### 打开母版\r\r母版的入口在“视图”→“幻灯片母版”。Mac 上的快捷键是 `command + alt + 1`。\r\r### 什么是母版和版式\r\r母版，是 PPT “主题” 的一部分，可以对多张幻灯片的排版进行统一的修改。\r\r我们日常制作的 PPT，都会基于一个母版（虽然很多人不去用）。在后面的内容中，对于日常制作的 PPT，我会称为“PPT 内容”。\r\r一个正常的母版包含着一个“**幻灯片母版**”和多个“**版式**”。\r\r![母版结构](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/Screen%20Shot%202021-11-11%20at%207.03.24%20PM.png)\r\r### 样式继承\r\r“**版式**” 会继承 “**幻灯片母版**”（以下简称为 **母版** ）中的一些元素的样式（包括位置、字体、大小、颜色等）。也就是说，只要更改 **母版** 里的样式，**版式**也会自动更新。\r\r所以是哪些元素可以被继承呢？在菜单栏里的“母版版式”中，有五个选项分别是\r\r- 标题\r- 正文\r- 日期和时间\r- 页脚\r- 页码\r\r以上就是所有样式可以被继承的元素。是的，你在母版上**只有这五个元素的样式可以被继承**。你可以尝试在“主题”选项中打开任何一个母版，会发现所有母版都是这五个元素。你无法擅自增加其他可以被继承的元素。\r\r并且以上显示的每个元素在母版上都只能设置一种样式，**你无法同时给标题设置两种样式。**也就是说，如果你有设置 **一级标题 + 二级标题** 样式的需求，你无法通过设置 **母版** 上的样式实现二级标题。你只能通过 **版式** 去设置二级标题。\r\r另外 **背景** 也可以被继承，但它属于在正式的 PPT 内容中不可编辑的元素。\r\r## 如何编辑元素样式\r\r选中元素，在“开始”选项里编辑即可。\r\r通常情况下，母版的排版需要设置得尽可能通用，之后的每个版式都将以母版为基准进行编辑。母版本身并不能直接被 PPT 内容所使用，做 PPT 能选择使用的只有继承了母版样式的 **版式**。\r\r## 版式如何继承母版\r\r### 继承标题样式\r\r选择一个版式（或点“插入版式”），给菜单里的“标题”打上勾。\r\r![标题继承](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/Screen%20Shot%202021-11-11%20at%207.35.09%20PM.png)\r\r需要注意的是，如果你在“开始”里添加一个文本框，移动到标题的位置，并不会被 PPT 识别成标题。从外面粘进来的文本框也一样，只会被识别为“一个普通的文本框”。之后批量更新标题的样式时，也并不会被更新。\r\r所以在版式中设置正确设置标题的方法只有这一个——给标题打上勾。\r\r**想设置二级标题怎么办？**\r\r母版没有二级标题，只能用下面说的占位符实现。\r\r### 继承正文样式\r\r继承正文的正确方法，是点击上一节图中的“插入占位符” ，有好几个选项，一般选内容就可以了。\r\r此占位符生成的文本框的样式和 **母版** 中完全一致。如果说 **母版** 的样式是全局变量，**版式** 中再次修改的样式就是局部变量。\r\r对于**修改过的部分**，母版里对正文的更新不会导致版式中的正文更新。比如：\r\r- 母版中的正文字号是 20px\r- 版式中的正文字号不变，但是给加粗了\r- 修改母版中的正文字号为 22px\r- 版式中的正文字号变成 22px，但仍然加粗。\r\r> ❗️注意：不要从“开始”里新建文本框！也不要从母版界面外粘贴进来！\r>\r> 原因同上，非占位符生成的文本框，对其样式的修改并不会真正改到“正文”的样式。使用的时候就会发现了，更新版式了但 PPT 内容样式完全没更新……这种情况就是因为版式中的文本框不是占位符生成的\r\r所以如何实现二级标题？\r\r- 添加一个占位符\r- 添加文本样式\r\r### 继承日期和时间、页脚、页码\r\r在版式中，给“页脚”打上勾，以上三者的样式都会被继承。\r\r![其他继承](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/Screen%20Shot%202021-11-11%20at%2011.06.48%20PM.png)\r\r## 使用版式\r\r退出“幻灯片母版”模式。在正常 PPT 内容的模式下，菜单栏“开始”中有个“版式”选项。在侧边栏选中一页（或多页） PPT，点击相应版式即可应用。\r\r![使用版式](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/image-20211111231429427.png)\r\r> 如果你原来的 PPT 内容不是依靠版式中的“占位框”排版，而是靠手动创建的文本框，那直接应用版式是不会修改你原来的内容的。\r>\r> 换言之，如果想要达到批量、统一的排版效果，需要尽可能地应用版式给出的占位框，而不是手动创建的文本框。\r\r在“**版式**”选项下面一个“**重置**”，意思是重置到当前版式初始的样式。\r\r比如，版式中的文字样式设置的是纯文本，而 PPT 内容里修改为列表。点击“**重置**”会使得列表项消失，再次成为纯文本。\r\r### 刷新修改后版式\r\r版式修改后，有时候并不会自动应用到 PPT 内容上去，这种情况通常发生于在 PPT 内容中对占位框的位置、大小等等进行了调整。\r\r比如在 PPT 内容中调整过的占位框位置，将不再随着版式更新。如果需要复位（让占位框位置能随着版式更新），可以再应用一次版式。\r\r### 正在使用的版式\r\r对于被用到了 PPT 内容上的版式，只有一个建议：**不要随便删除版式里的元素！**\r\r这会导致已经被应用了版式的内容格式被清除……你需要去重新应用版式。\r\r------\r\r写在后面的吐槽：排版这种事情 **Layout + 组件化** 不香吗！PPT 的样式复用实在太局限了。看祖传的 PPT 排版看得我脑壳疼，每一页的小标题位置都不一样，字体也是用得乱七八糟的。排版的四原则，“亲密”“对齐”“对比”“重复”，每一项都很重要。但一项都不满足这是怎么做到的！强迫症（伪）哭晕在厕所。\r\r其实还是祖传的习惯问题。比如 Word，小时候我也是有过一段时间空格排版居中……现在谁还空格排版居中，我见一个打一个（狗头）","description":"自从接触了纯函数，刷算法题刷得举步维艰。","keywords":"powerpoint, 母版","date":"2021-11-12 08:00"},{"id":"pure-function.md","title":"纯函数与算法","content":"自从接触了纯函数，刷算法题刷得举步维艰。\r\n\r\n> 什么是纯函数：同样的传入参数，一定可以得到相同的输出\r\n\r\n纯函数又被称为无副作用的函数，不会改变外部的状态。\r\n\r\n比如在 JS 中，array.slice()对数组的切片，返回的是一个新的数组，为纯函数。\r\n\r\n相对的，array.splice()对数组的插入与删除是对于原数组操作，不是纯函数。\r\n\r\n纯函数的意义，在于保证**不会对函数外部的状态有隐式的修改**。这在大型的、遍地都是状态的系统中非常重要。如果不保证纯函数，多个函数内部去修改了同一外部状态，容易出现意想不到的 Bug。\r\n\r\n## 图的邻接矩阵定义\r\n\r\n![img](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/g61Yvh.jpg)\r\n\r\n```ts\r\nlet map = {\r\n  point: ['V0', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7'],\r\n  side: [\r\n    [0, 1, 0, 1, 1, 0, 0, 0],\r\n    [1, 0, 1, 0, 1, 0, 0, 0],\r\n    [0, 1, 0, 0, 0, 1, 0, 0],\r\n    [1, 0, 0, 0, 0, 0, 1, 0],\r\n    [1, 1, 0, 0, 0, 0, 1, 0],\r\n    [0, 0, 1, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 1, 1, 0, 0, 1],\r\n    [0, 0, 0, 0, 0, 0, 1, 0],\r\n  ]\r\n}\r\n```\r\n\r\n## 图深度遍历的非纯函数实现\r\n\r\n```ts\r\n// DFS 深度优先遍历，从 第 index 个节点开始. visited 记录已访问的节点，全局共用一个 visited\r\nfunction DFStraverse(index: number = 0, visited = [map.point[0]]) {\r\n  if (visited.length === map.point.length) {\r\n    console.log(visited.toString())\r\n    return\r\n  }\r\n\r\n  map.side[index].forEach((isSide, targetv) => {\r\n    if (isSide && !visited.includes(map.point[targetv])) {\r\n      visited.push(map.point[targetv])\r\n      DFStraverse(targetv, visited)\r\n    }\r\n  })\r\n}\r\n```\r\n\r\n以上代码的问题：\r\n\r\n- map 定义在了外部，和别的函数共用\r\n- visited 是全局共用同一个，但却每次都要作为参数传入，逻辑上既不合也没有必要。并且作为函数参数（而不是全局变量），每次都对 visited 作了修改。这里还好，因为要的就是修改后的 visited（实际上是全局的 visited）。但如果题目是一个回溯问题，就需要管理 visited 的状态，在修改了之后，递归出栈时还得改回来。\r\n\r\n## 图深度遍历的纯函数实现\r\n\r\n```ts\r\n// DFS 深度优先遍历，从 第 index 个节点开始. visited 记录已访问的节点，全局共用一个 visited\r\n// 纯函数实现\r\nfunction DFStraverse(index: number, map: { point: string[], side: number[][] }) {\r\n  const visited = [map.point[index]]\r\n\r\n  function traverse(index: number) {\r\n    // 终止条件\r\n    if (visited.length === map.point.length) {\r\n      console.log(visited.toString())\r\n      return\r\n    }\r\n\r\n    map.side[index].forEach((isSide, targetv) => {\r\n      if (isSide && !visited.includes(map.point[targetv])) {\r\n        visited.push(map.point[targetv])\r\n        traverse(targetv)\r\n      }\r\n    })\r\n  }\r\n\r\n  traverse(index)\r\n}\r\n```\r\n\r\n使用闭包，把共用的 visited 固定为状态。内部再定义函数作递归。 map 也作为外层的参数传入，里面不去修改。\r\n\r\n------\r\n\r\n状态其实在各种算法里挺重要的。不少空间换时间的极限操作都要用到。\r\n\r\n算法注定是“不纯”的，能做的也不过是用闭包来保存状态。有时候觉得，纯不纯的也没有这么重要。","description":"自从接触了纯函数，刷算法题刷得举步维艰。","keywords":"纯函数, 算法","date":"2021-09-25 08:00"},{"id":"github-hosttools.md","title":"Github hosts 更新脚本(MAC)","content":"此工具已更新至 [Github](https://github.com/Sansui233/mac-githubhosts-autoupdate)。\r\r- 安装卸载脚本\r- 自动定时运行\r- 平时不占内存，运行时几乎不占内存\r\r原文如下：\r\r------\r\r最近 Github 墙得越来越厉害了。写了个 Shell 工具，连不上的时候就更新一下。可以配合 Alfred 使用。\r\r使用的 host 源来自[这里](https://github.com/JohyC/Hosts)。其实用 SwitchHosts 更新也行，但我真的讨厌 Electron App……麻了，现在听个歌写个笔记 1个多 G 的内存就没了。\r\r也可以用写成定时程序后台运行，加个 LaunchDaemon 文件就行，但，我不会打包 Mac App……文件这么散着分发也太 emmm，而且别人装起来也麻烦……\r\r麻烦归麻烦还是要写的……\r\r文件和说明已经上传到 [Github](https://github.com/Sansui233/mac-githubhosts-autoupdate)。\r\r- 下面这个文件保存取名为 `hoststool`\r- 赋予执行权限 `chmod +x hoststool`。如果为了执行起来方便，可以放进环境变量的目录（比如/usr/local/bin）\r- 然后就可以使用 `hoststool -u` 更新 host 了，运行结果会发系统通知。之前可以自己看看 hosts 内容有没有问题。这是有几率失败的，因为用的 gittee 的 host 源，经常会提示文件疑似违规……这种时候再请求一次就好了，第二次就不违规了。我也不知道为什么。\r\r（定时任务的部分在后面）\r\r```shell\r#!/bin/bash\rshowHelp() {\r\techo \"-u [source_url]\tupdate github hosts. You can specify a custom host source\"\r\techo \"-b\tbackup /etc/hosts to /etc/hosts.backup\"\r\techo \"-r\trecover hosts.backup to hosts\"\r\techo \"-f\tlist files in /etc which contains \\\"hosts\\\"\"\r}\r\r\r# ====== Main =====\rif [ $# -eq 0 ]; then showHelp;exit 0;fi\r\r# CONF\rdownload_dir=\"$HOME/etc/hoststool\"\rgithub_hosts=\"https://gitee.com/yuchi-shentang/GithubHosts/raw/main/hosts.txt\"\rif [ ! -d \"$download_dir\" ]; then\r  mkdir -p $download_dir\rfi\r\rcase \"$1\" in\r\t-f)\r\t\tls /etc | grep hosts;\r\t\texit 0;;\r\t-b) \r\t\tsudo cp /etc/hosts /etc/hosts.backup;\r\t\texit 0;;\r\t-r) \r\t\tsudo cp /etc/hosts.backup /etc/hosts;\r\t\texit 0;;\r\t-u) \r\t\tif [ $2 ]; then github_hosts=$2;fi\r\t\tcurl -o ${download_dir}/hosts ${github_hosts};\r\t\tif [ $? -ne 0 ]; then\r\t\t\techo \"[ERROR] 获取远程 host 出错，请尝试更换 source 或检查 download_dir 读写权限\"\r\t\t\tosascript -e 'display notification \"获取远程 host 出错，请尝试更换 source\" with title \"hoststool\"'\r\t\t\texit 1\r\t\tfi\r\t\t\r\t\t# Validate host content length\r\t\tlines=$(awk '{print NR}' ${download_dir}/hosts | tail -n1)\r\t\tif [ $lines -lt 10 ]\r\t\tthen\r\t\t\techo '[ERRO] 远程 Github Hosts 无效（Gitee源不稳定），通常重试即可'\r\t\t\tosascript -e 'display notification \"远程 Github Hosts 无效（Gitee源不稳定），通常重试即可\" with title \"hoststool\"'\r\t\t\trm ${download_dir}/hosts\r\t\t\texit 1\r\t\tfi\r\r\t\t# Remove old content\r\t\tbegin=$(sed -n  '/# ==== Github Start ====/=' /etc/hosts | awk 'NR==1{print}')\r\t\tend=$(sed -n  '/# ==== Github End ====/=' /etc/hosts | awk 'END{print}')\r\t\techo \"Removing old hosts. Start at line \\\"${begin}\\\", End at line \\\"${end}\\\"\"\r\t\tcat /etc/hosts | sed \"${begin},${end}d\" > ${download_dir}/hosts.tmp\r\t\tif [ $? -ne 0 ]; then\r\t\t\t## Trip Failed\r\t\t\techo \"[INFO] 当前 Host中 无旧的 Github Host 标记可清除\"\r\t\telse\r\t\t\t## Trip Succeed, move result\r\t\t\techo \"[INFO] 清除旧的 Github Host 标记\"\r\t\t\tsudo cp /etc/hosts /etc/hosts.backup && sudo cp ${download_dir}/hosts.tmp /etc/hosts;\r\t\tfi\r\r\t\t# Add new hosts\r\t\tsudo bash -c \"echo '# ==== Github Start ====' >> /etc/hosts\" # Add github host\r\t\tif [ $? -ne 0 ]; then\r\t\t\techo \"[ERROR] 无root权限，请尝试运行脚本手动输入密码\"\r\t\t\tosascript -e 'display notification \"无root权限，请尝试运行脚本手动输入密码\" with title \"hoststool\"'\r\t\t\trm ${download_dir}/hosts.tmp\r\t\t\trm ${download_dir}/hosts\r\t\t\texit 1;\r\t\tfi\r\t\tsudo bash -c \"echo \\\"# Updated at $(date)\\\" >> /etc/hosts\" # Add github host\r\t\tsudo bash -c \"cat ${download_dir}/hosts >> /etc/hosts\";\r\t\tsudo bash -c \"echo '# ==== Github End ====' >> /etc/hosts\"\r\t\trm ${download_dir}/hosts.tmp\r\t\trm ${download_dir}/hosts\r\r\t\techo \"[INFO] Github Hosts 块更新于 $(date)\"\r\t\tosascript -e 'display notification \"Github Hosts 已更新\" with title \"hoststool\"'\r\t\texit 0;;\r\t-h|--help)\r\t\tshowHelp;\r\t\texit 0;;\r\t*)\r\t\techo \"Unknown command\";\r\t\tshowHelp;\r\t\texit 1;;\resac\r```\r\r## 定时\r\r保存以下文件为 `hoststool.plist`。\r\r```plist\r<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\r<plist version=\"1.0\">\r<dict>\r<key>Label</key><string>hoststool</string>\r\r<key>ProgramArguments</key>\r<array>\r  <string>/usr/local/bin/hoststool</string>\r  <string>-u</string>\r</array>\r\r<key>RunAtLoad</key>\r<true/>\r\r<key>StartInterval</key>\r<integer>3600</integer>\r\r<key>StandardOutPath</key>\r<string>/Library/Logs/hoststool.log</string>\r\r<key>StandardErrorPath</key>\r<string>/Library/Logs/hoststool.log</string>\r\r</dict>\r</plist>\r```\r\r把 `/usr/local/bin` ，改成你存放脚本的路径。\r\r时间间隔为 3600 秒，可以自己修改。\r\r然后执行\r\r```shell\r$ sudo cp hoststool.plist /Library/LaunchDaemons\r$ sudo chown root:admin /Library/LaunchDaemons/hoststool.plist\r$ sudo launchctl load -w /Library/LaunchDaemons/hoststool.plist\r```\r\r执行完就会立刻运行一次脚本。由于定时任务是 root 用户不是个人用户，不会有通知，可以去 Console 看 log。","description":"Github hosts 更新脚本(MAC)","keywords":"Github, hosts, 更新, 脚本, Mac","date":"2021-08-07 08:00"},{"id":"网盘目录程序比较.md","title":"网盘目录程序比较","content":"比较一下私人网盘有关的程序\r\r- cloudreve\r- onemanager\r- zfile\r- nextcloud\r\r## 1. Cloudreve\r\r![cloudreve](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/demo.cloudreve.org_home.png)\r\r是个网盘程序，意思是在服务器上运行这个程序你就能成为了千度网盘的老板，可以拥有很多注册会员，还可以给他们收费，从此发家致富(bushi)。\r\r- 需要服务器和域名\r- 文档不全，社区还行，使用方法社区找\r- 是真的网盘，不是网盘列表程序，适合建站用，One Drive个人帐号不能用。\r- 没事记得备份 (不知道换服务器时迁移数据麻不麻烦，反正可以用Docker)\r\r## 2. One-manager\r\r![one manager](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/herooneindex.herokuapp.com_Ali_.png)\r\r网盘列表程序，阿里云或者 Onedrive 的网盘里的文件列出来，便于集中分享。单纯是个人分享站。\r\r- serverless，不需要服务器和域名，可白嫖资本家的服务\r- README 即文档，issue 即社区。README写得像随便记的笔记，好在也不复杂都有引导\r- 功能很多，除了基础的分享、预览、下载功能，可以上传重命名等进行管理(但是界面不好看导致体验并不好)。不依靠程序设定，而是把网盘里的文件作为功能性文件，挺方便的，再次部署时不用迁移任何数据\r- 可以预览的文件格式很多，没什么bug\r- 界面比较丑，前台可以换主题。但好看的功能不全，后台不能换主题(强行要换也是可以但可能功能不全)。\r\r## 3. zfile\r\r![zfile](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/zfile.jun6.net_.png)\r\r是网盘列表程序，同 One Manager。\r\r- 需要服务器和域名。但看情况也许可以 Serverless ？不清楚Java\r- 有文档，README说得很清楚，不用一脸懵逼找社区\r- 功能不多，基础的分享、预览、下载功能，前端好，交互体验好\r- 文件预览有Bug，OneDrive的视频流经常加载不出来，FLV会一直加载失败。但，好看是真的\r\r开发者是98年的(暴击)\r\r## 4. nextcloud\r\r![nextcloud](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/top-homeimage@2x.png)\r\r个人网盘程序，和Cloudreve一个性质的。很多插件，交互是最好的，也比较耗资源，适合家里获团队用。\r\rexternal storage 装起来复杂，不好白嫖资本家。","description":"比较一下私人网盘有关的程序","keywords":"自建网盘, 网盘目录, onedrive, alist","date":"2021-05-26 08:00"},{"id":"hslrecord.md","title":"m3u8直播流实时录屏小记","content":"最近由于发现自己想回看的直播会被剪镜头，所以下定决心以后要学会录屏。但本人有强迫症，一般的录屏软件满足不了我的需要，主要是：\r\r1. 会录出鼠标操作、网络卡顿、水印等影响观感的画面\r2. 由于显示器和录屏软件的和原视频帧数可能不同步的问题，非常容易造成画面卡顿\r3. 体积远大于原视频，二压后画质失真重\r\r通常来讲，能拿直播时的视频流就别真的屏幕录制。本来视频分段就都在缓存里，应该是有比较容易实现的办法做到实时保存的才对。\r\r本文主要分为以下三个部分\r\r- m3u8简介\r- 保存视频分段与合并\r- DRM 版权保护问题\r\r## m3u8简介\r\r目前的各大流媒体平台视频（不管是直播还是回放）大多都会把视频切片为很小一段，长度可能10s左右，通常是.ts后缀的文件。而这一堆.ts文件的索引文件为m3u8文件。\r\r一个通常的m3u8文件是如下格式\r\r```text\r#EXTM3U\r#EXT-X-VERSION:3\r#EXT-X-TARGETDURATION:10\r#EXT-X-MEDIA-SEQUENCE:0\r#EXTINF:10.000000,\r#EXT-X-PRIVINF:FILESIZE=3192240\rhttps://website/xxx-00001.ts\r#EXTINF:10.000000,\r#EXT-X-PRIVINF:FILESIZE=3206904\rhttps://website/xxx-00002.ts\r#EXTINF:10.000000,\r#EXT-X-PRIVINF:FILESIZE=2576164\rhttps://website/xxx-00003.ts\r```\r\r也就是说，如果我们实时保存流媒体平台的视频，正常情况下，会保存一个.m3u8索引文件，和一堆.ts文件。有了这些文件我们可以直接使用支持m3u8的播放器（如IINA、VLC）进行播放。\r\rm3u8是 HLS(HTTP Live Stream) HTTP直播流格式的基础。\r\r## 保存视频分段与合并为MP4\r\r工具准备：\r\r- [ffmpeg](https://www.ffmpeg.org/)：强大的命令行视频处理工具，网上有很多安装教程，这里不重复\r- [Chrome插件-猫抓](https://chrome.google.com/webstore/detail/猫抓/jfedfbgedapdagkghmgibemcoggfppbb)：资源嗅探插件，下载需要科学上网\r- 一个多线程的下载器（为了下载速度更快），如 aria2，网上有很多教程，这里不重复\r- 一个支持**使用正则表达式批量替换文字**的txt编辑器，如sublime、vscode\r\r以上方法会比较硬核，傻瓜式的方法可只准备下面这一个\r\r- [Chrome插件-Stream Recorder](https://www.hlsloader.com/)：傻瓜式HLS一键保存插件，下载需要科学上网\r\r### 方法一：下载所有分段并合并（稍硬核）\r\r首先打开一个视频网站，这里以优酷的综艺为例。\r打开后点击右上角的猫抓插件，会看到一个m3u8文件，和一堆ts文件。\r\r![猫抓.png](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240.png)\r\r首先我们可以先点下载按钮下载到本地 .m3u8 文件。\r\r猫抓插件提供了对m3u8的解析，点击文件旁的放大镜就可以看见。\r\r![image.png](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240-20210512174624858.png)\r\r复制所有的内容，放到支持多线程的下载器里下载。\r\r下载完成后，先整理一下本地的文件目录成如下\r\r![本地文件](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240-20210512174641967.png)\r\r（为了看起来更清晰，以上各个文件名我已修改）\r\r然后修改m3u8文件。我这里使用的编辑器是vs code。\r\rm3u8文件里的原链接是这样的：\r\r```text\rhttps://valipl-vip.cp31.ott.cibntv.net/67756D6080932713CF4E/0300609724C6163EBF1C35DAC076221D-4673-49D8-A932-70FA-00001.ts?ccode=0502&duration=6237&expire=18000&psid=28ae2c9bf869cf6f9ae28c814098b5fe43346&ups_client_netip=3b4081be&ups_ts=1620641730&ups_userid=300380294&utid=Xd0WGHofZhACAXtwDp2%2BGj22&vid=XNTE0MDg5MTgyOA&sm=1&operate_type=1&dre=u38&si=78&eo=0&dst=1&iv=1&s=cbcad844c5894d209b9f&type=mp4hd3v3&bc=2&hotvt=1&t=d91e686d230165f&cug=1&rid=20000000DC17B06335EBB96917703D4A6B2DA12102000000&vkey=B84707ca23f9e5899f9b0b9d97e4d1851\r```\r\r非常的长。我们首先要做的，是去掉每一行 `?` 之后的所有字符。使用正则表达式批量替换，在查询里输入`\\?.*?\\n`，替换为 `\\n` 。注意要勾选正则表达式的符号。\r\r![replace query](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240-20210512174711034.png)\r\r然后要替换的是`https://...`内容，替换为本地的文件路径，让最后的剩下文件名指向本地的文件。\r\r![替换本地文件.png](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240-20210512174718097.png)\r\r替换后的.m3u8文件是这样的\r\r![m3u8文件](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240-20210512174727634.png)\r\r此时可以使用支持m3u8的播放器打开m3u8文件，观看是视频能否正常播放。\r\r能正常播放后，使用ffmpeg合并为mp4，不用转码速度就很快\r\r```shell\rffmpeg -i index.m3u8 -vcodec copy -acodec copy output.mp4\r```\r\r完成\r\r#### 缺点\r\r对于回放的完整视频文件，通常会提供m3u8索引文件，但对于直播通常是没有m3u8索引的。这时候依然可以按上述方法下载所有分段，用ffmpeg进行合并。\r\r但是直播时无法一次获取到所有ts的链接，而是边播边给。就算猫抓能批量复制链接，但为了防止直播时出什么意外（比如浏览器无响应了、突然断电），看一会儿就得存，无法好好享受直播，最后上千个文件的列表，也变得很麻烦。\r\r### 使用 Stream-Recorder插件 傻瓜式保存\r\r上一个方法的所有步骤，其实都能用这个插件搞定\r\r- [Chrome插件-Stream Recorder](https://www.hlsloader.com/)：傻瓜式HLS一键保存插件，下载需要科学上网\r\r使用上也很简单。视频播放开始后，点击这个按钮就行了，自动保存视频分段，同时合并为一个mp4。\r\r![Stream Recorder.png](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240-20210512174735807.png)\r\r简单介绍一下，这个插件主要有三个模式\r\r- Live：实时获取直播时的ts分段，可以没有索引文件自动合并\r- HLS：看回放时获取ts分段，可以没有索引文件自动合并。但是像B站这种用m4s非标准HLS的似乎用不了。\r- Capture：实时获取正在播放的HLS，直播回放均可，大部分视频格式都能用，兼容性最好。缺点是真的要一直播着。\r\r也就是直播时使用Live抓取或Capture录屏，且可以自动合并视频音频，相当于直播时边看边存。\r\r看回放时使用HLS或Capture保存视频。\r\r## DRM 版权保护问题\r\r并不是所有的m3u8视频都能这么下载，有的经过了DRM(Digital rights management)的保护。这样的视频下载下来也是无法直接合并的。\r\r有版权保护的视频，使用猫抓查看m3u8解析时，可以发现这么一行\r\r![DRM m3u8.png](https://raw.githubusercontent.com/NamiLing/upic/master/uPic/1240-20210512174747126.png)\r\rStream Recorder 也不支持加密视频的下载。\r\r解密不在讨论范围内（我也不会），总得来说还是尽量支持正版。\r\r------\r\rPS：目前风气真的太严了，如果不是发现片段被删减，也不会想到去研究怎么录屏。既然花了钱买了相应的单场直播，也说明了会提供回放，要求拥有一个和直播时相同的回放个人觉得并不过分。最终给一个删减版，感觉这服务有些不值得，即便直播和录屏混剪都得给剪出来一个完整的版本。","description":"m3u8直播流实时录屏小记","keywords":"web, m3u8, hsl, 扒视频","date":"2021-05-12 08:00"},{"id":"记录一次被骗388巨款的经历.md","title":"记一次被骗388巨款的经历","content":"> 我原本以为是只是一场诱导式的恶意营销，细想来竟是一个彻头彻尾的楚门的世界。\r\r# 1 拉人\r\r昨天下午我逛商场时，一个短发美女姐姐叫住我说，他们的造型店在搞活动，有一个嘉宾来做一天发型设计，邀请剪短发的路人去体验。\r\r由于我长相小，经常会成为骗子的下手对象，也明白这样就是诱导消费，换做从前都是装聋。然而许久没有出门，昨天脑子进水，想看看是什么花样。\r\r我说我没钱，我才上大学，很穷。\r\r美女姐姐说，一百多剪一次也贵吗？\r\r我：贵。\r\r美女姐姐说，没事，你不能成为我们的潜在客户也没关系，我们发型师做设计是免费的，剪不剪由你决定。不剪也没事，你就听一听设计理念，今后一定会有所启发。\r\r又 battle 了几轮，我想那就去吧。然后果不其然，美女姐姐一路带出门，带路到了商店的背面的路对面，比较偏僻没什么车，马路上全是隔着的围栏。\r\r我看这地儿明显不对劲，说您先走，我回去了。美女姐姐说来都来了，去看看吧。\r\r在路上，这位美女一直在说我头发塌，后面剪断层了。我寻思着都活过了两轮，所有人都是说我头发炸的，好不容易拉直打薄才到了刚刚好的水平，这还是第一次有人说我头发塌。\r\r美女又问我你对自己的发型满意吗，哪里剪的。我说我很满意，40块剪的，很帅。\r\r美女说，他可以让你的发型更上一层楼。\r\r# 2 油腻\r\r进去是一家造型中心的装饰，装修一般，东西有些乱，在做头发的顾客只有一个，但人还显得挺多的。\r\r一个身高不到170体重看起来180的Tony让我坐下，满脸堆笑，伸出手握手说：\r\r“您好，您贵姓？”\r\r“我姓林。”（假名）\r\r“我叫星x，是今天来这的嘉宾，您可以叫我星哥。”\r\r然后 Tony 分析起我的头发，说我头发的重量感都在耳旁，顶部太塌，头骨太平，和那位美女的说法如出一辙。“为了设计更符合您的脸型，可不可你请你把口罩摘下来呢？”\r\r我觉得这算是个正常需求。摘下了口罩。然后……\r\rTony ：“你今天打了高光吗？”\r\r“没有。”（这人看不出我没化妆？）\r\r“那你鼻子天生这么立体吗？”\r\r我：“光打得好吧。” （你有眼疾吗？）\r\r“你知道你五官最吸引我的部位是哪里吗？”\r\r我说不知道。\r\rTony笑了下，“是你的嘴唇。”\r\r……………艹\r\rTony：“我应该今天应该好好收拾一下，主要是平时接待的都是30多岁的客户，没想到，可以遇见你。”\r\r我无语了，这人有病。理发店Tony大多喜欢套人近乎，这种程度的还是头一次。长得帅的是撩，长得丑的是性骚扰。\r\r# 3 洗发小哥\r\rTony说让我冲一下头发，看看发型发量和剪裁。\r\r洗头小哥问，你是哪儿人，我说我是四川的。洗头小哥立刻说了句（貌似是）四川话。\r\r我说您也四川的吗？\r\r小哥：“我是云南的，在北京北漂。你知道我们这位嘉宾的价钱吗？”\r\r我说不知道。\r\r“这位嘉宾和很多明星艺人合作过，平时剪一次头要588。”\r\r我：“我是学生，没钱。”\r\r小哥：“你可以好好和他谈一下，应该学生的话能更低一点。”\r\r小哥还向我打探了一下我最贵的理发消费是多少。\r\r# 4 装x\r\r回到梳妆台，Tony向我展示他手机，锁屏密码直接在我眼皮底下输入的。屏幕是他和关晓彤的合照，黑色的背景，国民闺女在照片上像在T台上一样有范，Tony穿着黑西装。相册里还有和高圆圆的合照，两照片风格差不多。当时时间太短没看细节。后来想想，这是P的，我也不是没见过明星的私下合照，哪有私下合照背景纯黑、这么正式和完美的。\r\rTony说，他平时是做培训的，也给明星艺人做造型。顾客受众一般都是30多岁的，会员费很贵，要两千。我表明我没钱，付不起，不是他的顾客。他说不是也没关系，你就先听听，你觉得可以了再考虑，要是你做得不满意我也不收你钱。\r\r然后Tony又开始说我头发塌了，说有办法让发根蓬松维持四五个月不用去理发店，也能拉长上庭比例。我容易对没见过的东西有兴趣，也想看看是怎么发根蓬松法，再说我确实上庭稍微偏短，觉得可以试试。事后我总结了一下，只想要骗一次钱的人，说四五个月也肯定是忽悠人的。\r\r我问Tony多少钱，Tony说我平时都是500起步，这次给你488。\r\r我表示还是太贵了。Tony又说学生价的话，我可以给你388。然后又开始展示他的手机里看起来高端的东西，表示388真的很便宜。我勉强接受了。\r\rTony说：“我给你这么个优惠价”，然后俯下身轻轻在我耳边说，“一会儿你要好好想想怎么报答我。”\r\r（先别急着吐，后面还有）\r\r# 5 x骚扰\r\rTony开始聊老家是哪，我说四川的。他说成都吗，春熙路他去过一段时间，妹子都很不错。“当时我在那一天就干三件事，你知道是什么吗？”\r\r我：……不知道\r\rTony：“喝酒，上网，泡妞。”\r\r------\r\rTony：“你知道为什么我愿意给你做这个头发吗？”\r\r我非常无语，我觉得他真的需要个捧哏。\r\rTony俯下身，到我耳边悄悄说：“因为我还挺喜欢南方姑娘的。”\r\r……我有点恨我是个面瘫脸。\r\r------\r\rTony拔下箍头发用的铁丝，上面缠着红色绒布，说给你变个魔术你信不信。\r\r我抬头看了他一眼，然后他把那个铁丝缠绕成红戒指的形状，把我手拉过去戴我食指上。\r\r我无了个大语，说：“这就是你泡妞的方式吗？”\r\rTony一把把铁丝拔下来，“什么泡妞的方式，我在说这是手艺人呢，编得挺好吧，我还专门看了你手指的宽度做的。”\r\r我：“手艺人做什么不好，做戒指，不正经。”\r\rTony：“嘿，她还说我不正经？以后不给你剪头发了。”\r\r（希望看到这你还没有吐）\r\r------\r\r问到学校，问我多大了，大几。我说我在读研。\r\rTony：研究生没有工资吗\r\r我：有是有，一个月四百\r\rTony：这么少啊？感觉在学校收获了什么\r\r我：没什么收获\r\rTony：收获了男朋友也算\r\r我：好吧，收获了男朋友\r\rTony：挺好啊，解决了大事。你男朋友不给你提供你经济上的资助吗？\r\r我：没有，我们各管各的。\r\rTony：要不我按你的标准给你介绍一个男朋友？\r\r我：？这不太好吧\r\rTony：男性朋友\r\r我：？这也不好吧\r\rTony：你不接受异性朋友？\r\r我：对\r\r# 6 关于钱\r\r无一例外，推销就是让人花尽可能多的钱。而我之所以叫它骗钱，而非诱导消费，是因为完全超过了一般诱导消费的手段与范畴。\r\r这个理发店有人专门负责陪聊天，陪聊小哥自称在德云社干过一段时间，老家是四川达州（怎么不是云南就是四川）。他主要负责宣传 “高端私人定制” 的概念。这应该是利用社会心理学的范畴了，但口才明显不比美女姐姐和Tony，可以说是很烂，说服不了我这种穷逼逻辑思维者。再说我一向对私人定制、高级vip等模式不看好，我一向认为商品化流水线化压低价格的形式才是最能说服大众购买其产品的。\r\r我也很直接地说我这种人就是小白鼠，你们就是学着怎么解剖小白鼠的人。陪聊小哥解释说，我们和客户的关系更像是朋友，真心诚意为客户在服务。\r\r然后又轮到Tony上场了。这个时候 Tony已经没有x骚扰了，重心全在钱上。因为我明显表示对发型不满意了，他开始宣传起了企业的靠谱性，打开了宣传册子。\r\r“我们这个店在全国都有连锁，2013年开始就有店了，在北京、天津……”\r\r我看了看，这个册子上店的名字和招牌不一样。事后再看大众点评，上面的名字又不一样。\r\r我问Tony你不是被请来的嘉宾吗，他说自己在这个店有股份。\r\r接着 Tony 又开始说办卡的事，给我看朋友圈的宣传，类似于“限定的诱惑”和饥饿营销，比如“今天可预约一位vip”。我说我对vip不感兴趣。\r\r然后Tony又给我看了看微信列表，每个人都是名字+会员价的备注，比如 “金妮可 30000”。说会员卡谁都可以用，**但不接待男性顾客**。然后又和我说2000就能成为vip，他对不同价格的vip都是一个态度。我再次说我穷学生没钱。他说你把你的表当了都能剪好几次头发了。\r\r他说的表是我手上戴的天梭表，因为太贵了我带了快10年了，自己动手换了一次表带换了三次电池。于是我说我表可以带10年，造型一年就过时了。\r\rTony又说我真的很想把你发展为顾客，学生价1000就行。我还是说没钱。他又说，1000让你三次烫染两次。我依旧说没钱，因为我是真没钱。\r\rTony说：“你没有花呗吗？”\r\r我：“之前有过，我已经关了”\r\rTony说：“额度多少？”\r\r我：“不记得，我不会超前消费的”\r\r之后也问了我好几次花呗，使劲想让我用花呗。\r\r------\r\r我说我穷的时候，提到了一下我这个月剪了三次头了。他问怎么剪这么多次。我说，被忽悠的呗。\r\rTony：“嘿，说得我忽悠了你似的，我就给你剪这一次，以后不给你剪了，说真的我不缺客户。”\r\r天啦，我该说这人演得太投入，还是该说他太自信？\r\r------\r\r在结帐的时候，我微信已经没钱了，抱怨了一下最近花得太多，只能用卡结账了。Tony明显顿了一下，什么卡？是信用卡吗？（因为信用卡负债状态跑路了商户也收不到钱）\r\r后来记账时发现，结算页面没有此店的名字和标识，只有一个“美容美发中心”。\r\r# 7 关于发型\r\rTony：“要是你回去同学看到了，就说我剪了一下，别说是做发根。”\r\r我没明白怎么没头没尾来了这么一句，这能有啥不好说的。现在想来，是怕骗局被揭穿吧。\r\r途中还来了一个妹子剪头。这个妹子的发型很迷，白色的头发，顶部特别高和头骨的比例完全不协调（我突然觉得我看骨相识人也不错）。当时Tony确认了一下，“这人是顾客吗？”然后让我等3分钟，看他展示什么叫3分钟剪完一个头发。我不知道这里的顾客是什么黑话。不过他剪的头发层次高得太离谱了，和妹子脸不配，太土了，审美实在不行。\r\r现在觉得，这个顾客也可能是演员，带顶假发上场的。\r\r至于我的发型，又变蓬了像狗熊。我剪完就去买个夹子夹塌了。朋友听了之后说你也是个奇葩，别人都要头发蓬，你要头发塌。\r\r# 总结\r\r这个事作为写报道的素材真的非常不错。流行元素兼备，社会心理诱导话术、普信男问题、骗钱流程展示得很齐全，是一场精心策划后的全店大型骗局体验店，就是楚门的世界一样，整个环境、公司、Tony的照片、微信列表、公司宣传册，全是精心策划过的，没有一个人是真的。手段很典型，流程固定。美女负责拉人，Tony（主演人）负责展示“专业”分析能力让人“上道”，然后洗头小哥负责一次抬预期价，Tony 负责展示自己贵又忙，二次抬预期价，再给优惠价。途中不停打探你的经济状况以看办卡最多能收你多少钱，询问烫染和妆造意向，顺带言语性骚扰和暗示。最后证明此店的连锁真实性和规模庞大，再让人办卡。\r\r另外这个诈骗集团应该不只有一个地点，因为他们问过我住哪，和我讲最近的连锁店是哪，那个地方应该也很偏僻，没有我熟悉的地标，我也记不住。另外，他说烫发根全北京只有两家能做，还把另一家的名字说出来了，推测也应该是同伙（谁会主动推荐自己的竞争对手），但我也没记住。如果要深入调查，应该会是个人不少的组织，干的事也不只表面理发这么简单。整个流程策划也挺全面的，绝非一时半会儿兴起的骗子能办出来的。\r\r但希望主演人可以改进一下，对一般女性能有点常识，用力过猛了。群演的年纪普遍偏小，就按规矩说话不怎么能自由发挥，需要再练下演技。\r\r对于我这种容易被忽悠的人，解决方法也很简单，足够穷就不会被骗钱了。\r\rPS：我觉得我写得好开心…………","description":"年少无知系列","keywords":"","date":"2021-04-19 08:00"},{"id":"看看是谁在D我.md","title":"看看是谁在D我","content":"自从部署了服务器，一直都觉得访问量不太正常。但我也仅仅是对IP做了防护，CDN防火墙也没怎么设置。\r\r直到最近觉得，天天访问上万，唯一IP数却一千不到，cache率更是一直都在1%以下。决定看看是哪些人（IP）干的事，服务器实在不值得。\r\r## 查看ip访问行为\r\rweb服务器使用的nginx，由于CDN的关系，nginx需要有http-realip的模块才能查看CDN前的ip。找了不少资料就只觉得这个文章不错，废话少过程清晰，还很贴心给了生成脚本。\r\r> [CloudFlare CDN下Nginx正确获取真实IP教程](https://www.nenew.net/cloudflare-cdn-nginx-get-real-ip-tutorial.html)\r\r配置完成后运行了一段时间。先统计下当前的log文件前10名的访问量和相应ip：\r\r```bash\r$ cat access.log | awk '{print $1}'| sort -n | uniq -c | sort -n -r | head -10\r\r    979 103.242.119.217\r    285 1.163.108.18\r    204 18.166.211.38\r    176 184.170.243.198\r    154 66.98.113.44\r    149 40.65.134.91\r    116 2400:8902::f03c:92ff:fe7b:5f02\r    113 113.71.61.213\r     92 185.245.1.151\r     80 107.148.250.111\r```\r\r第一名， `103.242.119.217` ，979次？这多得也太夸张了？！\r\r好吧，来看看这个ip在干什么。\r\r```bash\r$ cat access.log | grep 103.242.119.217 | tail -n 20\r103.242.119.217 - - [10/Dec/2020:08:54:41 +0000] \"GET /WWW/phpMyAdmin/index.php HTTP/1.1\" 404 178 \"-\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0\"\r103.242.119.217 - - [10/Dec/2020:08:54:41 +0000] \"GET /phpMyAdmln/index.php HTTP/1.1\" 404 178 \"-\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0\"\r103.242.119.217 - - [10/Dec/2020:08:54:41 +0000] \"GET /phpMyAdmin_ai/index.php HTTP/1.1\" 404 178 \"-\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0\"\r103.242.119.217 - - [10/Dec/2020:08:54:41 +0000] \"GET /__phpMyAdmin/index.php HTTP/1.1\" 404 178 \"-\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0\"\r103.242.119.217 - - [10/Dec/2020:08:54:42 +0000] \"GET /program/index.php HTTP/1.1\" 404 178 \"-\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0\"\r103.242.119.217 - - [10/Dec/2020:08:54:42 +0000] \"GET /shopdb/index.php HTTP/1.1\" 404 178 \"-\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0\"\r103.242.119.217 - - [10/Dec/2020:08:54:42 +0000] \"GET /phppma/index.php HTTP/1.1\" 404 178 \"-\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0\"\r103.242.119.217 - - [10/Dec/2020:08:54:42 +0000] \"GET /phpmy/index.php HTTP/1.1\" 404 178 \"-\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0\"\r103.242.119.217 - - [10/Dec/2020:08:54:43 +0000] \"GET /mysql/admin/index.php HTTP/1.1\" 404 178 \"-\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0\"\r103.242.119.217 - - [10/Dec/2020:08:54:43 +0000] \"GET /mysql/dbadmin/index.php HTTP/1.1\" 404 178 \"-\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0\"\r103.242.119.217 - - [10/Dec/2020:08:54:43 +0000] \"GET /mysql/sqlmanager/index.php HTTP/1.1\" 404 178 \"-\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0\"\r103.242.119.217 - - [10/Dec/2020:08:54:43 +0000] \"GET /mysql/mysqlmanager/index.php HTTP/1.1\" 404 178 \"-\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0\"\r103.242.119.217 - - [10/Dec/2020:08:54:44 +0000] \"GET /wp-content/plugins/portable-phpmyadmin/wp-pma-mod/index.php HTTP/1.1\" 404 178 \"-\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0\"\r103.242.119.217 - - [10/Dec/2020:08:54:44 +0000] \"GET /sqladmin/index.php HTTP/1.1\" 404 178 \"-\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0\"\r103.242.119.217 - - [10/Dec/2020:08:54:44 +0000] \"GET /sql/index.php HTTP/1.1\" 404 178 \"-\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0\"\r...\r```\r\r…………尼玛，恶意扫描啊！扫描常用路由啊碰运气啊！人干事？\r\r但估计这种恶意扫描的也是日抛ip，ban也没什么意义。只能设置limit rate了。\r\r看看第二名在干什么。\r\r```bash\r$ cat access.log | grep 1.163.108.18 | tail -n 10\r1.163.108.18 - - [10/Dec/2020:10:15:38 +0000] \"GET /clash/config HTTP/1.1\" 200 4978 \"-\" \"ClashforWindows/0.13.1\"\r1.163.108.18 - - [10/Dec/2020:10:16:36 +0000] \"GET /clash/config HTTP/1.1\" 200 4978 \"-\" \"ClashforWindows/0.13.1\"\r1.163.108.18 - - [10/Dec/2020:10:17:36 +0000] \"GET /clash/config HTTP/1.1\" 200 4978 \"-\" \"ClashforWindows/0.13.1\"\r1.163.108.18 - - [10/Dec/2020:10:18:31 +0000] \"GET /clash/config HTTP/1.1\" 200 4978 \"-\" \"ClashforWindows/0.13.1\"\r1.163.108.18 - - [10/Dec/2020:10:19:32 +0000] \"GET /clash/config HTTP/1.1\" 200 4978 \"-\" \"ClashforWindows/0.13.1\"\r1.163.108.18 - - [10/Dec/2020:10:20:35 +0000] \"GET /clash/config HTTP/1.1\" 200 4978 \"-\" \"ClashforWindows/0.13.1\"\r1.163.108.18 - - [10/Dec/2020:10:21:30 +0000] \"GET /clash/config HTTP/1.1\" 200 4978 \"-\" \"ClashforWindows/0.13.1\"\r1.163.108.18 - - [10/Dec/2020:10:22:34 +0000] \"GET /clash/config HTTP/1.1\" 200 4978 \"-\" \"ClashforWindows/0.13.1\"\r1.163.108.18 - - [10/Dec/2020:10:23:36 +0000] \"GET /clash/config HTTP/1.1\" 200 4978 \"-\" \"ClashforWindows/0.13.1\"\r1.163.108.18 - - [10/Dec/2020:10:24:32 +0000] \"GET /clash/config HTTP/1.1\" 200 4978 \"-\" \"ClashforWindows/0.13.1\"\r```\r\r这应该是个用户吧，但你这更新就更新吧，每分钟更新一次？能不能积点德？（哽塞.jpg）\r\r消耗流量都是其次，也并没有多出很多。但我不喜欢泡沫和虚高的数值，也讨厌因为不用付出成本所以极其浪费资源的做法，于我而言就像房间堆满了垃圾。看起来好像有很多东西，实际上什么也没有。\r\r要是我这种心态，创业肯定找不到风投，很快就倒闭。\r\r这些IP ban了也不太好……开个Challenge吧。\r\r顺带一提，默认配置文件的更新间隔早就给取消了。取消的原因倒不是怕被D，当时还完全没想过会租服务器，只是单纯的因为程序会有各种意想不到的BUG，时不时出现全NULL，连之前能用的都没有了……自动更新太容易挂掉，于是取消了自动更新。\r\r然后继续看，从第2名到第8名都是这种行为。我说呢，今天从浏览器进入的配置文件的页面一直无法加载，但服务端不管怎么请求都没有问题，最后不得已换成了一个静态文件。敢情就是你们搞没的？\r\r再加上gin的静态cache本身就不太稳。之前使用css的时候基本运行3天就外链请求不出来了，最后也是用nginx挂的静态文件。\r\r第7名到第10名，很明显，同类程序的爬虫。Duang地一下请求几个一般人不用的链接。对于这些爬虫我觉得倒还行，请求频率并不会太高。但非常不喜欢直接伸手全爬别人爬好的，这是极其恶劣的生态与shame的想法。爬虫的理想的状态是网状分布式的部署，而不是树。\r\r## 防护措施\r\r由于挂了 CloudFlare，iptables 自然没什么用，还容易不小心把 CF 的 IP ban 掉（虽然在发现这一点之前我折腾了快一下午的 iptables ）。直接去配置CF的防火墙。\r\r我需要应对的情况主要就这一个：\r\r- 一分钟更新一次配置文件的ip，给他们一个小小的JS Chanllenge\r\r（突然有点后悔写了JS Chanllenge的破解是什么回事……）\r\r但是啊，这些ip还是不少活人的，长期都Chanllenge没有必要。而且我也不能天天都像今天这么看log，实在是消耗时间，消耗时间就是生命。\r\r而 Nginx 和 CloudFlare 的rate limit 都是防止CC，限制的每秒或者每分钟的请求数。但这恰恰是我不能做的，默认的配置文件的写法1s内会请求十几次，多请求几次就一分钟就几十次了（配置文件该改改了）。我需要处理的是过于规律且相对频繁的请求，而非CC。\r\r于是连夜写了个分析log的程序，主要是以下功能：\r\r- 根据请求间隔的规律判断是否为需要处理的ip 特征：\r  - 请求间隔过于规律，比如每分钟一次、每分钟两次等等。有容错率。\r  - 不计算大于 `threshold` 分钟的间隔与等于0分钟的间隔。\r- 排除 CloudFlare 子网下的IP。CloudFlare 的 ip 网段在线获取。\r- 使用 CloudFlare Api 更新 JS Chanllenge 的 filter，给需要过滤的 ip 加上 Challenge\r\r然后用 cron 定时执行。常驻后台没必要，也没想做实时监控。\r\r把恶意 IP 和常见的 IP 过滤掉后，最新的就只剩下 CloudFlare 的请求了，终于干净了……但好寂寞啊…………看来是真的没什么活人用呢。\r\r## 一天后\r\r今天的Requests数是17435。\r\rUnique Request是1188。\r\rChallenge挑战的Request数是，8200（微笑脸）。\r\r你妹啊，Bot一样的自动更新占了快一半啊！摔！\r\r而且每次防火墙每次更新过滤的ip都是那么40个左右，Challenge通过率是0.5%。\r\r40ip个会不会有点多？是不是程序有问题？我开始也这么想过，但我自己也设置有定时更新，还设置了三份，都没见把我自己ban掉。\r\r累了，感觉不再爱了。","description":"自从部署了服务器，一直都觉得访问量不太正常。但我也仅仅是对IP做了防护，CDN防火墙也没怎么设置。","keywords":"运维, Linux, nginx","date":"2020-12-12 08:00"},{"id":"关于指针与Golang的结构体.md","title":"关于指针与Golang的结构体","content":"之前在学C++的时候，指针的用法就困惑了很久。后来有了计算机体系结构基础后，再加上Golang的一些说明，就突然明白了，之前为什么不理解指针。纠结的点在哪里。\r\n\r\n## 指针的概念\r\n\r\n(学的语言太多语法有些混了，看个意思就好，代码是四不像并不可以运行)\r\n\r\n- **地址**：一个变量在内存中的存储形式是 **地址 + value**，地址是在指内存中的地址。\r\n\r\n比如 `int a = 3`，意思是变量 a 在内存中有一个地址，**这个地址储存的 value 为 3**。\r\n\r\n- **指针 (pointer)** ：是一种变量，**它的 value 仍然是一个地址**。常用`*`定义指针变量。\r\n\r\n比如 `int *b = &a`，意思是 **指针变量** b 在内存中有一个地址，**这个地址储存的 value 为 a 的地址**。\r\n\r\n在使用变量（而不是声明或定义变量）时，`&` 为取地址符。对应的还有一个`*`为取内容符。比如\r\n\r\n```c++\r\nint a = 3\r\nint *b = &a // 将 a 的地址作为 b 的 value\r\nprint(b) // 输出 b 的 value，结果为一个地址，等于 a 的地址(&a)\r\nprint(*b) //将 b 的 value 作为地址，输出地址中存的值，结果为 3\r\n```\r\n\r\n上面仅是个人的概念解释，尽量少地引入新概念。以上概念有更通俗的叫法。\r\n\r\n比如`int *b = &a`，通常会叫做“变量 b 持有 a 的引用”。个人觉得虽然直观，但对于初学者并不友好。首先，“变量 b”就没有说清楚指针变量的特殊性。然后“a 的引用”，倒是说清楚什么叫做 a 的引用啊……尤其是一些语言没有指针的概念，但引用是随处可见的（比如 Javascript 的 Object 类型）\r\n\r\n## Golang Struct 与 指针的访问\r\n\r\n其实让我明白的只是因为[Go tour](https://tour.golang.org/moretypes/4)中的两句话：\r\n\r\n> Struct fields can be accessed through a struct pointer.\r\n> 结构体字段可以使用结构体指针获取。\r\n\r\n> To access the field X of a struct when we have the struct pointer p we could write `(*p).X`. However, that notation is cumbersome, so the language permits us instead to write just `p.X`, without the explicit dereference.\r\n> 结构体指针访问字段本来应该写成`(*p).x`，但是由于这么写太蠢了，所以允许直接写成`p.x`。\r\n\r\n也就是说，如果见到类似`T.x`的结构体访问，T有可能是结构体本身，也可能是指针……需要自行区分。仅此而已。\r\n\r\n而我之前一直以为 T 只能是结构体本身= =，所以对于指针一直头大……\r\n\r\n但由于存在指针这种特殊的访问方式，在结构体的组合与接口实现中会有一些想不到的情况：\r\n\r\n- 定义了一个接口Interface，方法有Intera()，Interb()\r\n\r\n  ```go\r\n  type Interface interface{\r\n  \tIntera()\r\n  \tInterb()\r\n  }\r\n  ```\r\n\r\n- 定义了一个结构体Base，用结构体指针的方式实现了Intera()\r\n\r\n  ```go\r\n  type Base struct {}\r\n  func (b *Base) Intera() {}\r\n  ```\r\n\r\n- 定义了一个结构体Extend，匿名组合了Base，用正常结构体的方式实现了Interb()\r\n\r\n  ```go\r\n  type Extend struct {\r\n    \tBase\r\n  }\r\n  func (e Extend) Interb() {}\r\n  ```\r\n\r\n这个时候，请问有谁实现了Interface？\r\n\r\n答案是：**Base和Extend本身都没有实现Interface**。但是上述代码中完全没有出现的***Extend（Extend的指针）实现了Interface**。\r\n\r\n为什么呢？虽然***Extend**并没有实现第二个方法，但**Extend**实现了，所以***Extend**是也是可以直接访问第二个方法的（参考上面的(*p).x的解释）。\r\n\r\n而***Base**实现了第一个方法（Base没有实现），而**Extend**组合了**Base**。因此第一个方法可以也通过***Extend**访问（Extend无法访问）。\r\n\r\n所以***Extend**两个方法都能访问，因此实现了Interface。而**Extend**只能访问第二个方法，因此没有实现Interface。\r\n\r\n然后日常使用**Extend**的时候，为了能使用Interface的方法，需要使用***Extend**：\r\n\r\n```go\r\ninterfacelist := make([]Interface, 0)\r\ninterfacelist = append(interfacelist, &Extend{}) // 因为是指针实现Interface，需要传入地址\r\ne = interfacelist[0]\r\n```\r\n\r\n在goland对e按下F1时，只会显示，这是个Interface，不会告诉你这是***Extend**。如果不是自己从头写的代码，你可能很久都无法发现，是个指针类型实现了Interface。你必须在层层组合中，找到是哪一层（这里是Base）让Extend变成了Interface的指针实现。\r\n\r\n对e的type assertion也应该这么写：\r\n\r\n```go\r\ne_ptr = e.(*Extend) // 从Interface类型返回一个Extend类型的指针\r\ne_ptr.Base // 等于(*e_ptr).Base\r\n```","description":"关于指针与Golang的结构体","keywords":"Mac, shell, 自动化, 脚本","date":"2020-11-27 08:00"},{"id":"Mac上如何开机与关机时自动运行Shell脚本.md","title":"Mac上如何开机与关机时自动运行Shell脚本","content":"网上讲如何开机运行脚本的很多，但我有关机时关闭远程服务的需求。于是上外网查了一下如何在关机时执行一段脚本。\r\r## 新建一个shell文件\r\r这个shell中包含了你需要开机关机时运行的脚本。\r\r```bash\r#!/bin/bash\rfunction shutdown()\r{\r\r  # 关机用的脚本放这里\r\r  exit 0\r}\r\rfunction startup()\r{\r\r  # 开机用的脚本放这里\r\r  tail -f /dev/null &\r  wait $!\r}\r\rtrap shutdown SIGTERM\rtrap shutdown SIGKILL\r\rstartup;\r```\r\r以上文件我取名为launchdeamon，赋予了当前用户的执行权限。\r\r```shell\rchmod 755 launchdaemon\r```\r\r## 新建plist文件\r\r为了让launchdeamon能在开机时自动运行，需要编写一个相应plist文件，使用launctl做到开机启动。关于launchctl和plist的作用，请先查看这篇文章：[Mac执行定时任务之launchctl](https://www.jianshu.com/p/b65c1d339eec)。\r\rplist文件的内容如下：\r\r```xml\r<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\r<plist version=\"1.0\">\r<dict>\r<key>Label</key><string>boot-shutdown</string>\r\r<key>ProgramArguments</key>\r<array>\r  <string>$SCRIPT_PATH/launchdaemon</string>\r</array>\r\r<key>RunAtLoad</key>\r<true/>\r\r<key>StandardOutPath</key>\r<string>$LOG_PATH/boot-shutdown.log</string>\r\r<key>StandardErrorPath</key>\r<string>$PLOG_PATH/boot-shutdown.err</string>\r\r</dict>\r</plist>\r```\r\rplist文件以键值对的形式存储信息。以上文件的字段解释：\r\r- `Label`：标签，也就是运行该plist显示的名字。这里为boot-shutdown\r- `ProgramArguments`：`array`里可以存放多个需要运行程序。这里的`$SCRIPT_PATH`请自己修改。\r- `RunAtLoad`：开机自启，为`true`\r- `StandardOutPath`：打印标准输出到某个文件，方便查看程序后台运行的结果，`$LOG_PATH`自行修改。\r- `StandardErrorPath`：打印标准错误到某个文件，同上。\r\r以上文件我取名为 boot-shutdown-script.plist 。\r\r由于shell脚本的执行权限是当前用户，以上文件需要放入当前用户的开机启动文件夹，即为 ~/Library/LaunchAgents 。\r\r然后将plist文件加入开启启动：\r\r```\rlaunchctl load ~/Library/LaunchAgents/boot-shutdown-script.plist\r```\r\r此时重启后，可以使用以下命令查看脚本运行状态\r\r```shell\rlaunchctl list | grep boot\r```\r\r输出为\r\r```\r438\t0\tboot-shutdown\r```\r\r第一个是pid。第二个为状态码，为0说明正常运行中。\r\r------\r\r参考：\r\r- [Run a script only at shutdown (not log off or restart) on Mac OS X](https://stackoverflow.com/questions/24200924/run-a-script-only-at-shutdown-not-log-off-or-restart-on-mac-os-x)","description":"Mac上如何开机与关机时自动运行Shell脚本","keywords":"Mac, shell, 自动化, 脚本","date":"2020-11-24 08:00"},{"id":"关于Golang程序的内存占用过大的问题.md","title":"关于Golang程序的内存占用过大的问题","content":"之前看Mastering Go 2nd Edition，说到Golang的垃圾回收机制，说垃圾回收器(GC)每5分钟会调用一次。然而我观察服务器内存占用时，发现程序后的空闲器5分钟后，使用top查看内存占用并没有减少，大小是200M。因此开始怀疑起了是否有内存泄漏问题。\r\n\r\n然而在使用pprof分析后，发现其报告的常驻内存占用只有10M，inuse_objects相对更多，也不过40M。goroutine没有泄漏，makeslice确实调用得非常多，但也仅仅是当时占用一下内存后来都释放了。有时候会有空闲的TCP连接，最后也被关闭了。可疑的代码都检查了一遍，最后认为只可能给内存造成压力但不应该内存泄漏。所以top查看的200M是怎么来的？\r\n\r\n在我再也挖不出任何可能性时，直到看到这篇文章，经历几乎一模一样。并且写得非常清楚有逻辑，以至于我没有想再完整记录一遍我的经历的想法。这篇文章甚至详细到了解释每一步的pprof的操作和术语，调试过程非常值得学习。\r\n\r\n- [How we tracked down (what seemed like) a memory leak in one of our Go microservices](https://blog.detectify.com/2019/09/05/how-we-tracked-down-a-memory-leak-in-one-of-our-go-microservices/)\r\n\r\n最后结论就是，**没有内存泄漏**。Golang的垃圾回收机制在1.12后变了，不再是5分钟机制(每5分钟发送`MADV_DONTNEED`信号)，而变成Go会告诉系统有空闲的内存可以回收(发送`MADV_FREE`信号)，但什么时候把内存还给系统是需要系统决定。如果系统内存一直有空闲就可能一直不会还系统，导致top显示出的内存占用一直很大。\r\n\r\n文章中还指出，如果想用之前那样的5分钟回收机制，运行时可以加上flag`GODEBUG=madvdontneed=1`。像之前那样使用`runtime.GC`与`runtime/debug`中的`FreeOSMemory`都没有效果，也就是不会发送`MADV_DONTNEED`信号。\r\n\r\n后来我也去查看了服务器的内存情况，发现，在一个小时后（程序这期间一直是空闲状态），内存终于降了100M，变得和之间相同了。确实是没有内存泄漏，纯属服务器闲的。\r\n\r\n知道这一点后我的内存洁癖也算是消失了。因为一直非常讨厌高内存占用的应用，觉得是没有优化好。现在看来，这也能有泡沫，反倒是没事就去清一下内存没有必要，重新申请又是额外的开销。从前的（静态）语言确实需要程序员手动管理内存，而go语言在这一点上又帮程序员做了。\r\n\r\n“手动强迫系统释放内存的行为都是耍流氓。”","description":"关于Golang程序的内存占用过大的问题","keywords":"Golang, 垃圾回收, 内存","date":"2020-11-20 08:00"},{"id":"gwf-law.md","title":"关于GFW的法律相关定罪之“非法获取计算机系统数据、非法控制计算机信息系统罪”","content":"关于GFW的法律定罪之“非法获取计算机系统数据、非法控制计算机信息系统罪”。\r\r之前看“不能使用该名称”的GFW定罪系列文章，阐述了司法实践中对于计算机概念不清晰导致的问题，觉得非常学术，逻辑上真的很有道理。所有回避攻击的手段怎么就变成入侵计算机或者非法访问网站了呢？\r\r但最近在阅读Clash的源码时，突然开始觉得，“非法获取计算机系统数据、非法控制计算机信息系统罪”对于节点的提供者或许是成立的。\r\r> **《中华人民共和国刑法》第285五条第2款** 违反国家规定，侵入前款规定以外的计算机信息系统或者采用其他技术手段，获取该计算机信息系统中存储、处理或者传输的数据，或者对该计算机信息系统实施非法控制\r\r下面说说为何觉得成立。\r\r包括Clash在内，所有翻墙软件都具有两个部分，一个被称为outbound，为将加密后的数据发送至远程服务器（或接收数据）。outbound的常用协议为常见的ss、ssr等等。这个部分没有上述罪名的问题。\r\r另一个部分称为inbound，此部分接管计算机系统的tcp请求(通常使用http或socks5)，将计算机系统原本应直接发送到服务器的流量接管到翻墙软件中。此系“非法获取计算机信息系统数据”的可能\r\r在获取inbound传入的传输数据之后，使用outbound指定的协议，与proxy服务器建立加密的连接，通过节点服务器发送流量。而节点服务器接管流量并返回到用户端时，传输的数据同样要使用软件的inbound写入浏览器。此系“非法控制计算机信息系统”的可能。\r\r不论如何，“获取计算机信息系统中传输的数据”是肯定无法避免的。此时的问题在于：1.是否违反国家规定（非法性）这一点非常口袋了，又要回到信道上。2.获取数据的客体并非是人，而是计算机程序，虽然程序的制作者并没有获取任何数据，但节点的提供者是可以的，很好的例子就是机场面板里可以显示用户最近使用的IP。\r\r对于翻墙软件的制作者而言，如果上述对于节点提供者的“非法获取计算机信息系统数据、非法控制计算机信息系统罪”成立，则“提供侵入、非法控制计算机信息系统的程序、工具罪”也相应成立。\r\r当然，这一切的前提，都建立在“非法性”的基础上。什么样的技术用于做什么合法没有规定。最受争议的“非法信道”在司法实践中也一直脱离了法律中“物理信道”的解释，涵盖了非物理信道，可以称其为口袋之源。\r\r参考：\r\r- [提供侵入、非法控制计算机信息系统的程序、工具罪](https://zh.wikipedia.org/wiki/提供侵入、非法控制计算机信息系统的程序、工具罪#cite_note-lx-1)\r- [非法获取计算机信息系统数据、非法控制计算机信息系统罪](https://zh.wikipedia.org/wiki/非法获取计算机信息系统数据、非法控制计算机信息系统罪)","description":"一些法律研究","keywords":"GFW, 法律","date":"2020-11-07 08:00"},{"id":"GlobalProtect启动退出脚本(MAC).md","title":"GlobalProtect启动退出脚本(MAC)","content":"mac上的Global Protect近似于流氓软件，但迫于学校要求不得不用。于是写了个shell脚本。\r\r> 参考：[Mac 退出与卸载 GlobalProtect](https://zhuanlan.zhihu.com/p/121116869)\r\r```shell\rif [ $# -eq 0 ]; then exit 0;fi\r\rcase \"$1\" in\r\t-h|--help) \r\t\techo \"-l\tlaunch\";\r\t\techo \"-k\tkill\";\r\t\techo \"-as\tlaunch and set autostart\";\r\t\techo \"-uas\tkill and unset autostart\";\r\t\techo \"-h\thelp\";\r\t\texit 0;;\r\t-k)\r\t\tlaunchctl unload /Library/LaunchAgents/com.paloaltonetworks.gp.pangp*;exit 0;;\r\t-l)\r\t\tlaunchctl load /Library/LaunchAgents/com.paloaltonetworks.gp.pangp*;exit 0;;\r\t-uas)\r\t\tlaunchctl unload -w /Library/LaunchAgents/com.paloaltonetworks.gp.pangp*;exit 0;;\r\t-as)\r\t\tlaunchctl load -w /Library/LaunchAgents/com.paloaltonetworks.gp.pangp*;exit 0;;\resac\r```\r\r在/usr/local/bin下新建文件，输入以上内容，并赋予执行权限即可。","description":"GlobalProtect启动退出脚本(MAC)","keywords":"GlobalProtect, shell脚本","date":"2020-03-27 08:00"},{"id":"都挺好.md","title":"都挺好","content":"自我发泄罢了。\r\n\r\n1\r\n\r\n最近有部剧在三次元很火，叫都挺好。姚晨在里面主演了个从困苦中长大的女孩，在什么都不好下的情况下逆风翻盘，过上了自己所理想的生活。\r\n\r\n苏明玉所代表的是三次元主流社会的一种理想生活模板。有钱，有事业，有家庭，会生活，是社会对于人“成功”和“幸福”的典范，也是很多人向往的潮流。当个人对自己的期望与社会对个人的期望是一致时，奋斗会是一件艰苦但幸福的事，比如苏明玉。反其道而行之，即使奋斗也是艰苦与痛苦。因为社会的不认同，自己的理性也不去认同。这时的理想与现实是无比割裂的。\r\n\r\n我妈也不例外，给我发了一篇“有钱一时爽，一直有钱一直爽”的爆文。她是最喜欢这种有钱的小资生活的人，可惜起点太低，所以希望我能成为外向/自律且能过好生活的有钱人。很不巧，她的女儿完全相反，是一个非常内向/对不想做的事极度不自律/对想做的事能把对己极度push的人。\r\n\r\n按照MBTI的分类方法，苏明玉（姚晨饰）是ENTJ，指挥官型人格。而我是INTP，如果T再弱一些，F的属性再重一些，也就是INFP时，是我的抑郁状态。抑郁状态不是悲伤，接近崩溃，造成的影响难以逆转。\r\n\r\n2\r\n\r\n我的一个朋友在985学的软件工程，可开心了，每一次学习知识都是有趣的，和大家做出什么东西都很有成就感。\r\n\r\n我曾经一起玩电子音乐编曲的朋友，在普通本科学软件工程，不喜欢做网页，因为做网页不是设计网页，不像作曲编曲就是设计音乐。所以他在自学Unity，说想做游戏。\r\n\r\n另一个一起玩电子音乐编曲的朋友，学化学的，不编曲了。\r\n\r\n我也不编曲了。\r\n\r\n3\r\n\r\n前段时间晚上和一个画画的大佬交流。大佬不是天生的大佬，这两年是看着大佬进步的，尤其进了公司后，画技一月一变。大佬翻出了之前的黑历史给我看，确实还挺黑的，然后说，“你现在画得可比我那时候好多了，有被鼓励到吗？”\r\n\r\n我仔细想想，说“没有[捂脸]”。\r\n\r\n大佬说我怎么这么丧，要是小海（另一个画友）看了那肯定高兴炸了。大佬说他上大学那会儿临摹了一张图，当时觉得自己牛逼得不行，现在一看，什么鬼。\r\n\r\n我确实没有被鼓励到，这挺对不住别人的鼓励的。我也很羡慕这种有点小成就就能很开心的心态。但有人告诉我，这种小成就感会造成短视，选择这样的行业可能不会有太高的高度（没错说得就是前端，几年下来牛逼到不行年薪也就40w）。如果我还把画画当成兴趣，那我也是那个画了个很像的临摹就觉得自己特牛逼到处发社交平台的人。但现在不行了，我清楚我要是在毕业之前不能画到一种可以靠画画吃饭的水平，可能会永无天日，也永远没有去提出要求让家里继续花钱的权利。\r\n\r\n而基友就很不一样，想画就画，不想画就把画笔一摔：“老子不画了，老子要打游戏。”\r\n\r\n4\r\n\r\n前段时间和一个热爱科研的大佬用qq写信交淡，聊的是关于人生的思考。大佬一直年级前十，真的热爱科研，通原导论课这种介绍专业大纲的论文拿了满分。他说他很纠结，因为不管是参加比赛，去实验室工作，拿奖，都是真的喜欢，不是为了社会意义上的功名。所以他为了有自己安静思考的空间，没有去清华（要去一定可以去的那种），拿特奖进了Top3觉得已经知足了。但他爸爸觉得他太寡淡，不去争，只留在小破学校。他纠结的是：“社会上都希望给人标签化，而我在做的事情是去标签化。那我是要坚持非标签化的生活习性，并在这个道路上找到容身之地，还是选择标签化自己，和正常的社会人一样建功立业呢？”\r\n\r\n我看完几乎要给他跪下。在平常人眼里，做科研已经社会上非常认可的一条路，社会自动会给他贴上科研大佬的标签，现在不去清华以后过自己想要的生活还是绰绰有余的。只不过他爹是更功利一些，更加看重他的标签罢了。\r\n\r\n但这确实是一个多想想就无解的问题。在人际关系过于庞大的社会，人们只会看你有的标签和别人口中的印象。标签不适合就首先被淘汰了。大佬不用担心，他选的路和他拥有的标签是一致的。而我呢？标签和想选的路一直不一致的怎么办？\r\n\r\n5\r\n\r\n我相信是能做好一件事的是真的热爱的。\r\n\r\n但是先有热爱才有的一步步成就，还是先有的一步步成就才有的热爱呢。\r\n\r\n这两者都有。龙哥是越来越喜欢演戏的。而年轻有为的大佬们都是先有热爱的。但自己呢？能放弃喜欢的事情把热爱挪到社会的给正轨上吗？\r\n\r\n6\r\n\r\n都说二十多岁的年轻人选择很多，其实一点不多。不说天赋筛掉的路，从填好高考志愿的那一刻，社会已经对你有了期待的方向。等到工作时，除了部分自由职业者和创业者，要走什么路几乎可以一眼见底。转行的成本不是一般人承担得起的，包括精神上和物质上。\r\n\r\n而当能承担转行的成本时，说明在原来的领域已经是做得很好的，而我相信是能做好一件事的是真的热爱的。这就变成了一个无法解开的死锁。\r\n\r\n导师不赞同学生写技术博客。导师赞同用什么学什么。这也是一种一眼见底。“哪管喜不喜欢，只看能不能干。”一个创业的哥哥说。\r\n\r\n不知道为什么，我非常非常讨厌这样的模式。理性告诉我这是实际情况，是对的，这样的人通常过得很好。可我依旧讨厌，迫切想远离。太现实主义了。他们先决定了想怎么活，干什么是无所谓的，只要能干。而我是先想干什么，怎么活是无所谓的，只要能活。\r\n\r\n可能还是太年轻，被打击得不够狠。\r\n\r\n7\r\n\r\n我仍然相信科技能从实处改变生活，并且看到人们的生活因此更加丰富多彩而欣喜。但我仍然不知道怎么做。","description":"自我发泄罢了。","keywords":"","date":"2019-03-27 08:00"},{"id":"近期资源整理2018-08-17.md","title":"近期资源整理2018-08-17","content":"尽量弄点技术资源上的整理，或者记一点比较有趣的事。像p2p暴雷之类的就不记了。\r\r## 教程\r\r1. [Build CPU from scratch](http://nandgame.com/)(英文)\r\r从零开始建造CPU小游戏，从一个与非门开始一步步搭建出各种逻辑运算单元，直到拼出一个CPU。需要数字电路基础和计算机组成原理的知识。\r\r2. [Google推出的机器学习速成课程](https://developers.google.cn/machine-learning/crash-course/)\r\rGoogle推出的在线机器学习课程，并且不用科学上网。\r\r## 资源\r\r这是第一次写，所以夹杂了之前的资源。\r\r1. [GitHub上有趣、入门级的开源项目分享站](https://hellogithub.com/)\r\r开源项目分享站。大部分是中文项目，可按语言分类检索，每月出一期月刊，适合正在学习的人练手。\r\r2. [free-programming-books](https://github.com/vhf/free-programming-books)\r\r整理了所有和编程相关的免费书籍，同时有[中文版项目](https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md)\r\r3. [有了这个列表，程序员不愁没练手的小项目了](https://github.com/jobbole/ProgrammingProjectList)\r\r学了新语言之后不知道怎么巩固时，可以按照上面的列表实践练练。\r\r4. [OSDev.org](https://wiki.osdev.org/Main_Page)\r\r操作系统wiki。提供编写一个计算机操作系统的所需要的信息。可以作为教程看，也可以作为参考。\r\r## 文章\r\r[API之下 - ruanyf](http://www.ruanyifeng.com/blog/2018/08/api-below.html)\r\r借用一下文中的原话，“虽然标题里面有 API，但是本文谈的不是编程，而是更重要的事情”。\r\r## 有趣又无聊的发现\r\r1. [SCP基金会：全世界作者协同创作的小说](http://www.scp-wiki.net/)\r\r[SCP中国分部](http://scp-wiki-cn.wikidot.com/foundation-tales-cn) SCP基金会是一个虚构的神秘的组织，记载了各种超自然现象、个体等事件。小说的形式就是组织内一篇篇“机密文件”。有趣的是任何人都可以成为SCP系列的作者，只要文章符合要求就能被收录进SCP基金会网站。目前已经有了基于SCP世界观的游戏衍生和小说改编。\r\r## 近期事件\r\r1. Python的流行趋势跃居编程语言第一（IEEE，PYPL）\r   （Python都已经作为高考内容了，而当年高考时我还什么也不会）","description":"近期资源整理2018-08-17","keywords":"CPU教程, 资源分享, 开源项目","date":"2018-08-17 08:00"},{"id":"B站反查用户弹幕小记.md","title":"B站反查用户弹幕小记","content":"工具：Chrome浏览器\r\r反查用户分为视频里现存的弹幕反查和历史弹幕反查。其中反查历史弹幕需要用Chrome的调试工具，需要懂一点前端，比较简单，仍然是非技术向的一个小记。\r\r## 从视频里现存的弹幕反查用户\r\r能有工具用就用。以下两个工具都能实现从视频里现存的弹幕反查用户。\r\r- [Bilibili弹幕发送查询](https://www.b612.me/danmu/)\r- Chrome扩展[Bilibili Helper](https://chrome.google.com/webstore/detail/哔哩哔哩助手：bilibilicom-综合辅助扩展/kpbnombpnpcffllnianjibmpadjolanh?hl=en-US)\r\r## 从历史弹幕里反查\r\r了解原理需要知道前端的基础。原理在[这篇文章](https://typcn.com/legacy/blog/posts/bilibili-comment-sender-digger.html)里说得很清楚了，一定要看。（目前文章已失效，请继续往下看）\r\r问题是在于历史弹幕文件的获取。2018年历史弹幕的API有变动，需要用户已经登录了才能获取（因为页面的请求方式是是Request），因此之前网上的工具箱都没法用了。这里说一下使用Chrome的开发者工具获取历史弹幕并反查用户的方式。\r\r首先，Chrome需要登录过bilibili，这样才能有cookie。\r\r然后打开一个视频，这里用[av29242495](https://www.bilibili.com/video/av29242495)为例。\r\r开启Chrome的开发者工具，并选择network选项卡，刷新一下，大概是这样。\r\r![Chrome.png](https://ww1.sinaimg.cn/large/6530f589ly1g8jz1fap2vj21yk11gnpd.jpg)\r\r在上图的bilibili界面中选\"查看历史弹幕\"，选则一个日期（我选的8月14日）。然后在右侧的Filter中填入history，结果是这样\r\r![HistoryDanma.png](https://ww1.sinaimg.cn/large/6530f589ly1g8jz3gihc4j21y61187wh.jpg)\r\r其中以history开头的文件就是我们所需要的历史弹幕文件，双击就可以在新标签页中打开。这个例子中的历史弹幕文件地址长这样：\r\r```\rhttps://api.bilibili.com/x/v2/dm/history?type=1&oid=50775916&date=2018-08-13\r```\r\r可以见这个历史弹幕的api就长这样，oid是视频的编号（不是av号），后面加个date。type=1目前我没弄清楚是什么。\r\r弹幕文件里的弹幕都是这个样子的\r\r```xml\r<d p=\"弹幕出现时间,模式,字体大小,颜色,发送时间戳,弹幕池,用户Hash,数据库ID\">123123</d>\r<!--比如-->\r<d p=\"10.15700,1,25,16777215,1534175832,0,39d120,3687662110113792\">卧槽番外</d>\r<d p=\"19.93100,1,25,16777215,1534175761,0,6acc8733,3687624958541824\">台词太强了，节奏太好了</d>\r<d p=\"24.98000,1,25,16777215,1534175677,0,f11c8b72,3687580849668100\">来啦 给大大比心</d>\r```\r\r其中要用的是用户Hash。用户Hash只是简单的把数字ID用[ITU I.363.5](http://www.itu.int/rec/T-REC-I.363.5-199608-I/en)算法进行了Hash。不过这里不用手动写算法了，因为下面的接口还能用。\r\r```\rhttps://biliquery.typcn.com/api/user/hash/[用户Hash]\r```\r\r比如我从文件里任意选了两个用户Hash，替换掉上面的[用户Hash]，分别返回了如下结果\r\r```json\r{\"error\":0,\"data\":[{\"id\":17882889}]} // 比较老的用户\r{\"error\":0,\"data\":[{\"id\":390105526},{\"id\":21670130}]} // 一般新用户\r```\r\r用户ID(uid)为后者。用B站的个人主页网址格式就能找到了弹幕发送者的主页了。格式如下\r\r```\rhttps://space.bilibili.com/uid/#/\r```","description":"B站反查用户弹幕小记","keywords":"bilibili，弹幕，查询，逆向","date":"2018-08-15 08:00"},{"id":"使用pandoc转换md为PDF并添加中文支持.md","title":"使用pandoc转换md为PDF并添加中文支持","content":"由于最近需要把markdown文件导出为pdf并且需要用到latex的行内的数学公式，只用typora无法做到，于是开始使用pandoc。问题是pandoc中在从md转pdf的时候需要手动设置中文，否则会有转换问题。这个坑查了很久，最终从一个pandoc模板里得到了解决方法。\r\r系统：macOS 10.13.2\r\r## 基本操作\r\r准备：需要先安装[HomeBrew](https://brew.sh/index_zh-cn.html)\r\r1. 安装pandoc\r\r```bash\rbrew install pandoc\r```\r\r1. 安装texlive，支持latex\r\r```bash\rbrew cask install mactex\r```\r\r1. 导出pandoc转换为时的latex默认模板\r\r```bash\rpandoc -D latex > template.latex\r```\r\r1. 在template.latex里添加中文字体支持\r\r```\r\\usepackage{fontspec}   % 允許設定字體\r  \\usepackage{xeCJK}    % 分開設置中英文字型\r  \\setCJKmainfont{SimSun}   % 設定中文字型\r  \\setmainfont{Helvetical}  % 設定英文字型\r  \\setromanfont{Helvetical}   % 字型\r  \\setmonofont{Courier New}\r  \\linespread{1.2}\\selectfont   % 行距\r```\r\r1. 使用模板把md转换为pdf\r\r```bash\rpandoc --pdf-engine=xelatex --template=[template.latex的路径] newfile.md -o newfile.pdf\r```\r\r## pandoc的默认使用的模板路径\r\r在mac os下，在～/.pandoc/templates文件夹里。没有的话要手动创建的。\r\r```bash\rcd ~\rmkdir -p ~/.pandoc/templates\r```\r\r导出latex的默认模板至默认的模板路径\r\r```bash\rpandoc -D latex &gt; ~/.pandoc/templates/default.latex\r```\r\r在default.latex里添加中文字体支持\r\r```\r\\usepackage{fontspec}   % 允許設定字體\r  \\usepackage{xeCJK}    % 分開設置中英文字型\r  \\setCJKmainfont{SimSun}   % 設定中文字型\r  \\setmainfont{Vollkorn}  % 設定英文字型\r  \\setromanfont{Vollkorn}   % 字型\r  \\setmonofont{Courier New}\r  \\linespread{1.2}\\selectfont   % 行距\r```\r\r这样下来转换的时候不使用指定的template，使用的就是default模板。例如\r\r```bash\rpandoc --pdf-engine=xelatex newfile.md -o newfile.pdf\r```","description":"使用pandoc转换md为PDF并添加中文支持","keywords":"pandoc, PDF, PDF转换,markdown转PDF","date":"2018-02-07 08:00"},{"id":"welcome.md","title":"Welcome to sansui's blog","content":"这个文件记录了此博客的外观变化。从2016年开始，使用 hexo 建立博客。\r\r## 2019-03-24\r\r- [yilia](https://github.com/litten/hexo-theme-yilia)，一个hexo官网没有的但很多人都知道的主题。移动端的优化很好。偏重于内容，挺生活化的，搜索也很全。\r- [yilia接入gittalks评论](https://cloudy-liu.github.io/2018/07/14/Hexo%E6%9B%B4%E6%8D%A2%E4%B8%BAGitTalk%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/)。\r- [Hexo yilia 主题一揽子使用方案](https://blog.csdn.net/lynnbest/article/details/79845944)\r\r## 2020-11\r\r换成了 Hugo 的 Loveit。\r\r## 2020-12\r\r逐渐偏黑白设计感。\r\r- [hexo-theme-aircloud](https://github.com/aircloud/hexo-theme-aircloud)\r- [tkl](https://github.com/SuperKieran/TKL)\r\r## 2022-05-13\r\r用 NextJS 重构中。将逐渐脱离通用博客框架。\r\r## 2023-08-21\r\r文档数据丢失。内容慢慢重写。","description":"","keywords":"博客, hexo, next.js","date":"2016-03-25 03:23"}]