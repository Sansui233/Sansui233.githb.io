[{"id":"windows-zsh-conf.md","title":"Windows 命令行相关配置之 msys2+zsh+zi","content":"长久以来，遇到 bash 脚本会临时切 git-bash 中的 bash。由于用的语言都有自己的包管理器，倒也一直够用。但是最近涉及到一些 c++，由 git-bash 提供的最小化环境东西缺得太多，几乎不能当个日常 shell 用，也没有 pacman 包管理，最后决定还是单独安装 msys2。\r\n\r\ngit-bash 和 msys2 同时安装不会冲突。msys2 是独立的 home 目录，而 git-bash 是与 windows 当前用户通用的。我本来想卸载 git-bash，但由于我现在还是用 powershell，最终发现 git-bash 不能卸载。一是 posh-git 只支持 git-bash 的 git；其次是，astro-nvim 中的一些插件需要 `git.exe` 在环境变量下，使用 alias 链接的 git 不行，而手动加环境变量会把 git 以外的程序也加进去，造成 msys2 的工具与 powershell 本身工具的冲突。\r\n\r\n想来想去，决定保留 git-bash 到最小化的状态，当成 powershell 的插件用。unix-like shell 以及相应的包管理还是 msys2。\r\n\r\n## 安装 msys2\r\n\r\n见 https://www.msys2.org/ 。安装过程没什么好说的，唯一要注意的在于安装目录的权限必须是当前用户可以完全控制，否则后续各种包的安装都会有一大堆问题。如果因为强迫症安装到 Program Files 下，则需要手动添加当前用户的权限。\r\n\r\n### 软链接问题\r\n\r\nwindows 的软链接本来也是个很麻烦的问题。到 msys2 下，还多了一个软链接方式兼容问题。msys2 默认是 `ln -s` 是复制，要用 windows 风格的软链接，可以改安装目录下的各种 `.ini` 文件中的配置。\r\n\r\n```\r\nMSYS=\"winsymlinks:lnk\"\r\n```\r\n\r\n## zsh + zi\r\n\r\n### zsh 的安装\r\n\r\n```bash\r\npacman -S zsh\r\n```\r\n\r\n老实说个人觉得和 linux 上的 zsh 相比还是差了一大截，用起来和 bash 感觉差不多。只是 zsh 插件管理的选择比较多\r\n\r\n### zi 的安装\r\n\r\n关于 zsh 插件管理，之前在 git-bash 上我也安装了 oh-my-zsh，但是环境原因，遇到的 bug 着实太多，基本不用。另外，最大的问题是启动太慢，每次启动长达 10 秒。我分析了一下初始化脚本的执行时长，发现拖慢速度的罪魁祸首是初始化命令补全（就不能异步吗啊！）当然用 mac 时 omz 也有点慢，但显然没有 msys2 里这么离谱。\r\n\r\n下午吐槽这个事情后，Antarx 说他换 zi 了。我试了下，确实很快，从没超过3s，令人偷税。\r\n\r\n- zi 的安装：https://wiki.zshell.dev/docs/getting_started/installation\r\n\r\n安装过程最好在 msys2 的 GUI 终端下进行，因为需要登录的默认目录是在 home 的当前用户下。如果使用 windows terminal，要手动设置启动的目录，否则 plugins 目录软链接时会直接报找不到源目录。\r\n\r\n### zi 的配置与插件\r\n\r\n`.zshrc` 里添加如下，写好重启 zsh 即可。\r\n\r\n```bash\r\n$ vi ~/.zshrc\r\n\r\n# zsh\r\nsetopt AUTO_PUSHD\r\n\r\nexport CLICOLOR=1\r\nexport LSCOLORS=ExGxFxdaCxDaDahbadeche\r\nzstyle ':completion:*' list-colors \"${(@s.:.)LS_COLORS}\"\r\n\r\n# 安装或启动 zi，由于墙的关系，可以把启动脚本下下来，替换为本地文件\r\nsource ~/.zi.zsh; zzinit\r\n# source <(curl -sL init.zshell.dev); zzinit\r\n\r\n\r\n# 插件\r\n\r\nzi ice wait lucid atload'_zsh_autosuggest_start'\r\nzi light zsh-users/zsh-autosuggestions\r\n\r\nzi ice wait lucid atinit='zpcompinit'\r\nzi light zdharma/fast-syntax-highlighting\r\n\r\nzi light agkozak/zsh-z  # 不能用 eval \"$(zoxide init zsh)\" 会冲突\r\nzi snippet OMZP::git\r\nzi light zsh-users/zsh-completions\r\n\r\nautoload -Uz compinit; compinit\r\nzinit cdreplay -q\r\n\r\nzstyle ':completion:*' list-colors \"${(@s.:.)LS_COLORS}\"\r\nautoload -Uz compinit\r\ncompinit\r\n\r\n## theme - pure\r\n# install: `zi ice pick\"async.zsh\" src\"pure.zsh\"``\r\nzi light sindresorhus/pure\r\n\r\n\r\n```\r\n\r\n## Windows Terminal 设置\r\n\r\n在设置里改 json，加相应的 profile。可以使用 `-use-full-path` 继承 windows 系统的环境变量。\r\n\r\n```json\r\n{\r\n    \"commandline\": \"C:\\\\msys64\\\\msys2_shell.cmd -defterm -here -no-start -mingw64 -use-full-path -shell zsh\",\r\n    \"guid\": \"{c420e0af-28d9-4742-a6b8-83d5fcf424e9}\",\r\n    \"icon\": \"C:\\\\msys64\\\\mingw64.ico\",\r\n    \"name\": \"msys2 zsh\",\r\n    \"startingDirectory\": \"%USERPROFILE%\"\r\n}\r\n```\r\n\r\n## Vscode Terminal 设置\r\n\r\n```json\r\n\"terminal.integrated.profiles.windows\": {\r\n    \"MSYS2 zsh\": {\r\n        \"path\": \"C:\\\\msys64\\\\msys2_shell.cmd\",\r\n        \"args\": [\"-defterm\",\"-here\",\"-no-start\",\"-mingw64\",\"-use-full-path\",\"-shell\",\"zsh\"],\r\n        \"env\": { \"MSYSTEM\": \"MINGW64\" },\r\n        \"overrideName\": true\r\n    },\r\n},\r\n```\r\n\r\n## Mintty 设置\r\n\r\nMintty 是 msys2 里默认的终端 GUI，默认 shell 是 bash。修改 `mingw64.ini` 为如下内容。\r\n\r\n```\r\nMSYS=winsymlinks:lnk\r\nMSYS2_PATH_TYPE=inherit\r\nMSYSTEM=MINGW64\r\nSHELL=/usr/bin/zsh\r\n```\r\n\r\n## 参考\r\n\r\n[msys2-for-win](https://hustlei.github.io/2018/11/msys2-for-win.html#安装git和vim)\r\n\r\nhttps://sdl.moe/post/zsh-conf/","description":"","keywords":"Windows命令行, Windows调整，Windows设置, powershell,msys2,zshell","date":"2024-03-16 04:35"},{"id":"2024-02-29_像素的一生.md","title":"笔记 - 像素的一生","content":"内容来自于 2018 年谷歌的一个视频。原视频不长但内容很多，非常值得一看。Chrome 的渲染机制是在不断变化的。笔记原存于 Logseq，如果有类似于，“见CSS/图层”一类的语句，为笔记内超链接。相关概念需自行了解。📚 **资料**- [b站视频 - 2018](https://www.bilibili.com/video/av35265997/?vd_source=a94b8ba67535fb1431364b8c5fac341d)- [英文slides](https://docs.google.com/presentation/d/1boPxbgNrTU0ddsc144rcXayGA_WF53k96imRH8Mp34Y/edit?pli=1)- [思否文章](https://segmentfault.com/a/1190000020102554)**渲染流程**：web content → magic(rendering) → pixels## 1. Web content最常见的 HTML + CSS + Javascript API还有图片、视频、音频、web assembly、WebGL、Canvas、PDF等等![Web Content](https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342847.webp)## 2. 渲染渲染是在一个 sandbox 进行的。渲染引擎 Blink 是渲染代码的一个子集。操作系统渲染 API：OpenGL，DirectX(Windows), vulkan。包含 textures shaders 等等。### 2.1 渲染目标1. 把 web content 渲染为 openGL 的调用2. 为更新渲染建立起对应的数据结构### 2.2 基本渲染流程![渲染流程](https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342848.webp)渲染流程太复杂，会被分为几个阶段进行数据结构的转换不是每一次更新渲染，都要走全部的流程。相关看 浏览器/渲染原理 中的回流与重绘。#### HTML to DOM解析 HTML 为 DOM 树。DOM树的作用有两个，一个表示文档结构，二是暴露 API 给 Javascript，由 V8 JS引擎进行 API 绑定。#### CSS to ComputedStyleCSS 转换为 StyleRule 集，每个 StyleRule 包含 CSSSelector 和 CSSPropertyValue。流程如图![css parser](https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342849.webp)根据 css 样式规则，计算出每个 DOM 元素样式属性的最终值，存储于 **ComputedStyle** 对象模型中，是一个 style properties 与 values 的超大映射。这个过程被称为 Style Resolution。![style resolution](https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342850.webp)**ComputedStyle** 对象已经暴露给了 JS。使用`getComputedStyle(element)['padding-top']`即可获取。在 Dev tools 的 Elements 中的 Computed 选项卡的值就是依据此 对象来的。#### Layout Stage例子：- Web 最基础的 Block Flow 布局，需要计算出 Block 的 x、y、width、height。- 由于 Block 自适应高度，需要根据内容的尺寸，找到文字换行的地方，以计算每个 Block  的高度。- 每一个 Block 的矩形有多种边界（在CSS/盒模型中说得很清楚）。内容 overflow 时，需要计算两个矩形，一个是**实际内容区域**，一个是**能显示出的内容的区域**。如果内容可滚动，还要计算**滚动边界**和**滚动条边界**。Document 的根节点本身就是 overflow 且可滚动的。Layout Objects 也树结构存在，几乎与 DOM 是一对一，但并非总是如此。比如伪元素、浮动元素。![layout](https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342851.webp)在 style 计算后会构建一个没有填入任何数据的 **Layout Tree**。**更新布局**的本质就是遍历 layout tree 并向里面填充所有数据。Slides里说目前没有把 Layout Stage 的输入输出区分开，但没细说，只是说下个版本会改。放个图![Layout Stage NG](https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342852.webp)#### Paint to display item lists做类似于在指定坐标内画一个红色的矩形这样的动作。代码结构上 ，是 LayoutObject 有一个 Paint 方法。去调用更底层的 Paint  API。**此阶段生成“作画步骤”，还没有真的画出像素**。步骤是可以重放的。至于为什么这样做，之后再说（然而之后并没有说）。Paint 是从 z-index 最大到最小进行的，而不是 DOM 的前后顺序。而两个并列的层叠上下文时，后覆盖前。在一个 CSS/层叠上下文 内，按层叠上下文的堆叠规则绘制（z轴的层叠规则），如图![image.png](https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342853.webp)#### Rasterization 栅格化将 Display Item（位于 CC Layer 中，之后说）中记录的 Paint 操作转化为**位图**(bitmap)。raster bitmap 通常保存于 GPU 内存中，被 **OpenGL Texture Object** 引用。GPU 不仅可以保存 bitmap，也可以生成 bitmap。叫 **accelerated rasterization**。**此时像素纹理已经生成到内存，但还是没有画到屏幕上。**![Rasterization](https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342854.webp)栅格化通过 **SKIA 库**生成对 **OpenGL** 的调用。SKIA 提供了一系列对硬件的抽象。具体而言，PaintOps 会调用 SKIA 中的 SkCanvas 对象。![SKIA](https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342856.webp)由于渲染过程是在 sandbox 进行的， 不能产生系统调用，OpenGL 调用是通过 command buffer 塞进另一个进程 **GPU Process** 执行的。GPU Process 接受到绘制命令后通过 GL API 去产生真正的 GL 调用。使用 GPU process 隔离渲染进程除了渲染进程有沙盒机制外，OpenGL 可能也不太稳定或者是有漏洞。GPU Process 可以做一些保护措施。GL API 来源于系统动态库 `libGLESv2.so`。但是 windows 中来自于 Google 的 ANGLE 库 `libglesv2.dll`，因为 Windows 上渲染不是用的 OpenGL，而是 DirectX API。ANGLE 库可以翻译 OpenGL 调用为 DirectX 调用。![GL API](https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342857.webp)## 3. 图层合成### 3.1 帧与动画每一帧是当前 Web 内容的完整呈现。动画是连续的帧。针对第一部分提到的 style、layout、paint、raster，浏览器都做了跟踪失效的处理，只重绘改变的部分，其他部分复用。### 3.2 合成线程一个单独的渲染线程，减少 JS 主线程的其他操作和渲染之间 block。**图层**给合成线程渲染。比如 video 和 gif 在单独的图层，还有 transform3D, will-change 等 css 属性也会新建图层进行处理。合成线程也需要处理交互。能处理的先合成线程处理（比如滚动），处理不了的就进主线程。**Layer Tree**（CC Layer Tree）图层也是以树结构存在，前序遍历。有的图层的存在不是绘制，而是图层效果，比如剪贴蒙版、滤镜。![layer tree](https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342858.webp)图层的合成位于 CC (Chronium compositor) namspace, 所以代码里有很多 `cc::layer`。如果一个 Layout Object 没有指定单独的 layer(比如没有 will-change 属性)，就会被绘制到父 layer 的图层。Paint Layer 是要被分到 CC LayerTree 的。这就是CSS/层叠上下文与CSS/图层之间的关系。![image.png](https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342859.webp)![paint layer map](https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342860.webp)### 3.3 compositioning update在上一章的流程中，没有讲到合成这步，实际要加上。因为合成不是必须的，但合成步骤能优化渲染。![更新合成](https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342861.webp)未来，创建图层的工作会放到 paint 之后（slimming paint）![commit](https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342862.webp)**commit**提交一次合成。这里合成线程与主线程都存在 layer tree，需要同步合成线程与主线程的状态。### 3.4 Tilling在 rastering 阶段，把 CC layer 分块成 tile。**tile 是 raster 的最小单位**，在专门的 **raster 线程** 进行栅格化。合成线程有一个 **tile manager** 安排 tile 优先级。不同分辨率的 tile 策略是不同的。### 3.5 Drawing不同 tile 合成为 **Quad**。Quad 引用内存中的 raster output，封装在合成进程中，再提交到浏览器进程。浏览器动画帧的**帧**概念就是 Quad。![Quad](https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342863.webp)不同 commit 有先后顺序，需要从 pending **激活**再绘制。### 3.6 Display浏览器进程将 Quad 展示到屏幕上的过程。位于 Viz 组件中，调用 OpenGL 绘制 GPU 进程中的 Quad 资源，和 rastering 的 GL call 一样。大部分平台的显示合成输出是双倍缓冲（有过游戏画面撕裂经验的应该对这有概念），quad 是在后台缓冲器（GPU的还是Viz？）中绘制的，用 swap 命令让后台的 quad 到前台展示。## 4. 总结Blink 引擎严格执行了主线程的步骤。但由于要实现 Web 平台化，是有一些合成线程的权限的。![总结](https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/202402292342864.webp)## 其他渲染器和浏览器都用到了 GPU，都有向GPU进程的IPC通道。如果想让滚动的交互产生的动画不在主线程而在合成线程执行，需要强制 will-transform 分层","description":"浏览器渲染原理","keywords":"浏览器，渲染，回流，重绘","date":"2024-03-01 07:45"},{"id":"2023-11-29-windows-shell-configuration.md","title":"Windows 命令行相关配置","content":"## 常用 shell一直以来 windows 的命令行方案都很多，都不好用，怎么配置也是仁者见仁智者见智的一个事情。先总结一下常用shell 方案- `powershell` 官方shell，各种工具库支持最全，缺点自带的命令太长，以至于完全没有日常使用的想法。- `msys2` windows 上的类 unix 环境，基于现代 Cygwin (POSIX兼容层) 和 MinGW-w64（工具包）。确实像 unix，一般命令可以无缝迁移。缺点是兼容性，需要手动配置很多东西，比如是否继承 windows 环境变量，有多容易冲突。- `git bash` msys2 阉割版，无包管理，多了 git。- `wsl` 完全的 Linux 子系统，缺点是太占内存。## 方案选择我需求- 常用命令必须是类 unix 命令- 有包管理器，第三方工具配置友好- 不要太占内存结果发现这就是经典的三圈相交，没有任何一个常用方案能满足以上要求。最后，我决定用 powershell。除了第一条外都满足。后面两条属于难以解决的硬伤，而第一条可以编写脚本，将常用的命令模拟。### powershell 配置流程包含工具包、终端美化。1. Install the latest Powershell Core2. Install [git-bash](https://gitforwindows.org/) for basic bash and git tools3. Install [Windows Terminal](https://apps.microsoft.com/store/detail/windows-terminal/9N0DX20HK701?hl=zh-cn&gl=cn&rtc=1) and open Powershell4. Install [PSReadLine](https://github.com/PowerShell/PSReadLine)5. Install [posh-git](https://github.com/dahlbyk/posh-git)6. Install [oh-my-posh](https://ohmyposh.dev/) for showing extra info in term.7. Install [gsudo](https://github.com/gerardog/gsudo) for softlink8. open `$PROFILE` in powershell, append the contents of [**Microsoft.PowerShell_profile.ps1**](https://gist.github.com/Sansui233/0451b8f7c354d600c4efa74fc284d39c#file-microsoft-powershell_profile-ps1)大致介绍一下用途。- git-bash，一系列类 unix 工具，git 一类的- Windows Ternimal，微软的终端。我拒绝终端用electron 去套的……- PSReadLine，改变一系列 powershell 的行为。比如复制粘贴的快捷键。可惜在 vscode 里会没用，只能右键粘贴。- posh-git，显示 git 的状态- oh-my-posh，美化。具体主题可能需要会自己改一下，要么丑，要么不支持提示 conda 环境或者 npm 环境。- gsudo，提权，类似 unix 的 sudo。可能运行时会被杀软报毒，需要加入信任区。powershell 的用户配置文件输入 `$PROFILE` 就能找到。我的配置文件上传到了 [**Microsoft.PowerShell_profile.ps1**](https://gist.github.com/Sansui233/0451b8f7c354d600c4efa74fc284d39c#file-microsoft-powershell_profile-ps1)。需要挂代理打开。配置文件包含 `ls` `ln` `open` `grep` `which` 等命令模拟。powershell 的缩写默认支持了 `mv` `cat` `rm` 等命令，配合起来日常基本够用。## 终端代理我在配置文件中设置了`proxy`和`unproxy`函数，以快速设置与取消终端的代理连接。自己改下端口就能用。因为我自己习惯上不开系统代理，都是软件内的 http 连接。## 其他常用工具- winget：自带的包管理器，命令行工具都是这个装的。部分用的 scoop，非常少。还有的直接用的官网 setup。- nvim：命令行编辑器，vim 的替代品。我用的是发行版 AstroNvim。之前也有自己折腾插件，太懒得维护了，算了。- nodejs：JS 环境，nvim 的插件要用，开发也要用- zoxide：快速跳转目录。最有用的功能没有之一。类似 unix 的 autojump- Terminal-Icons：ls 命令加 icon，还能解决 ls 不高亮的问题。但是，颜色很丑。但是，我不也想再配置了，配置真的心好累。- ripgrep：类似 grep 的用法。我在模拟 grep 命令时只是单纯替换成了 findstr，真的 grep 建议用 ripgrep (rg) 替代。nvim 的 telescope 一些插件也会用到。安装脚本汇总：```powershellwinget install condawinget install neovimgit clone --depth 1 https://github.com/AstroNvim/AstroNvim ~/.config/nvimwinget install gerardog.gsudowinget install OpenJS.NodeJSLTSInstall-Module -Name Terminal-Icons -Repository PSGallery; Import-Module -Name Terminal-Icons# z-jumpwinget install zoxide # z-jump, see https://github.com/ajeetdsouza/zoxidewinget install BurntSushi.ripgrep.MSVC # grep 的完全替代品```","description":"","keywords":"Windows命令行, Windows调整，Windows设置, powershell","date":"2023-11-29 12:07"},{"id":"2023-11-11-typescript-generatic-type-proble-ts2322.md","title":"关于 typescript 泛型中返回值类型约束的问题","content":"最近遇到这么一个需求。> 定义一个函数接口，要求其返回值类型是 type A 的任意超集。于是我按直觉写下了：```typescripttype A  = { a: string }type FuncA  = <T extends A>() => Tconst f: FuncA = () => {  return { a: \"ok\" } }```人来看非常简单知道是什么意思，就是返回值包含所有 a 的属性，其他属性全是可有可无的。这段代码扔给 GPT，它也看不出什么毛病。但事实上，在 return 时报了一个错：```textType '() => A' is not assignable to type 'FuncA'.  Type 'A' is not assignable to type 'T'.    'A' is assignable to the constraint of type 'T', but 'T' could be instantiated with a different subtype of constraint 'A'.ts(2322)```这个报错非常的不 helpful。因为平时， typescript 可以根据返回值推测出具体函数标注。比如```tsfunction foo(){  return \"1\"} // 自动推断出函数的具体签名为 () => string```那为什么上面的报错例子，不能做这样的推断呢？```tstype A  = { a: string }type FuncA  = <T extends A>() => Tconst f: FuncA = () => {  return { a: \"ok\" } } /* 推断出具体的签名类似于() => {  a: string;  [name: string]: any}*/```也就是说，a 是必选属性，其他属性全是 optional。（先不讨论 Object 的 key 可以是 Symbol，只是为了看起来好理解，我只写了 string。要写全这里又要多写一个类型推断。）当然这里又引发了另一个问题：你为什么不直接把 type A 定义附加任意可选属性？好问题，这是一个正常的解决 TS2322 问题的思路。但是我就是想知道为什么泛型推断不能直接做这个……我查了很多资料，没有人完美解释这个问题。但有一个相似的问题：如何让参数和返回值持有相同的泛型类型？在 typescript 的 [github issue](https://github.com/microsoft/TypeScript/issues/50027) 里有详细的案例说明，务必看看，很好懂，说是故意这么设计的。这里我将理由简短概括如下：> 如果 f 是上有一个额外的属性 prop，编译器如果推导出了返回值类型成 typeof f。之后你调用 f.prop，静态编译不会报错，但实际上有一个 runtime error，因为你的真实的返回值只是一个 `()=>{}` ，没有prop 属性。但个人觉得这里静态编译应该报错，并不是一个 runtime 错误。前面说了，typescript 可以对返回值进行静态的类型的检查。以上面 issue 为例，理想的报错设计是长这样：```tstype A = () => void;type B = () => void;// 类型签名为 <T extends A | B>(value: T) => T 的实现function f1<T extends A | B>(value: T): T {  return () => {};  // 推断出 T 此时是 typeof ()=>{}，也就是 ()=>{}}let f: any= ()=>{}f.prop = \"haha\"f1(f) // 这里传参报错，因为 typeof f 和 typeof ()=>{} 不一致。本质上就是 ts2322 描述的问题，但不应该在上面报错```当然上面的例子返回值类型已经定了是 `typeof ()=>{}`，返回值再标注 T 显得十分多此一举。但是 f1 对只是对这个函数签名的一种实现。完全可以实现对这个函数签名有不同的实现，返回不同的 subtype。> 什么是 subtype？T extends A，T 就是 A 的 subtype这又引发了另一个问题：这和函数重载有什么区别？当然有区别啊，最大的区别就是我能定义一个统一的函数接口，只要返回值满足最基本的约束 `A`。但可以是返回不同的 subtype，实现也分开写到不同的文件里，类似于 oop 语言中返回所有某基类的派生类。这才是完全体。但现在的 typescript 完全做不到这一点，返回值只能是一个非常具体的 type，要么就抛出一个毫无说服力的 ts2322 错误。如果要解决开头的问题，大概是以下三个思路：- 定义 A 时，把所有可能要用到的属性都写到可选属性里，或直接 `[name: string]: any`。- 考虑业务场景，其他未知属性不留下会影响到什么吗。99% 的场景是没有必要的，也就是说这个需求就是没意义的。剩下的 1% 我没有遇到/想到。- 根据输入参数的 T 写一个类型推导，手动将返回的类型设置为 a 的具体扩展类型。类似这样```typescripttype Extend<T extends object> = {  [name: string]: any} & {  [K in keyof T]: T[K]}type A  = {a: string}type FuncA  = () => Extend<A>const f: FuncA = () => {  return { a: \"ok\", b:\"extra\"} } f().a // a is stringf().b // b is any```总之，在目前的 typescript 中，**返回值类型不能是泛型**。当然这样也失去了扩展的类型检查，等于是用了函数的签名来检查的，和返回值的类型一点关系也没有。现在 typescript 的静态检查器其实已经做了一些运行时的功能，比如条件语句判断以排除属性。但是，这些像运行时一样的检查只在静态类型不明确时才起作用。就这个 if，我已经遇到了好几次无法判断的 bug ，清空缓存并重启才恢复。说回第二点，既然你允许传了任意值，也就说明在你这个库中，你也不知道其他附加值具体是拿来干什么的，大多无非遍历一下再过滤一下。如果是静态类型检查器来遍历，诶诶扩展属性怎么全是 any。最终还得用 JS 的运行时来做这个事情……所以有拿来做什么的话早就在 A 里增加 optional 属性了。这也是为什么说 99% 的场景这个需求其实不存在。还有一个更重要的原因，那就是，ts 的类型体操，实在太他妈难写了。---可能没用的参考：- [typescript - How to fix TS2322: \"could be instantiated with a different subtype of constraint 'object'\"? - Stack Overflow](https://stackoverflow.com/questions/56505560/how-to-fix-ts2322-could-be-instantiated-with-a-different-subtype-of-constraint)- [Could be instantiated with a different subtype of constraint · Issue #50027 · microsoft/TypeScript](https://github.com/microsoft/TypeScript/issues/50027)","description":"","keywords":"typescript, ts, generic type, ts2322，泛型约束","date":"2023-11-12 06:26"},{"id":"2023-10-09-the-little-prince-review.md","title":"重读《小王子》","content":"《小王子》在不同年龄阶段都看过，中译和原著也都读过，当时只是觉得有趣。但尝试自己写故事后，才惊觉其实所有的有趣都是是作者的刻意表达。仅仅以生活中的“有趣”与“想象力”写出的故事远远不够，别人看起来并没有你认为的那么有趣，内核是空洞的。人在成年人后，所经历的一切容易让笔下故事的发展陷入自身所见所闻，很难写出孩子般质朴的想象，无法逃离现实的束缚。举个例子，如果你的故事需要一个超现实的“天体引力”进行推动，你会用怎样的方式让这样的力产生？我搜集了很多宇宙的资料，试图从中找到什么想法。但事实上我并不是想写硬科幻，也没人想在简短的剧情中读一大堆物理考据。我对此一筹莫展，觉得怎样都编不出一个合理的解释……最后决定拉出上帝作为隐喻，上帝按自己心意去裁定天体引力。听起来很离谱吧，就好像是小孩子的瞎想，仅仅是“上帝裁定天体引力”不也是一具无意义空壳吗？但如果将这个设定赋予别的象征，就不再是无意义的。或者说，我其实是想象征什么，才拉出一个离谱的上帝。不过这个处理我也并不满意，但一时想不到更好的方法。幻想的意义不在于幻想本身，而是幻想对故事带来的推动。感到有趣的事在深入思考后也不仅是罕见、超现实的表象，它会带来的新体验，又或者：“喜剧的内核是悲剧”。今天复看《小王子》，试图从写故事的角度去理解，作者在下笔时是带着怎样的想法与心情呢？或是单纯是觉得有趣吗？怎么想出这些光怪陆离的可爱小故事？我是一个强逻辑性的Ne人，这样的思考也许能提高一下Ni的水平，带来一些不一样的启发。## 第1章介绍“我”与“大人”之间的区别。“我”在成为大人后 ，依然有着孩子般的心灵。如果不是这样，后文的“我”将是一个很难理解小王子的大人。体现这一点是“蛇吞象”与“帽子”的故事（作者真的很会想）。大人看东西只关注现实，不现实的事情对于大人毫无意义。## 第2-7章介绍小王子的由来。“我”困在沙漠中时遇到来自另一个星球的小王子，一个礼貌的、有点忧伤的小王子。小王子想要我画一只绵羊给他，但挑三拣四，最后对一只藏在箱子里看不见的小绵羊表示满意，还觉得小羊在箱子里睡着了。为什么想到在这里安排这么一只奇怪的绵羊，如果仅仅想有趣，那安排一只会走钢丝的山羊不行吗？读到最后才隐隐有了答案——美丽的事物往往是不被看见的，这也许是“箱子里的羊”的动机。第6章的写小王子星球上的猴面包树。从编剧的角度，不描写羊吃什么食物也无伤故事发展，但写了，还写的是特别具体也不常见的猴面包树，大概是有什么想法在里面的。猴面包树是会无限扩张的、不好的东西，但这和小王子的生活有什么关系呢，也就是多了一些并不让人开心的日常打扫。我不认为这里是象征自私的欲望、野心，小王子的星球上没有出现这类元素的必要性，含义也并不太深刻，在后续别的星球遇到更合理。后来看知乎上感觉有一个（我认为）挺靠谱的说法：> 作者发表时正值二战期间，作者是一名法国人，国土沦丧旅居纽约。旅居纽约的法国人又分成戴高乐派和维希派，他想劝告两派捐弃前嫌共同对敌，却遭到两派的夹攻，非常无奈，这三棵灌木正是代表法西斯的德国、意大利和日本。破坏这份宁静的、疯长的、夺取人生存空间的猴面包树。然后引出了对于小王子最重要的玫瑰花。作者是先想到绵羊再编出的玫瑰花，还是本来就想写玫瑰花与小王子的故事、再编出绵羊？如果以先写大纲让剧情先行的角度，我偏向于后者。无论以何种方式开始，绵羊和玫瑰花的情节是精妙契合的。情节的前后衔接一向不是一个简单的事情，如果先写剧情可能人物 ooc，如果先写人物可能会想不出后续，好多长篇就是这么坑掉的……这部分里还有一些别的情节，比如说谈到小王子的星球叫做行星 B612 时，讽刺了大人们喜欢以衣冠取人，关注外在与代号，不关注人的本质。小王子的星球上还有两座活火山一座死火山，非常有趣的脑洞，对剧情发展没什么用但并不觉得无聊，气质很符合小王子的星球（氛围渲染也是有必要的？）。小王子有一天最多看了43次日落，后文对不同星球的日落次数描写对比起来也非常有趣。至此基本表现出了小王子日常生活。## 第8-9章玫瑰花与小王子的相处这两章浪漫温柔，明显以人物情感先行，对话自然发生。剧情上没有太多刻意安排。有刻意安排的剧情是小王子最后一时冲动生了玫瑰花的气，离星出走。虽说是生气了，但看起来还是十分的文艺……整个文笔的基调就是这样的，very童话。## 第10-15章离星出走章节。不同星球上住着不同的奇怪大人，写得非常直白。后面有许多章节都会显得较为独立且直白，是娓娓道来的日常故事。第10章：有理性但放不下权威架子的大人。第11章：爱慕虚荣的大人。第12章：永远在犯同样错误的酒鬼。非常短，像四格漫画一样，但闭环的对白好有趣。第13章：除了钱和财产再脑子也容不下别的东西的商人。一些人看到什么东西就觉得是自己的，什么也不做就想据为己有，像是在讽刺资本主义的起源嗯……第14章：守规矩的、不知变通的打工人。观看一千多次日落这个吐槽也很有趣，像是人物先行写出来的。第15章：不出门的地理学家。看到好多模板的影子：不深入基层的高高在上的 leader、掉书袋不实践的人、把别人的成果据为己有的人、不切实际的甲方。地理学家知道地球，但连自己的星球上有没有大洋和火山都不知道，却觉得理所当然。## 第16-19章小王子来地球的见闻。第16章介绍地球。第17章小王子来到地球寻找人类，第一个遇见的毒蛇是为以后小王子回家埋下的伏笔（好残忍）。第18章向花问路的写作视角很有趣。以花的视角，人没有根，所以被风送走了。第19章的回声有点类似空镜的作用？我不理解，但隐约觉得好像是有用的，好可爱。## 第20-21章算是主线章节（？）很多玫瑰的花圃，小王子最初知道自己的玫瑰在外形上不是独一无二的后，很伤心。但小狐狸的出现又让他明白了> **正是因为小王子在玫瑰身上花费的时间，才使得玫瑰变得如此珍贵。因此单她一朵，就胜过了这世间所有。**此外小狐狸还教会了他仪式感。## 第22-23章永远在向往别处，行色匆匆，忽视脚下风景的人。永远在节省时间，追求效率的现代人。## 第24-25章沙漠里的井水，突出主题的两章，和星星上的玫瑰花一样。这个情节的设置和作者的自身经历有关，对于没有经历过的人而言难以复刻。> “沙漠美丽，因为沙漠的某处隐藏着一口井。”> “房子也好，星星、沙漠也好，美化他们的东西，是肉眼看不见的。”## 第26-27章小王子通过死亡回去了，“我”不舍。这两章人物先行，对白比较重要。总体感想是，这是一本给成年人读的童话。我清楚记得我小学时看到第一章，只觉得这是一个有点可爱的怪孩子。到高中时，可以感受到文笔有童话的美好，但并不太理解作者要表达什么。大学时看原著也没有懂，纯学英文去了。直到现在才对里面的情节有所体会。小王子的“童真”是人在成长过程中需要慢慢获得的，是成年人的反思，在小时候的记忆中类似的想法我从未存在过。小时候反而会现实得多，真正的小孩子有着更原始更本能的残酷。语文考试总是在问“作者在这一段想要表达什么”，小时候总觉得有时候是出题想太多。现在觉得，不是的，但也不应该有标准答案。刻意设计的剧作可以解释，很多人带着心情自然而然书写而成的东西，自己也是无法准确剖析的。剖析自己对每个人都是困难的，何况是一纸之隔的他人呢。","description":"","keywords":"小王子,世界名著,童话,读后感,书评","date":"2023-10-09 21:56"},{"id":"2023-09-29-windows-system-chinese-fonts-adjustment.md","title":"Windows 调整之中文字体","content":"> 以下仅适用于低于 4k 缩放 200% 的显示器微软雅黑作为随着 Windows7 出现的字体，加上遥遥领先（？）的 ClearType，在当时的 1080p 显示器上十分清晰易读。但如今的显示器分辨率越来越高，旧版微软雅黑的设计存在着明显的缺陷。一是其字形设计并不平衡，中宫过大，有的字形可以以难看来形容；二是微软雅黑字形只在 4K 屏上有着准确的显示。如果你不巧像我一样用着 2.5K 屏，在 ClearType 的加持下，仔细观察资源管理器侧边栏中，“桌面”二字短横的间距并不平衡。微软曾经设计过“另一版的微软雅黑”，即 Noble Scarlet，但不知出于何种原因并没有在正式的系统中使用。这一版字体设计依然中宫偏大，但相对老版收敛了不少，平衡了一些。据传言汉字部分是兰亭黑 Pro。但这个字体在标点处理上很差，最直观的就是中文引号，太像西文的处理方式，很难看出前引号与后引号的区别。其实我在写这一篇文的时候，换了 Typora 的字体，才发现前后引号全打反了……个人推荐的配置和工具如下：- **Noble Scarlet**  替换系统的微软雅黑。由于版权原因无官方公开链接，需自行搜索- 系统字体替换工具：自行搜索 “字体替换工具 by 随风飘扬”。win7 时代的产物，太古老了找不到原作者出处。替换完后最好重启，否则可能有一些错误，比如字体大小错误。另外，github 上还有一个非侵入式的系统字体替换工具 [noMeiryoUI](https://github.com/Tatsu-syo/noMeiryoUI)，但是换不全，只是作为预览不同字体在系统上的效果倒是个很不错的工具。- [**MacType**](https://www.mactype.net/) 改善 ClearType 丢细节带来的不平衡- 安装一个 **苹方**。有一些中文网站 Fallback Font 也是苹方在前。由于版权原因无官方公开链接，需自行搜索。浏览器对于字体的渲染不受 MacType 的影响，在PPI不足的情况下，浏览器的渲染是偏细的，默认设置还得是微软雅黑。- **[思源宋体](https://source.typekit.com/source-han-serif/cn/)**：推荐将浏览器的 Serif 字体设置为此字体。默认的宋体真的，不论中文英文，都很丑……只适合打印。苹方是一款设计上很优秀的字体，但它对于低 PPI 的显示器不友好，人话说，不是4K屏缩放200%都别用。首先苹方粗体相对其他黑体本身就较细，在 ClearType 下，苹方被削掉的细节使得其字重偏小，Bold 看起来像 Medium。另外，苹方在 2.5K 屏上表现非常糊，毕竟苹方问世时已经 Retina 屏已经出了好久了，人家压根没考虑过在低 PPI 屏幕上的表现。最后是版权问题，当然苹果大概不会因为这点事起诉个人用户。更纱黑体也非常适合作为 windows 的系统字体，在 1080p 和 2.5k 下都能保证良好的清晰度。相比起微软的两款字体，更纱黑体可以称得上是秀气了，但汉字覆盖率不如系统级别的字体。自己看下来，更纱黑体与思源黑体设计的细节不太统一，比如“用”字明显矮了一截，使句子看起来不太稳定。但是在宋体设计上，“用”字矮的这一截反而让字体看起来平衡。一个系列的字体的统一感和比例关系又很大，个人理解为思源/更纱系列是优先考虑宋体的字形，但也不是传统的宋体字形，和黑体的比例有一定的结合。整体而言还是宋体的设计更加优秀。思源黑体作为更纱黑体的前辈，是不太适合低 ppi 屏的，它的 Regular 字重看起来像 Bold。","description":"让 windows11 字体更好看的一些设置与字体浅谈","keywords":"Windows工具, 软件推荐, Windows调整, Windows设置, 字体, 字体设置, Noble Scarlet, 微软雅黑","date":"2023-09-29 10:25"},{"id":"2023-09-26-minecraft-settings-for-v1-20.md","title":"Minecraft v1.20.1 常用设置","content":"updated at：2024-03-26***在 Minecraft 1.20 版本光照引擎被大幅改写，使得帧数提升，模组的数量似乎又多了起来。另外在 fabric 发展起来以后，mod的社区生态有了很大的变化，有很多老牌模组有了更新的替代。现在记录一下实现常用的基本功能需要的模组与修改设置。我使用的 hmcl 启动器，在其中进行模组下载可显示模组间的依赖情况。以下内容在 1.20.1 中完全兼容，且项目均在维护中。## 1. ModsMC 是一款肝度明显过高的游戏。mod 的选用主要是为了：1. 使画面养眼2. 降低肝度，同时少引入额外的快捷键3. 优化细节使用体验使用以 fabric-api 构建的模组。### 1.1 渲染类- Sodium: 渲染优化之神，许多模组的前置- Sodium-extra: 渲染优化之神的扩展，相应 GUI 为reeses sodium options- Lithium: 原版机制的算法改进- Iris: Sodium 加光影- Custom Entity Models: 自定义实体模型，增强对 optifine 材质包的支持- Continuity: 无缝纹理，安装后需要启用相应的材质包- Indium: 许多模组的前置，提供 Fabric Rendering API的支持### 1.2 功能类- modmenu: 显示所有模组和相应的设置页面（如果有的话）- carpet: 单人生存必备，可使用命令放置假人以常加载区块刷红石- tweakeroo: 一系列微调的小功能。主要使用 freecamera（灵魂出窍）以获得更好的摄影视角，zoom 开启类似 optifine 的按 c 视角放大，handrestock 可自动补货手里的工具、方块- JourneyMap: 小地图，降肝度必备。Xae 的小地图也不错，两者都需要设置一下显示的东西，默认会非常多，我只开启了玩家、时间、坐标。关闭了网格显示和生物显示。- Invertory Profile Next: 高版本的 R 键背包整理（但被我改成 Z 键整理，R 键通常是 rei 查看合成表）。自动补充工具、连续合成、捡物品时默认扔到背包中，以及在打开箱子时使用滚轮移动物品。关掉快破损时替换工具。- Carry on：手里没有东西时，`shift+右键` 搬运箱子，降低装饰的肝度。- Roughly Enough Items: 物品搜索，查看合成配方、查看方块用途，ctrl点击后快速移动到合成台。尽管原版有合成书，但一页条目显示太少，且不支持拼音搜索，不支持模组物品。REI依旧方便很多。- imblock: 输入法冲突修复- Panda's falling tree：砍树时树会倒下，降低砍树的肝度。- Leawind's Third Person: 更好的第三视角。这算是第一个可以日常使用的第三视角模组，挖方块瞄准都很方便。日常的垂直平滑 0.5 以上，不然爬山能晕死。- better combat: 动作战斗优化，攻速和攻击范围都有反馈了。- Litematica：投影。辅助红石机械建造，也算是一种降生存建筑的肝度。使用相当简单，一根木棍，control+滚动切换模式，快捷键进菜单。最难的其实是收集足够多的预置模型。### 1.3 新物品- Gliders：类似塞尔达的滑翔伞，防摔。在空中按空格展开滑翔。使用方式和大部分游戏一致。只是要占一个盔甲位。动画做得很不错。- Waystones：传送石碑，后期物品，降低交通的肝度。如果用地图作弊路径点传送就不需要这个东西了，但理想的玩法还是地图只是用来看的，让传送石碑在地图上显示（需要前期多刷小黑），只能传送石碑处，禁止任意传送。传送石不是个好设计，MC背包不能放下更多东西了。除非有单纯扩容用的背包模组。- travelersbackpack：背包模组，终于有了 fabric 版。虽然 mojang 一直很谨慎地加入新的方块，但似乎从未考虑过方块越来越多时的背包使用问题。再者模组整合包也因为方块种类数爆炸的问题增加背包模组。在 1.12 版本时，背包容量是刚好够的。个人并不是很喜欢背包的设计。## 2. 设置- 画面尺寸: 1920*1080@60fps，窗口化- 视场角: 85- 鼠标灵敏度: 75- 模拟距离：8- 渲染距离：12### 2.1 快捷键修改#### 游戏主界面首先把 ctrl 改到 capslock 键位，方便疾跑。系统全局 powertoys 改的（吐槽一万句control的键位）- 长按 `tab`，滚轮切换物品栏。在tweakroo 的「工具」中开启 hotbarscroll，再在 tweakroo  的「快捷键」中把 hotbarscroll 的快捷键设置为 Tab。 - `v`: 切换第三人称视角(visual)，很常用的功能。原本是f5，实在太远了- `f4`: Leawind's Third Person 第三人称视角相机调位置。同时关掉左右切换。点按左右，长按居中- `f5`:  灵魂出窍，在 tweakroo 的 freecamera 中设定- `c`: 望远镜，在 tweakroo 的 zoomactivate 中设定- `t`: 路标点传送管理(transport)。聊天改 `enter` 键- `x`: 锦致装饰-箭袋- `m`:  显示 jouneymap 大地图和设定。Journey map 的其他快捷键全关掉。- `n` Litematica 投影菜单- `shift+右键` 空手时搬运箱子，carry on 自带。特定工具下的修饰键：- 木棍工具  - `~`  Litematica 木棍工具修饰键，改变区域大小  - `n+space` Litematica 木棍工具模式5下放置投影预留键位：- `g` 圆盘菜单- `~`  特定工具修饰键，比如连锁挖矿- `b` 背包(backpack)- `j` FTB任务书(journal)- `左alt` 创造模式下，建筑模组 axiom 用 alt 切换专用物品栏。#### 合成台、箱子UI- r: REI 查看光标下物品的合成方式- u: REI 查看光标下物品的用途- ctrl + 左键点击REI的物品，移动物品到合成台- z: 一键整理。在 IPN 的设置中修改。- 使用滚轮以在背包和箱子间移动物品，按shift移动整组## 3. 光影- BSL v8.2.04，默认配置High，把 Camera 中的 Bloom 关闭，把 Atmosphere 中的 fog 调到 0，开启 lighting 中的handDynamicLight。抗锯齿的TAA随便开不开，取决于风扇响不响- Complementary Reimagined，默认配置 medium，high 会开启镜面反射运算量明显变大## 4. 材质- 任意矿物发光材质。比如 [New Glowing Ores](https://www.curseforge.com/minecraft/texture-packs/new-glowing-ores)。主要是因为 BSL 光影没有矿物发光，所以要加一个材质以确保有 fallback。- [彩虹像素](https://afdian.net/a/Nan2uu)，非常优秀的免费猛男材质包，原版风但更精致。有很多更可爱的附加包。## 5. 创造模式相关 mod：effortLess buidling、 lotweaks 和小木斧。玩生存时需要关掉。直接影响开局。一些建筑相关的设置。### 快捷键TAB: effortLess buidling 轮盘，会覆盖 tweakroo 的切换物品栏设置。q: lotweaks 轮盘，和手中方块有关。会禁用丢东西（但创造模式本来就不用丢东西除了篝火灭火，何不用 Axiom 的调试棒？）左 alt： Axiom 的大菜单r: Axiom replace，其他的模组类似功能关掉。实测下来 replace 相当常用。","description":"","keywords":"Minecraft, fabric, 常用设置, mods","date":"2023-09-26 10:38"},{"id":"2023-08-30-windows-tweak-and-enhancement.md","title":"Windows 调整之基础功能与常用插件","content":"自从感觉内存硬盘越来越不够用，以及对老黄的显卡需求，从 mac 换成了多年不见的 windows11 。做了非常多的调整，至现在基本稳定，记录下来以供参考。## 基本调整与基础功能增强- **右键菜单**     使用 [shell](https://nilesoft.org/download)，恢复被藏到“更多选项”中的的右键菜单项，同时保持 win11 的设计风格。并且带有用 vscode 打开和用 windows Terminal 打开。虽然说 Windows Terminal 自己也有一个“用终端打开”，但那个有 Bug，打开的目录会被两个程序同时占用句柄，导致无法对目录本身进行操作。- **批量重命名**    使用 [Powertoys](https://learn.microsoft.com/en-us/windows/powertoys/) 中的 PowerRename，可选中多个文件后右键批量重命名，整理素材时太有用了。大致与 mac 的多文件重命名相同。缺点是不能改成 `同名称 + 编号` 。但系统自带的重命名恰好只能同名编号。Powertoys 有很多别的小工具，但都不够好用，按需关掉。- **快速预览**    使用 [QL-Win/QuickLook](https://github.com/QL-Win/QuickLook) ，选中文件后按空格直接预览，再按空格关闭。对于看各种后缀的文本文件、zip 压缩包目录结构非常有用。也用了 mac 后没法割舍的一个功能。前面说的 Powertoys 也有，但快捷键一定要加 ctrl（真的难按），功能更少，图片不能显示大小，无法定制。- **文件快速搜索**   使用 [Everything](https://www.voidtools.com/)，我大部分使用场景是在卸载程序后，清除残留的下载数据与用户数据。- **快速启动/全局搜索**   使用 Listary - **优化合集**   [hellzerg/optimizer](https://github.com/hellzerg/optimizer) 微调 windows 的合集程序，包括禁止系统更新、改 hosts 文件刷新 DNS、移除开机启动项、添加自定义右键菜单等。- **历史剪贴板**：在 `设置→系统→剪贴板` 中启用。- **屏幕颜色配置文件(ICC Profile)**    在 `设置→屏幕→显示配置文件` 中，换成对应屏幕的sRGB文件。否则对于广色域屏幕，某些不读 ICC Profile 的照片查看器会出现色彩过饱和的情况。- **输入法**   微软输入法需要改成回车时键入英文，否则会清空，不方便中英混输。不过作为一个五笔用户，我现在使用的是基于 Rime 的 [98五笔输入法](http://98wb.ysepan.com/) 和 [我的配置](https://github.com/Sansui233/98wubi)。~~因为微软输入法 shift 加 空格会标点变全角，而这个功能在中英混输时非常容易触发，还不能改掉，实在太弱智了~~- **关闭顶部自动布局**   关闭 `系统→多任务处理→贴靠窗口`。此功能乍一看非常贴心，实则非常容易阻碍鼠标精准排列窗口，尤其是想把上沿拉到顶部时。不建议使用鼠标时开启，更适合手指操控设备。- **多线程下载器**   使用 [aria2](https://aria2.github.io/)，在网上抄了一个配置文件，并且让 chatgpt 写了一个开机自启脚本。面板使用的是 Chrome 插件 [Aria2 Explorer](https://chrome.google.com/webstore/detail/mpkodccbngfoacfalldjimigbofkhgjn)，考虑到都是在浏览器中下载，没必要使用独立的客户端 App。- **与手机互传文件**（折腾但稳定版）    使用 [alist](https://github.com/alist-org/alist) 进行磁盘目录映射，并且使用 [DDNS-Go](https://github.com/jeessy2/ddns-go/wiki) 动态绑定本机的 ipv6 地址到公网。手机上将相应的 alist 页面添加到主屏幕，便可在该页面互传文件。好处是能走局域网，速度快，不同网络环境下可用，可远程传输等等。依然让 chatgpt 写脚本将两个程序加入开机启动。## 硬件调整- 硬件信息监测  使用[hwinfo](https://www.hwinfo.com/)的实时监测数据作为硬件调整的基准- 功耗/风扇转速调整  使用 [g-helper](https://github.com/seerge/g-helper) 调整日常使用的风扇曲线。我买的幻16，作为全能本，出厂的奥创调教特别垃，首发时还有bug。它的三种模式  1. 静音模式风扇完全不转，经常温度突然飙升很吵地转一会儿  2. 性能模式开什么都以游戏本的方式转，对我来说挺吵的  3. 增强模式的声音不是给人用的。    如果用windows默认电源管理方案的话，似乎和程序资源占用有关，即使只有60度也给转上4000转。打个小游戏真的不配这么吵……    后面用g-helper关闭睿频，功耗限制35w。测下来开原神默认高画质 1080p 稳定在CPU 65度，风扇3500转，不卡。这代 GPU 的散热反而问题不大，至少玩原神不会超过60度。然后测试了带光影的 Minecraft 1.20.1。MC 对 CPU 的要求更高，不过单机的话，不刻意刷红石，35w也够了，一般在25w左右，温度还是差不多的65度，全程电压没有超过1V，降压对于控温还是很有用的。奥创之所以动不动就吵就是因为一开性能模式，什么都不干电压给到1.8V……没必要，真的没必要。    日常使用场景下，好像也就编译比较耗CPU，其他时候都用不到很好的CPU性能。图形处理还是占GPU更多。音乐制作一类的也是耗CPU但也还好，但更耗内存硬盘。## 音频调整- **[Equalizer APO](https://sourceforge.net/projects/equalizerapo/files/)**    调全局声音的均衡，需要搭配 [Autoeq](https://github.com/jaakkopasanen/AutoEq) 仓库中说的 peace 插件使用（现在好像直接叫autoeq.app）。耳机发烧友的必备。注意蓝牙耳机无法使用卷积eq。- **内录用虚拟声卡：[VBCABLE_Driver](https://vb-audio.com/Cable/)**    网上有很多教程，为轻量级内录解决方案。另外如果系统带有 xbox，用 xbox 的录制视频是默认走的内录。- **降低 Midi 键盘延迟**    键盘连接电脑练琴，无独立声卡时，可用 [ASIO4ALL](https://asio4all.org/) 降低延迟。效果显著。缺点是 ASIO 是设备独占的，比如宿主软件使用 ASIO 到耳机，那看 b 站视频就只能外放（或者别的耳机/音响）。","description":"","keywords":"Windows工具, 软件推荐, Windows调整，Windows设置，插件","date":"2023-08-30 17:42"},{"id":"markdowntest.md","title":"Markdown 测试","content":"此文件留做 Blog 开发的新 feature 测试文件。\n\n---\n\n## Draft 属性\n\n目前，在 yaml header 中，draft 属性设置为 false ，意思此 posts 将作为草稿，后续可能修订，不在 rss 中发布。\n\n此举主要是考虑到，由于某些 rss 服务的缓存机制，一旦获取过旧的 rss 订阅，即便后续更新过内容，后续读者也不会获得更新的内容。这使得 rss 的发布相对网页发布而言更加正式。而我个人写博客的时候通常较为随意，会有挤牙膏式修订。\n\n具体是否在网页上是标注为草稿待考量，~~设计太难了~~。\n\n添加于 2023-08-30 日。 \n\n## Code  HighLight\n\n```rust\nfn main() {\n    let x = 1;\n    let sum = |y: i32| { x + y }; // 说明： 闭包 sum 接收一个参数 y，且捕获前面的 x = 1, 返回 x + y\n    println!(\"{}\", sum(99)); // 输出 100\n\n    let sum2 = |y :i32| x + y + 1; // 也可以省略花括号\n    println!(\"{}\", sum2(99)); // 输出 101\n}\n```\n\n添加于 2023-09-15。\n\n## Typography\n\n排版，以功能性划分，而非纯粹的美学scaling划分。\n\n很多时候web的一级标题应该独立设计，不是正文的一部分，仅作字号展示\n\n# 很大很大的一级标题\n\n## 很大的二级标题\n\n分Section的功能，下面经常接的是正文或直接的三级标题\n\n### 三级标题\n\n正文，需要和二级标题在远距离明显区分\n\n#### 四级标题\n\n正文，一般不用\n\n##### 五级标题\n\n正文，一般不用\n\n###### 六级标题\n\n正文，图一乐。下面是夹杂在正文中的列表。\n\n- Item1\n- Item2\n- Item3\n\n完毕","description":"测试 draft 属性","keywords":"","date":"2023-08-30 10:54"},{"id":"20230822-Super_resolution_models_and_tools.md","title":"图像超分辨率工具推荐","content":"~~推特~~，现在叫 X.com，是我的桌面壁纸来源，但是推特的图压缩得非常糊，喜欢的动画人基本也只传 1080p 图，导致壁纸糊上加糊。因此需要使用 AI 放大模型进行图像处理。\n\n- 放大效果外链预览：[Comparison](https://imgsli.com/MjAwMDcx)\n- 细节对比：  \n![](https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/comparison.jpg)\n\n文章分为三个部分：\n\n- 图像处理工具\n- AI 图像放大模型\n- 如何使用\n\n## 图像处理工具\n\n### 1. [chaiNNer](https://github.com/chaiNNer-org/chaiNNer)\n\n一个无代码的图像处理自动化工具，可以实现批量改大小、调色、压缩、拼接等等等。同时也支持用 AI 对图像放大，也能接入 Stable Diffusion 的工作节点，上限非常高。缺点没有内置模板，即便是很小的功能（比如文件批量重命名）都需要自己创建。\n\n应用内置使用文档，不过不看文档也能一眼知道怎么用。\n\n**只有英文，没有中文。**\n\n- 传送门：[chaiNNer](https://chainner.app/)\n\n### 2. [imagestool](https://imagestool.com/zh_CN/)\n\n对于单张图和 gif 的常见处理小工具合集，网页打开即用，完全本地运行无隐私问题。特点是非常易用，支持小批量处理，支持 pipline，也就是说如果想在调整大小后转换格式再压缩，不需要每一步都上传下载图片，可以处理完每一步直接选下一步，只下载最终的处理结果。\n\n- 传送门：[imagestool](https://imagestool.com/zh_CN/)\n\n## AI 图像放大模型\n\n超分辨率成像(Super-Resolution，简称 SR) 是一种提高图像分辨率的技术，通俗的叫法就是图像放大。如果你曾经使用过 Photoshop 对小图进行放大，会发现放大后的边缘总是非常模糊，并且用锐化等操作无法弥补，这是传统方法的在图像放大上的缺陷。\n\n但是神经网络（Neural Networks，简称NN）的出现对图像放大的效果带来了极大的提升，几年前就已经有不少 AI 图像放大的应用，但最近两年的模型效果尤其好。下面介绍几个现阶段应用上比较火的模型。\n\n### 1. [SwinIR](https://github.com/JingyunLiang/SwinIR)\n\n2021年基于 Transformer 的图像超分辨率模型，放大任何图片的效果都非常好。风格偏锐利且干净，且参数少，处理速度快。此模型分为 3 类，经典图像超分辨率（Classical image SR）、轻量级图像超分辨率（Lightweight image SR）、真实世界图像超分辨率（Real-world image SR）。\n\n- 下载链接： [Release  · JingyunLiang/SwinIR](https://github.com/JingyunLiang/SwinIR/releases/tag/v0.0)\n\n可下载的版本很多，不知道选哪个的就选 [001_classicalSR_DIV2K_s48w8_SwinIR-M_x4.pth](https://github.com/JingyunLiang/SwinIR/releases/download/v0.0/001_classicalSR_DIV2K_s48w8_SwinIR-M_x4.pth) ，这个为4倍放大的模型，也是 Stable Diffusion 的 SwinIR 预置模型。\n\n### 2. [Real-ESRGAN](https://github.com/xinntao/Real-ESRGAN)\n\n2021年的经典图像超分辨率模型，这论文出来后大家疯狂在它基础上卷，基于 ESRGAN 改进的模型和论文非常非常多。不过最初的版本也已经足够好用。\n\n下载链接：[Releases · xinntao/Real-ESRGAN](https://github.com/xinntao/Real-ESRGAN/releases)\n\n依旧版本很多，不知道下哪个的下载 [RealESRNet_x4plus.pth](https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.1/RealESRNet_x4plus.pth) 即可。\n\n### 3. 4x-AnimeSharp\n\n基于 ESRGAN 架构的动漫类放大，~~可能由于训练集选得好~~，在众多动漫类放大中它可以很好地处理景深，其他的Anime模型多少在景深部分会有一些清晰过度的问题，包括著名的 [RealESRGAN 动漫模型](https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.2.4/RealESRGAN_x4plus_anime_6B.pth)\n\n- 下载链接：[AnimeSharp - OpenModelDB](https://openmodeldb.info/models/4x-AnimeSharp)\n\n OpenModelDB.info 上有更多的微调模型，可以试试。总体来说，AI 放大的图像质量目前来说还是乍一看可以，涉及商用美术的话质量仍然不过关。~~如果商用美术能过关，岂不是能画糊图然后丢AI出高精图了。~~ 作为壁纸放大非常合适，即便是补充的细节不能推敲，但把像素精度补齐到屏幕分辨率带来的视觉提升也是非常大的。4k 壁纸就是比 1080p 看起来舒服。\n\n## 如何使用\n\n使用 chaiNNer 时可照抄下图结构，使用 4x-AnimeSharp 模型放大原图、重命名图片并保存。\n\n![chaiNNer](https://cdn.jsdelivr.net/gh/NamiLing/upic/picgo/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-22%20213633.jpg)\n\n如果使用的是 [stable-diffusion-webui](https://github.com/AUTOMATIC1111/stable-diffusion-webui) ，Extra Network 选项卡中也有预置模型，可以使用 SwinIR 和 ESRGAN。\n\n---\n\n可能有用的资料：\n\n- [4x-AnimeSharp](https://openmodeldb.info/models/4x-AnimeSharp)\n- [Interactive Visual Comparison of Upscaling Models](https://phhofm.github.io/upscale/)\n\n---\n\nPS：强烈建议无代码应用都开发个 template market……不要做一堆功能摆那里就自由发挥了啊诶！当发现要什么工作流很难做时就会感知到这些无代码 App 的问题所在了……在实际应用场景中很烂！很难做！说的就是comfyui……","description":"AI图像放大模型+工具推荐","keywords":"AI，图像处理，图像放大，超分辨率，CV, SR","date":"2023-08-23 06:20"},{"id":"2023-02-20-stable-diffusion-AI-experience.md","title":"Stable Diffusion AI 绘画的实用经验与总结","content":"2023-03-03：待大量补充和修订。\n\n------\n\n进阶经验，非科普。分为五个部分：模型选择，分辨率调整，采样方法，ControlNet，Lora概述。\n\n此文章涉及多平台发布，由于生成类 AI 的争议，文中无外链推荐。\n\n## 一、模型选择\n\n模型影响构图和笔触和色彩，决定成图的平均水平。社区经常都在换流行的模型，还是根据需求定，huggingface 和 civitai 上很多。\n\n二次元目前主流三家 Anything Orange Counterfeit 。\n\n目前有不少混合了 2D 和 3D 的 2.5D 模型，用来出 cos 的，个人不喜欢。\n\n下图模型为 pastel-mix，图片画质已严重压缩（看不见则需要开代理，如果你用的 Innoreader 手机版阅读此文，大概率被放头图了）\n\n![pastel-mix](https://cdn.jsdelivr.net/gh/NamiLing/upic/uPic/00153-2596022983-masterpiece,%20best%20quality,%20ultra-detailed,%20illustration,%201boy,%20Link%20in%20Breath%20of%20the%20wild,%20sun%20shine,water,%20on%20back,%20lying%20in%20wa.jpg)\n\n### 模型精度选择\n\nfp-16(2G)，fp-32(4G)，full(7G) 用于生产没有肉眼可见的区别。full 主要是训练用的。fp16 生产够用了，快，占用小。\n\nbf-16(2G) 相对 fp-16 会损失一小部分细节，不推荐，会发布 bf-16 版本的模型也较少。\n\n### VAE权重网络\n\n影响色彩，主观效果是增加饱和度（比修图软件饱和度增强好太多）。目前流行的 VAE 就两个，一个 Waifu 的一个 Anything 的，很多带 vae 模型都是用的这两个改了个名字。\n\n下图为 mix-pro-v3-fp16 模型，叠加了其配套的 WD vae 的 效果。\n\n![Mix-pro-v3](https://cdn.jsdelivr.net/gh/NamiLing/upic/uPic/00045-311454338-Original%20Characters,%201boy,%20sea%20shore,%20%20pastel-full.jpg)\n\n### Prompt\n\nprompt（提示词）是玄学范围。不同模型的 prompt 词库不一，目前主流的词库有两个\n\n- 适用 SD v1.x 及其衍生模型的 lexica\n- 适用二次元模型的 Danbooru。\n\n对于二次元模型，Prompt 指定物体，调整动作、指定颜色比较容易。取决于模型的泛化能力。\n\nPrompt 难以精确控制画风，所以尽管上限非常高，但主流越来越不倾向于用大量 Prompt 叠 buf，转成微调模型以达成精确需求。\n\n在两个月前关于 Prompt 研究的文档就已经非常多了，这里不做推荐，因为不看文档，直接翻译成英文大概率是有效的。\n\n### 文生图与图生图\n\n文生图与图生图本质上没有什么不同，文生图只是将图片输入换成了一张随机的噪声图。\n\n## 二、分辨率\n\n不同模型在生成时有最佳的分辨率，大部分都在 512px 左右，不超过 1024px。\n\n提高分辨率不仅是单纯放大图片，AI 能够用模型细化图片。\n\n### 图生图\n\nimg2img(图生图) 大部分时候被用来衍生，但是其效果最好的是将 txt2img 的低分辨率图放大（用同一个seed）。\n\n在 web-ui 中，仅缩放(just-resize)为无 AI 的放大算法处理。 AI 放大使用的 Latent 方法即将被归入 Upscaler，也就是下面说的 Hires fix。\n\n### Hires fix\n\nHires fix（高清修复）的作用是用 AI 从小图生成高分辨率图，处理用得好可以提高大幅提高图片上限。upscaler（放大器）可选几种放大方法，其中的 Latent 就是 SD 的画图方法，文生图与图生图均是这个方法。\n\n在 web-ui 中， 默认只有 txt2img 可用，因为 img2img 本身就可以做图片放大。另外，有专门的 upscaler 选项卡。\n\n使用 Latent upscaler (图生图) 放大到高分辨率图涉及局部重绘，部分模型支持较好，如 Pastel。但在 512 px 完成度就很高的模型上通常没有效果，或者更差（比如炫彩厚涂），这种用 GAN 类 Upscaler 直接放大比较好。\n\n值得注意的是 web-ui 的 Hires fix 有两版算法，目前 txt2img 是新版， img2img是旧版，效果有一些小差别，很难比较好坏。\n\n## 三、采样方法\n\nSampler（采样方法） 决定笔触和结构的稳定性。常用的有：\n\n- Euler a 是一个规整稳定的采样方法，出的图较平滑\n- DDIM 是一个过程不算稳定的采样方法，通常看起来比 Euler a 细节更多\n- DPM++ 2M Karas，最近在用的，过程稳定但有细节\n\n有部分 Sampler 对高分辨率（1024px 以上）支持不好。\n\n## 四、 ControlNet\n\nControlNet 目前是一个需要额外安装的插件，可以用于给线稿上色并细化，或从草图细化。\n\n你的草图可以决定的是：\n\n- 60%-100% 的线条位置（构图）\n- 主要色块位置。需要搭配图生图，并且色块越碎越好，需要提前做好整体的光影效果。因为 大部分 AI 只会画整，会画碎的比较少（Pastel 会画碎）。\n\n细化风格（画风）由模型决定，不由你的草稿决定。模型风格对于画风影响非常关键。Prompt 也可以影响画风。\n\n细化内容（画的具体是什么）由 Prompt 、草稿、模型共同决定，调整 CFG、Denoise 、 ControlNet 的 Weight 可改变三者比例。\n\n下图为自己的较草的线稿使用 ControlNet 与 Anything V3.0 上色：\n\n![Control-Net](https://cdn.jsdelivr.net/gh/NamiLing/upic/uPic/00275-3225619170-masterpiece,%20best%20quality,%20illustration,face,%20right%20hand,%20atomespheric,%20cold,%20sunshine,%20sky,,%20high%20detail,%20flowers%20and%20leafs.jpg)\n\n（这个东西出名是因为某博说 ControlNet 初衷是洗稿……之前 Pixiv 也出过线稿上色的 AI，只是效果好和不好的差别，怎么没人说是搭配 PS 的线稿提取功能洗稿）\n\n## 五、Lora\n\nLora 是一种训练小模型的方法，可以在 15 张图以上生成稳定的单个角色图。\n\n已有大量角色图积累的流水线漫画苦力会比较省事，搭配 ControlNet 可生成固定姿势，或者使用线稿稳定地上色。但对于连续动作的细微差别不太行，细节演出表现依旧需要依赖线稿，或手动重绘\n\n训练过程分为裁剪、自动打标、训练，最终生成约 100M 左右的 Lora 网络。Web-ui 已自带。\n\n## 写在后面\n\n风格迁移渐渐成熟了，过拟合的问题在逐渐减少。减少过拟合的最终解决思路，还是把端到端的网络，按需求拆成了人为可控的 pipline。个人认为 AI 如果真的要作为工具，模块化的 pipline 是终点。\n\n直接出成图的是对已有作品的模拟，抽抽卡，融入不到创意的工作流。\n\n但是在发展好之前，地球可能已经枯竭了。\n\n![pastel-mix](https://cdn.jsdelivr.net/gh/NamiLing/upic/uPic/00162-1748765688-masterpiece,%20best%20quality,%20ultra-detailed,%20illustration,%201boy,%20Link%20in%20Breath%20of%20the%20wild,%20stronde%20hair,%20sun%20shine,water,%20emotio.jpg)","description":"AI 画画现状","keywords":"AI绘画, stable-diffusion, AI绘图, AI画画","date":"2023-02-21 08:00"},{"id":"dontstarvetogether-linux-server.md","title":"部署饥荒联机版Linux服务器","content":"此文为 Docker 版饥荒联机版服务器在 CentOS 下的部署教程。\r\n\r\n> 为什么要部署Linux服务器？因为玩到后面，只要一联机连主机都卡，闲得想试\r\n\r\n[这个中文教程](https://www.roci.ltd/dstserver/)讲了native steam版的安装方法，包括了Cent OS缺少的库，坑全踩了一遍写得十分详细。官方文档实在太拉，基本就是没有文档，像跨平台缺库这种事情也没有解决，没有脚本。不过教程中对于网络环境问题与mod的配置方法提得不多。\r\n\r\n我这里使用的是[Docker版本](https://hub.docker.com/r/jamesits/dst-server)。优点是\r\n\r\n- 国内的云平台对于Dockerhub的加速后走内网流量，不使用公网流量下载镜像。而且国内的服务器公网下载速度堪忧。\r\n- Docker版本的文档写得对用户友好，易上手\r\n- 文件管理集中，比较方便。原版服务器的mod和存档是分开放的\r\n\r\n也有一些在国内环境下比较要命的缺点\r\n\r\n- 网络环境原因，无法下载创意工坊mod。最近靠改 hosts 也不行了。\r\n- 如果想开代理下载，docker容器开代理（设置环境变量）非常麻烦，具体来讲\r\n  1. 如果每次开关代理都创建一个新的容器，Steam和游戏文件的更新都得再触发一次，又消耗流量又慢\r\n  2. 如果动态修改容器的配置文件，docker需要重启才能生效，所有docker服务都得宕机一会儿\r\n\r\n## 准备\r\n\r\n- 一台至少2G内存的服务器\r\n- 使用ssh连接服务器、传输并管理文件的技能\r\n\r\n## Docker的安装\r\n\r\n由于涉及到Docker镜像和Dockerhub加速的问题，具体安装步骤建议看docker的文档和各个云平台。\r\n\r\n我使用的腾讯云，见[安装 Docker 并配置镜像加速源](https://cloud.tencent.com/document/product/1207/45596)，大约花费2分钟。\r\n\r\n## 服务器防火墙设置\r\n\r\n需要放行 10999，11000，12346，12347 这四个端口的UDP流量。\r\n\r\n- 在国内云平台的控制台-防火墙中，放行服务器的这四个端口\r\n- 如果服务器上iptables有流量拦截，也需要放行\r\n\r\n## 饥荒服务器镜像的启动\r\n\r\n```bash\r\nmkdir ${HOME}/Klei # 创建存放数据有文件夹\r\n\r\n# 拉取镜像并在前台启动\r\n# 由于Steam要更新，根据网络环境可能要等比较久的时间\r\n# 如果实在无法连接，再考虑给容器挂个代理下载。但总体不建议容器挂代理，因为我不清楚挂代理后steam是连接到服务器的游戏端口还是连到代理的端口上去了，取消容器的代理也非常麻烦。\r\ndocker run --name dst -v ${HOME}/Klei:/data -p 10999-11000:10999-11000/udp -p 12346-12347:12346-12347/udp -it jamesits/dst-server:latest\r\n```\r\n\r\n以上命令执行期间，可以去准备一下游戏存档和Mod相关文件。\r\n\r\n## 准备游戏存档和Mod\r\n\r\n我使用的Mac，饥荒的游戏文件相关目录位于\r\n\r\n```bash\r\n# 游戏存档\r\nSAVE_DIR=\"~/Documents/Klei/DoNotStarveTogether/324927772/Cluster_1\"\r\n# mod下载目录\r\nMODS_DIR=\"~/Library/Application Support/Steam/steamapps/common/Don't Starve Together/dontstarve_steam.app/Contents/mods\" #\r\n\r\ncd $SAVE_DIR # 进入存档目录\r\n```\r\n\r\nwindows可以在饥荒游戏内点数据打开游戏存档，并在Steam中查看游戏的安装目录。\r\n\r\n### 准备存档信息\r\n\r\n点开[饥荒的账号](https://accounts.klei.com/account/info)，记下 **Klei User ID**。如果没有就注册一个。\r\n\r\n然后，新建`adminlist.txt`，并写入你的**Klei User ID。**\r\n\r\n```bash\r\n$ vim adminlist.txt\r\n# 写入以下内容\r\n你的Klei User ID\r\n```\r\n\r\n点开[自建饥荒服务器的页面](https://accounts.klei.com/account/game/servers?game=DontStarveTogether)，新建一个服务器，记下生成的Server Token，其他不用管。\r\n\r\n然后，新建 `cluster_token.txt`，并写入Server Token。\r\n\r\n```bash\r\n$ vim cluster_token.txt\r\n# 写入以下内容\r\n你的Server Token\r\n```\r\n\r\n### 准备mods\r\n\r\n不开mod的可以跳过这一步。\r\n\r\n由于国内环境没法下载mod，需要把对应的mod文件复制过来。我为了方便就全复制了\r\n\r\n```bash\r\ncp -r \"$MODS_DIR\" mods\r\n```\r\n\r\n先查看一下目前的存档开了哪些mod。\r\n\r\n```bash\r\n$ cat Master/modoverrides.lua\r\n# 开启的mod\r\nreturn {\r\n  [\"workshop-1172839635\"]={ configuration_options={ icebox_freeze=\"0.5\" }, enabled=true },\r\n  [\"workshop-1294206358\"]={ configuration_options={  }, enabled=true },\r\n}\r\n```\r\n\r\n然后，编辑 `mods/dedicated_server_mods_setup.lua` 文件，写入上面的mod编号\r\n\r\n```bash\r\n$ vim mods/dedicated_server_mods_setup.lua\r\n# 写入以下内容\r\nServerModSetup(\"workshop-1294206358\")\r\nServerModSetup(\"workshop-1595631294\")\r\n```\r\n\r\n至此，游戏存档和mods就准备好了。\r\n\r\n## 转移游戏存档和Mods至服务器\r\n\r\n上传游戏存档到服务器。打包和上传文件我一般使用GUI操作，用命令行的话是这样\r\n\r\n```bash\r\ncd ~/Documents/Klei/DoNotStarveTogether/324927772/\r\ntar -cvf Cluster_1.tar.gz Cluster_1 \r\nscp Cluster_1.tar.gz root@myserver:/Klei/\r\n```\r\n\r\n如果之前的服务器连接还在，等无新日志输出后使用control+c退出容器。如果已断开连接，重新用ssh登录服务器。\r\n\r\n然后可以看到在服务器的 `~/Klei/DoNotStarveTogether` 中有了一个 `Cluster_1` 存档。\r\n\r\n**转移游戏存档时，需要注意有两种情况（来自[文档](https://hub.docker.com/r/jamesits/dst-server)）**\r\n\r\n第一种情况是，如果自己的存档开启了洞穴，把自己的存档覆盖过去即可。\r\n\r\n```bash\r\nrm -rf Cluster_1\r\ntar -xvf Cluster_1.tar.gz\r\n```\r\n\r\n第二种情况是，自己的存档没有开启洞穴，需要\r\n\r\n1. 在自己的电脑中，存档的上一级有个 `client_save` 。复制下面的除了 `session` 外的所有文件到服务器的 `Cluster_1/save` 。\r\n2. 自己存档中的 `Cluster_1/save/session` 需要删除，其他文件可以直接覆盖\r\n\r\n存档覆盖完毕后，启动容器\r\n\r\n```bash\r\ndocker start -a dst\r\n# 如果最后输出了 Sim Pause 就代表 OK 了，按 ctrl + c 退出，容器继续后台运行\r\n```\r\n\r\n我第一次装Mod启动时发生了一个莫名其妙的 **Segmentation fault**，程序退出了，但是第二次启动就好了。搜了一下[相关issue](https://github.com/Jamesits/docker-dst-server/issues/48)，完全相同的情况，也是CentOS，偶尔发生，难稳定复现。\r\n\r\n## 游玩\r\n\r\n之前自己的存档叫什么名字就搜什么名字，加入就完事，好好玩吧w\r\n\r\n------\r\n\r\n参考资料：\r\n\r\n- [jamesits/dst-server](https://hub.docker.com/r/jamesits/dst-server)\r\n- [docker-dst-server issue](https://github.com/Jamesits/docker-dst-server/issues)\r\n- [饥荒独立服务器入门级快速搭建](https://www.roci.ltd/dstserver/)\r\n- [Guides/Don't Starve Together Dedicated Servers - Fandom](https://dontstarve.fandom.com/wiki/Guides/Don’t_Starve_Together_Dedicated_Servers)","description":"此文为 Docker 版饥荒联机版服务器在 CentOS 下的部署教程。","keywords":"游戏, 服务器, Linux, Docker, 摸鱼, 饥荒联机版","date":"2022-12-28 08:00"},{"id":"PPT母版的制作与使用方法.md","title":"PPT母版的制作与使用方法","content":"由于我需要批量编辑 PPT 的样式，但 PPT 没有组件化样式的概念，所以开始学习用母版。虽然之前也用过，但始终不明白 PPT 的迷之逻辑，有时候是调整了母版但不生效，或者调整了局部结果别的地方也被影响了……今天才大概明白了一点（还是 Figma 和 Sketch 的逻辑好懂……）所以从我的角度说一下对 PPT 的模版理解。这个问题明显视频解释更好，但不太想做视频（躺）因为每次做视频前写大纲都要写好久……图源 Github，图片不显示挂代理 Please。## 概念解释（母版/版式/主题）### 打开母版母版的入口在“视图”→“幻灯片母版”。Mac 上的快捷键是 `command + alt + 1`。### 什么是母版和版式母版，是 PPT “主题” 的一部分，可以对多张幻灯片的排版进行统一的修改。我们日常制作的 PPT，都会基于一个母版（虽然很多人不去用）。在后面的内容中，对于日常制作的 PPT，我会称为“PPT 内容”。一个正常的母版包含着一个“**幻灯片母版**”和多个“**版式**”。![母版结构](https://cdn.jsdelivr.net/gh/NamiLing/upic/uPic/Screen%20Shot%202021-11-11%20at%207.03.24%20PM.png)### 样式继承“**版式**” 会继承 “**幻灯片母版**”（以下简称为 **母版** ）中的一些元素的样式（包括位置、字体、大小、颜色等）。也就是说，只要更改 **母版** 里的样式，**版式**也会自动更新。所以是哪些元素可以被继承呢？在菜单栏里的“母版版式”中，有五个选项分别是- 标题- 正文- 日期和时间- 页脚- 页码以上就是所有样式可以被继承的元素。是的，你在母版上**只有这五个元素的样式可以被继承**。你可以尝试在“主题”选项中打开任何一个母版，会发现所有母版都是这五个元素。你无法擅自增加其他可以被继承的元素。并且以上显示的每个元素在母版上都只能设置一种样式，**你无法同时给标题设置两种样式。**也就是说，如果你有设置 **一级标题 + 二级标题** 样式的需求，你无法通过设置 **母版** 上的样式实现二级标题。你只能通过 **版式** 去设置二级标题。另外 **背景** 也可以被继承，但它属于在正式的 PPT 内容中不可编辑的元素。## 如何编辑元素样式选中元素，在“开始”选项里编辑即可。通常情况下，母版的排版需要设置得尽可能通用，之后的每个版式都将以母版为基准进行编辑。母版本身并不能直接被 PPT 内容所使用，做 PPT 能选择使用的只有继承了母版样式的 **版式**。## 版式如何继承母版### 继承标题样式选择一个版式（或点“插入版式”），给菜单里的“标题”打上勾。![标题继承](https://cdn.jsdelivr.net/gh/NamiLing/upic/uPic/Screen%20Shot%202021-11-11%20at%207.35.09%20PM.png)需要注意的是，如果你在“开始”里添加一个文本框，移动到标题的位置，并不会被 PPT 识别成标题。从外面粘进来的文本框也一样，只会被识别为“一个普通的文本框”。之后批量更新标题的样式时，也并不会被更新。所以在版式中设置正确设置标题的方法只有这一个——给标题打上勾。**想设置二级标题怎么办？**母版没有二级标题，只能用下面说的占位符实现。### 继承正文样式继承正文的正确方法，是点击上一节图中的“插入占位符” ，有好几个选项，一般选内容就可以了。此占位符生成的文本框的样式和 **母版** 中完全一致。如果说 **母版** 的样式是全局变量，**版式** 中再次修改的样式就是局部变量。对于**修改过的部分**，母版里对正文的更新不会导致版式中的正文更新。比如：- 母版中的正文字号是 20px- 版式中的正文字号不变，但是给加粗了- 修改母版中的正文字号为 22px- 版式中的正文字号变成 22px，但仍然加粗。> ❗️注意：不要从“开始”里新建文本框！也不要从母版界面外粘贴进来！>> 原因同上，非占位符生成的文本框，对其样式的修改并不会真正改到“正文”的样式。使用的时候就会发现了，更新版式了但 PPT 内容样式完全没更新……这种情况就是因为版式中的文本框不是占位符生成的所以如何实现二级标题？- 添加一个占位符- 添加文本样式### 继承日期和时间、页脚、页码在版式中，给“页脚”打上勾，以上三者的样式都会被继承。![其他继承](https://cdn.jsdelivr.net/gh/NamiLing/upic/uPic/Screen%20Shot%202021-11-11%20at%2011.06.48%20PM.png)## 使用版式退出“幻灯片母版”模式。在正常 PPT 内容的模式下，菜单栏“开始”中有个“版式”选项。在侧边栏选中一页（或多页） PPT，点击相应版式即可应用。![使用版式](https://cdn.jsdelivr.net/gh/NamiLing/upic/uPic/image-20211111231429427.png)> 如果你原来的 PPT 内容不是依靠版式中的“占位框”排版，而是靠手动创建的文本框，那直接应用版式是不会修改你原来的内容的。>> 换言之，如果想要达到批量、统一的排版效果，需要尽可能地应用版式给出的占位框，而不是手动创建的文本框。在“**版式**”选项下面一个“**重置**”，意思是重置到当前版式初始的样式。比如，版式中的文字样式设置的是纯文本，而 PPT 内容里修改为列表。点击“**重置**”会使得列表项消失，再次成为纯文本。### 刷新修改后版式版式修改后，有时候并不会自动应用到 PPT 内容上去，这种情况通常发生于在 PPT 内容中对占位框的位置、大小等等进行了调整。比如在 PPT 内容中调整过的占位框位置，将不再随着版式更新。如果需要复位（让占位框位置能随着版式更新），可以再应用一次版式。### 正在使用的版式对于被用到了 PPT 内容上的版式，只有一个建议：**不要随便删除版式里的元素！**这会导致已经被应用了版式的内容格式被清除……你需要去重新应用版式。------写在后面的吐槽：排版这种事情 **Layout + 组件化** 不香吗！PPT 的样式复用实在太局限了。看祖传的 PPT 排版看得我脑壳疼，每一页的小标题位置都不一样，字体也是用得乱七八糟的。排版的四原则，“亲密”“对齐”“对比”“重复”，每一项都很重要。但一项都不满足这是怎么做到的！强迫症（伪）哭晕在厕所。其实还是祖传的习惯问题。比如 Word，小时候我也是有过一段时间空格排版居中……现在谁还空格排版居中，我见一个打一个（狗头）","description":"","keywords":"powerpoint, 母版","date":"2021-11-12 08:00"},{"id":"github-hosttools.md","title":"Github hosts 更新脚本(MAC)","content":"此工具已更新至 [Github](https://github.com/Sansui233/mac-githubhosts-autoupdate)。\r\n\r\n- 安装卸载脚本\r\n- 自动定时运行\r\n- 平时不占内存，运行时几乎不占内存\r\n\r\n原文如下：\r\n\r\n------\r\n\r\n最近 Github 墙得越来越厉害了。写了个 Shell 工具，连不上的时候就更新一下。可以配合 Alfred 使用。\r\n\r\n使用的 host 源来自[这里](https://github.com/JohyC/Hosts)。其实用 SwitchHosts 更新也行，但我真的讨厌 Electron App……麻了，现在听个歌写个笔记 1个多 G 的内存就没了。\r\n\r\n也可以用写成定时程序后台运行，加个 LaunchDaemon 文件就行，但，我不会打包 Mac App……文件这么散着分发也太 emmm，而且别人装起来也麻烦……\r\n\r\n麻烦归麻烦还是要写的……\r\n\r\n文件和说明已经上传到 [Github](https://github.com/Sansui233/mac-githubhosts-autoupdate)。\r\n\r\n- 下面这个文件保存取名为 `hoststool`\r\n- 赋予执行权限 `chmod +x hoststool`。如果为了执行起来方便，可以放进环境变量的目录（比如/usr/local/bin）\r\n- 然后就可以使用 `hoststool -u` 更新 host 了，运行结果会发系统通知。之前可以自己看看 hosts 内容有没有问题。这是有几率失败的，因为用的 gittee 的 host 源，经常会提示文件疑似违规……这种时候再请求一次就好了，第二次就不违规了。我也不知道为什么。\r\n\r\n（定时任务的部分在后面）\r\n\r\n```shell\r\n#!/bin/bash\r\nshowHelp() {\r\n\techo \"-u [source_url]\tupdate github hosts. You can specify a custom host source\"\r\n\techo \"-b\tbackup /etc/hosts to /etc/hosts.backup\"\r\n\techo \"-r\trecover hosts.backup to hosts\"\r\n\techo \"-f\tlist files in /etc which contains \\\"hosts\\\"\"\r\n}\r\n\r\n\r\n# ====== Main =====\r\nif [ $# -eq 0 ]; then showHelp;exit 0;fi\r\n\r\n# CONF\r\ndownload_dir=\"$HOME/etc/hoststool\"\r\ngithub_hosts=\"https://gitee.com/yuchi-shentang/GithubHosts/raw/main/hosts.txt\"\r\nif [ ! -d \"$download_dir\" ]; then\r\n  mkdir -p $download_dir\r\nfi\r\n\r\ncase \"$1\" in\r\n\t-f)\r\n\t\tls /etc | grep hosts;\r\n\t\texit 0;;\r\n\t-b) \r\n\t\tsudo cp /etc/hosts /etc/hosts.backup;\r\n\t\texit 0;;\r\n\t-r) \r\n\t\tsudo cp /etc/hosts.backup /etc/hosts;\r\n\t\texit 0;;\r\n\t-u) \r\n\t\tif [ $2 ]; then github_hosts=$2;fi\r\n\t\tcurl -o ${download_dir}/hosts ${github_hosts};\r\n\t\tif [ $? -ne 0 ]; then\r\n\t\t\techo \"[ERROR] 获取远程 host 出错，请尝试更换 source 或检查 download_dir 读写权限\"\r\n\t\t\tosascript -e 'display notification \"获取远程 host 出错，请尝试更换 source\" with title \"hoststool\"'\r\n\t\t\texit 1\r\n\t\tfi\r\n\t\t\r\n\t\t# Validate host content length\r\n\t\tlines=$(awk '{print NR}' ${download_dir}/hosts | tail -n1)\r\n\t\tif [ $lines -lt 10 ]\r\n\t\tthen\r\n\t\t\techo '[ERRO] 远程 Github Hosts 无效（Gitee源不稳定），通常重试即可'\r\n\t\t\tosascript -e 'display notification \"远程 Github Hosts 无效（Gitee源不稳定），通常重试即可\" with title \"hoststool\"'\r\n\t\t\trm ${download_dir}/hosts\r\n\t\t\texit 1\r\n\t\tfi\r\n\r\n\t\t# Remove old content\r\n\t\tbegin=$(sed -n  '/# ==== Github Start ====/=' /etc/hosts | awk 'NR==1{print}')\r\n\t\tend=$(sed -n  '/# ==== Github End ====/=' /etc/hosts | awk 'END{print}')\r\n\t\techo \"Removing old hosts. Start at line \\\"${begin}\\\", End at line \\\"${end}\\\"\"\r\n\t\tcat /etc/hosts | sed \"${begin},${end}d\" > ${download_dir}/hosts.tmp\r\n\t\tif [ $? -ne 0 ]; then\r\n\t\t\t## Trip Failed\r\n\t\t\techo \"[INFO] 当前 Host中 无旧的 Github Host 标记可清除\"\r\n\t\telse\r\n\t\t\t## Trip Succeed, move result\r\n\t\t\techo \"[INFO] 清除旧的 Github Host 标记\"\r\n\t\t\tsudo cp /etc/hosts /etc/hosts.backup && sudo cp ${download_dir}/hosts.tmp /etc/hosts;\r\n\t\tfi\r\n\r\n\t\t# Add new hosts\r\n\t\tsudo bash -c \"echo '# ==== Github Start ====' >> /etc/hosts\" # Add github host\r\n\t\tif [ $? -ne 0 ]; then\r\n\t\t\techo \"[ERROR] 无root权限，请尝试运行脚本手动输入密码\"\r\n\t\t\tosascript -e 'display notification \"无root权限，请尝试运行脚本手动输入密码\" with title \"hoststool\"'\r\n\t\t\trm ${download_dir}/hosts.tmp\r\n\t\t\trm ${download_dir}/hosts\r\n\t\t\texit 1;\r\n\t\tfi\r\n\t\tsudo bash -c \"echo \\\"# Updated at $(date)\\\" >> /etc/hosts\" # Add github host\r\n\t\tsudo bash -c \"cat ${download_dir}/hosts >> /etc/hosts\";\r\n\t\tsudo bash -c \"echo '# ==== Github End ====' >> /etc/hosts\"\r\n\t\trm ${download_dir}/hosts.tmp\r\n\t\trm ${download_dir}/hosts\r\n\r\n\t\techo \"[INFO] Github Hosts 块更新于 $(date)\"\r\n\t\tosascript -e 'display notification \"Github Hosts 已更新\" with title \"hoststool\"'\r\n\t\texit 0;;\r\n\t-h|--help)\r\n\t\tshowHelp;\r\n\t\texit 0;;\r\n\t*)\r\n\t\techo \"Unknown command\";\r\n\t\tshowHelp;\r\n\t\texit 1;;\r\nesac\r\n```\r\n\r\n## 定时\r\n\r\n保存以下文件为 `hoststool.plist`。\r\n\r\n```plist\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\r\n<plist version=\"1.0\">\r\n<dict>\r\n<key>Label</key><string>hoststool</string>\r\n\r\n<key>ProgramArguments</key>\r\n<array>\r\n  <string>/usr/local/bin/hoststool</string>\r\n  <string>-u</string>\r\n</array>\r\n\r\n<key>RunAtLoad</key>\r\n<true/>\r\n\r\n<key>StartInterval</key>\r\n<integer>3600</integer>\r\n\r\n<key>StandardOutPath</key>\r\n<string>/Library/Logs/hoststool.log</string>\r\n\r\n<key>StandardErrorPath</key>\r\n<string>/Library/Logs/hoststool.log</string>\r\n\r\n</dict>\r\n</plist>\r\n```\r\n\r\n把 `/usr/local/bin` ，改成你存放脚本的路径。\r\n\r\n时间间隔为 3600 秒，可以自己修改。\r\n\r\n然后执行\r\n\r\n```shell\r\n$ sudo cp hoststool.plist /Library/LaunchDaemons\r\n$ sudo chown root:admin /Library/LaunchDaemons/hoststool.plist\r\n$ sudo launchctl load -w /Library/LaunchDaemons/hoststool.plist\r\n```\r\n\r\n执行完就会立刻运行一次脚本。由于定时任务是 root 用户不是个人用户，不会有通知，可以去 Console 看 log。","description":"Github hosts 更新脚本(MAC)","keywords":"Github, hosts, 更新, 脚本, Mac","date":"2021-08-07 08:00"},{"id":"hslrecord.md","title":"m3u8直播流实时录屏小记","content":"最近由于发现自己想回看的直播会被剪镜头，所以下定决心以后要学会录屏。但本人有强迫症，一般的录屏软件满足不了我的需要，主要是：1. 会录出鼠标操作、网络卡顿、水印等影响观感的画面2. 由于显示器和录屏软件的和原视频帧数可能不同步的问题，非常容易造成画面卡顿3. 体积远大于原视频，二压后画质失真重通常来讲，能拿直播时的视频流就别真的屏幕录制。本来视频分段就都在缓存里，应该是有比较容易实现的办法做到实时保存的才对。本文主要分为以下三个部分- m3u8简介- 保存视频分段与合并- DRM 版权保护问题## m3u8简介目前的各大流媒体平台视频（不管是直播还是回放）大多都会把视频切片为很小一段，长度可能10s左右，通常是.ts后缀的文件。而这一堆.ts文件的索引文件为m3u8文件。一个通常的m3u8文件是如下格式```text#EXTM3U#EXT-X-VERSION:3#EXT-X-TARGETDURATION:10#EXT-X-MEDIA-SEQUENCE:0#EXTINF:10.000000,#EXT-X-PRIVINF:FILESIZE=3192240https://website/xxx-00001.ts#EXTINF:10.000000,#EXT-X-PRIVINF:FILESIZE=3206904https://website/xxx-00002.ts#EXTINF:10.000000,#EXT-X-PRIVINF:FILESIZE=2576164https://website/xxx-00003.ts```也就是说，如果我们实时保存流媒体平台的视频，正常情况下，会保存一个.m3u8索引文件，和一堆.ts文件。有了这些文件我们可以直接使用支持m3u8的播放器（如IINA、VLC）进行播放。m3u8是 HLS(HTTP Live Stream) HTTP直播流格式的基础。## 保存视频分段与合并为MP4工具准备：- [ffmpeg](https://www.ffmpeg.org/)：强大的命令行视频处理工具，网上有很多安装教程，这里不重复- [Chrome插件-猫抓](https://chrome.google.com/webstore/detail/猫抓/jfedfbgedapdagkghmgibemcoggfppbb)：资源嗅探插件，下载需要科学上网- 一个多线程的下载器（为了下载速度更快），如 aria2，网上有很多教程，这里不重复- 一个支持**使用正则表达式批量替换文字**的txt编辑器，如sublime、vscode以上方法会比较硬核，傻瓜式的方法可只准备下面这一个- [Chrome插件-Stream Recorder](https://www.hlsloader.com/)：傻瓜式HLS一键保存插件，下载需要科学上网### 方法一：下载所有分段并合并（稍硬核）首先打开一个视频网站，这里以优酷的综艺为例。打开后点击右上角的猫抓插件，会看到一个m3u8文件，和一堆ts文件。![猫抓.png](https://cdn.jsdelivr.net/gh/NamiLing/upic/uPic/1240.png)首先我们可以先点下载按钮下载到本地 .m3u8 文件。猫抓插件提供了对m3u8的解析，点击文件旁的放大镜就可以看见。![image.png](https://cdn.jsdelivr.net/gh/NamiLing/upic/uPic/1240-20210512174624858.png)复制所有的内容，放到支持多线程的下载器里下载。下载完成后，先整理一下本地的文件目录成如下![本地文件](https://cdn.jsdelivr.net/gh/NamiLing/upic/uPic/1240-20210512174641967.png)（为了看起来更清晰，以上各个文件名我已修改）然后修改m3u8文件。我这里使用的编辑器是vs code。m3u8文件里的原链接是这样的：```texthttps://valipl-vip.cp31.ott.cibntv.net/67756D6080932713CF4E/0300609724C6163EBF1C35DAC076221D-4673-49D8-A932-70FA-00001.ts?ccode=0502&duration=6237&expire=18000&psid=28ae2c9bf869cf6f9ae28c814098b5fe43346&ups_client_netip=3b4081be&ups_ts=1620641730&ups_userid=300380294&utid=Xd0WGHofZhACAXtwDp2%2BGj22&vid=XNTE0MDg5MTgyOA&sm=1&operate_type=1&dre=u38&si=78&eo=0&dst=1&iv=1&s=cbcad844c5894d209b9f&type=mp4hd3v3&bc=2&hotvt=1&t=d91e686d230165f&cug=1&rid=20000000DC17B06335EBB96917703D4A6B2DA12102000000&vkey=B84707ca23f9e5899f9b0b9d97e4d1851```非常的长。我们首先要做的，是去掉每一行 `?` 之后的所有字符。使用正则表达式批量替换，在查询里输入`\\?.*?\\n`，替换为 `\\n` 。注意要勾选正则表达式的符号。![replace query](https://cdn.jsdelivr.net/gh/NamiLing/upic/uPic/1240-20210512174711034.png)然后要替换的是`https://...`内容，替换为本地的文件路径，让最后的剩下文件名指向本地的文件。![替换本地文件.png](https://cdn.jsdelivr.net/gh/NamiLing/upic/uPic/1240-20210512174718097.png)替换后的.m3u8文件是这样的![m3u8文件](https://cdn.jsdelivr.net/gh/NamiLing/upic/uPic/1240-20210512174727634.png)此时可以使用支持m3u8的播放器打开m3u8文件，观看是视频能否正常播放。能正常播放后，使用ffmpeg合并为mp4，不用转码速度就很快```shellffmpeg -i index.m3u8 -vcodec copy -acodec copy output.mp4```完成#### 缺点对于回放的完整视频文件，通常会提供m3u8索引文件，但对于直播通常是没有m3u8索引的。这时候依然可以按上述方法下载所有分段，用ffmpeg进行合并。但是直播时无法一次获取到所有ts的链接，而是边播边给。就算猫抓能批量复制链接，但为了防止直播时出什么意外（比如浏览器无响应了、突然断电），看一会儿就得存，无法好好享受直播，最后上千个文件的列表，也变得很麻烦。### 使用 Stream-Recorder插件 傻瓜式保存上一个方法的所有步骤，其实都能用这个插件搞定- [Chrome插件-Stream Recorder](https://www.hlsloader.com/)：傻瓜式HLS一键保存插件，下载需要科学上网使用上也很简单。视频播放开始后，点击这个按钮就行了，自动保存视频分段，同时合并为一个mp4。![Stream Recorder.png](https://cdn.jsdelivr.net/gh/NamiLing/upic/uPic/1240-20210512174735807.png)简单介绍一下，这个插件主要有三个模式- Live：实时获取直播时的ts分段，可以没有索引文件自动合并- HLS：看回放时获取ts分段，可以没有索引文件自动合并。但是像B站这种用m4s非标准HLS的似乎用不了。- Capture：实时获取正在播放的HLS，直播回放均可，大部分视频格式都能用，兼容性最好。缺点是真的要一直播着。也就是直播时使用Live抓取或Capture录屏，且可以自动合并视频音频，相当于直播时边看边存。看回放时使用HLS或Capture保存视频。## DRM 版权保护问题并不是所有的m3u8视频都能这么下载，有的经过了DRM(Digital rights management)的保护。这样的视频下载下来也是无法直接合并的。有版权保护的视频，使用猫抓查看m3u8解析时，可以发现这么一行![DRM m3u8.png](https://cdn.jsdelivr.net/gh/NamiLing/upic/uPic/1240-20210512174747126.png)Stream Recorder 也不支持加密视频的下载。解密不在讨论范围内（我也不会），总得来说还是尽量支持正版。------PS：目前风气真的太严了，如果不是发现片段被删减，也不会想到去研究怎么录屏。既然花了钱买了相应的单场直播，也说明了会提供回放，要求拥有一个和直播时相同的回放个人觉得并不过分。最终给一个删减版，感觉这服务有些不值得，即便直播和录屏混剪都得给剪出来一个完整的版本。","description":"","keywords":"web, m3u8, hsl, 扒视频","date":"2021-05-12 08:00"},{"id":"gwf-law.md","title":"关于GFW的法律相关定罪之“非法获取计算机系统数据、非法控制计算机信息系统罪”","content":"关于GFW的法律定罪之“非法获取计算机系统数据、非法控制计算机信息系统罪”。\n\n之前看“不能使用该名称”的GFW定罪系列文章，阐述了司法实践中对于计算机概念不清晰导致的问题，觉得非常学术，逻辑上真的很有道理。所有回避攻击的手段怎么就变成入侵计算机或者非法访问网站了呢？\n\n但最近在阅读Clash的源码时，突然开始觉得，“非法获取计算机系统数据、非法控制计算机信息系统罪”对于节点的提供者或许是成立的。\n\n> **《中华人民共和国刑法》第285五条第2款** 违反国家规定，侵入前款规定以外的计算机信息系统或者采用其他技术手段，获取该计算机信息系统中存储、处理或者传输的数据，或者对该计算机信息系统实施非法控制\n\n下面说说为何觉得成立。\n\n包括Clash在内，所有翻墙软件都具有两个部分，一个被称为outbound，为将加密后的数据发送至远程服务器（或接收数据）。outbound的常用协议为常见的ss、ssr等等。这个部分没有上述罪名的问题。\n\n另一个部分称为inbound，此部分接管计算机系统的tcp请求(通常使用http或socks5)，将计算机系统原本应直接发送到服务器的流量接管到翻墙软件中。此系“非法获取计算机信息系统数据”的可能\n\n在获取inbound传入的传输数据之后，使用outbound指定的协议，与proxy服务器建立加密的连接，通过节点服务器发送流量。而节点服务器接管流量并返回到用户端时，传输的数据同样要使用软件的inbound写入浏览器。此系“非法控制计算机信息系统”的可能。\n\n不论如何，“获取计算机信息系统中传输的数据”是肯定无法避免的。此时的问题在于：1.是否违反国家规定（非法性）这一点非常口袋了，又要回到信道上。2.获取数据的客体并非是人，而是计算机程序，虽然程序的制作者并没有获取任何数据，但节点的提供者是可以的，很好的例子就是机场面板里可以显示用户最近使用的IP。\n\n对于翻墙软件的制作者而言，如果上述对于节点提供者的“非法获取计算机信息系统数据、非法控制计算机信息系统罪”成立，则“提供侵入、非法控制计算机信息系统的程序、工具罪”也相应成立。\n\n当然，这一切的前提，都建立在“非法性”的基础上。什么样的技术用于做什么合法没有规定。最受争议的“非法信道”在司法实践中也一直脱离了法律中“物理信道”的解释，涵盖了非物理信道，可以称其为口袋之源。\n\n参考：\n\n- [提供侵入、非法控制计算机信息系统的程序、工具罪](https://zh.wikipedia.org/wiki/提供侵入、非法控制计算机信息系统的程序、工具罪#cite_note-lx-1)\n- [非法获取计算机信息系统数据、非法控制计算机信息系统罪](https://zh.wikipedia.org/wiki/非法获取计算机信息系统数据、非法控制计算机信息系统罪)","description":"一些法律研究","keywords":"GFW, 法律","date":"2020-11-07 08:00"}]