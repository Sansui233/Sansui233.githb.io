<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Sansui's blog</title>
        <link>https://sansui233.com</link>
        <description>记录学习和生活的个人博客</description>
        <lastBuildDate>Mon, 04 Sep 2023 17:55:31 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-CN</language>
        <copyright>All rights reserved 2022, Sansui</copyright>
        <atom:link href="https://sansui233.com/rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Windows调整之基础功能与常用插件]]></title>
            <link>https://sansui233.com/posts/2023-08-30-windows-tweak-and-enhancement</link>
            <guid>https://sansui233.com/posts/2023-08-30-windows-tweak-and-enhancement</guid>
            <pubDate>Wed, 30 Aug 2023 09:42:20 GMT</pubDate>
            <description><![CDATA[让 windows11 变得更好用的一些自定义设置]]></description>
            <content:encoded><![CDATA[<p>自从感觉内存硬盘越来越不够用，以及对老黄的显卡需求，从 mac 换成了多年不见的 windows11 。做了非常多的调整，至现在基本稳定，记录下来以供参考。</p>
<h2>基本调整与基础功能增强</h2>
<ul>
<li>
<p><strong>右键菜单</strong></p>
<p>使用 <a href="https://nilesoft.org/download">shell</a>，恢复被藏到“更多选项”中的的右键菜单项，同时保持 win11 的设计风格。并且带有用 vs code 打开和用 windows Terminal 打开。虽然说 Windows Terminal 自己也有一个“用终端打开”，但那个有 Bug，打开的目录会被两个程序同时占用句柄，导致无法对目录本身进行操作。</p>
</li>
<li>
<p><strong>批量重命名</strong></p>
<p>使用 <a href="https://learn.microsoft.com/en-us/windows/powertoys/">Powertoys</a> 中的 PowerRename，可选中多个文件后右键批量重命名，整理素材时太有用了。大致与 mac 的多文件重命名相同。缺点是不能改成 <code>同名称 + 编号</code> 。但系统自带的重命名恰好只能同名编号。Powertoys 有很多别的小工具，但都不够好用，按需关掉。</p>
</li>
<li>
<p><strong>快速预览</strong></p>
<p>使用 <a href="https://github.com/QL-Win/QuickLook">QL-Win/QuickLook</a> ，选中文件后按空格直接预览，再按空格关闭。对于看各种后缀的文本文件、zip 压缩包目录结构非常有用。也用了 mac 后没法割舍的一个功能。前面说的 Powertoys 也有，但快捷键一定要加 ctrl（真的难按），功能更少，图片不能显示大小，无法定制。</p>
</li>
<li>
<p><strong>文件快速搜索</strong></p>
<p>使用 <a href="https://www.voidtools.com/">Everything</a>，我大部分使用场景是在卸载程序后，清除残留的下载数据与用户数据。</p>
</li>
<li>
<p><strong>快速启动/全局搜索</strong></p>
<p><a href="https://fluentsearch.net/">Fluent Search</a>，按 <code>alt+ 空格 </code> 快速在中央唤起搜索栏以快速进入目录、启动程序。相比于 windows 自带的 search，可以搜索到绿色程序。相比于 <a href="https://www.flowlauncher.com/">Flow Launcher</a>，有好一万倍的排序。而更老的 <a href="https://www.listary.com/download">Listary</a>，无法搜索绿色软件，排序也很拉。经过多次对比后，只有 Fluent Search 能在大量同名目录中快速定位到我要找的目录，而不会被一堆杂乱的东西包裹。</p>
</li>
<li>
<p><strong>优化合集</strong></p>
<p><a href="https://github.com/hellzerg/optimizer">hellzerg/optimizer</a> 微调 windows 的合集程序，包括禁止系统更新、改 hosts 文件刷新 DNS、移除开机启动项、添加自定义右键菜单等。</p>
</li>
<li>
<p><strong>历史剪贴板</strong>：在 <code>设置→系统→剪贴板</code> 中启用。</p>
</li>
<li>
<p><strong>屏幕颜色配置文件(ICC Profile)</strong></p>
<p>在 <code>设置→屏幕→显示配置文件</code> 中，换成对应屏幕的sRGB文件。否则对于广色域屏幕，某些不读 ICC Profile 的照片查看器会出现色彩过饱和的情况。</p>
</li>
<li>
<p><strong>输入法</strong></p>
<p>微软输入法需要改成回车时键入英文，否则会清空，不方便中英混输。不过作为一个五笔用户，我现在使用的是基于 Rime 的 <a href="http://98wb.ysepan.com/">98五笔输入法</a> 和 <a href="https://github.com/Sansui233/98wubi">我的配置</a>。<del>因为微软输入法 shift 加 空格会标点变全角，而这个功能在中英混输时非常容易触发，还不能改掉，实在太弱智了</del></p>
</li>
<li>
<p><strong>关闭顶部自动布局</strong></p>
<p>关闭 <code>系统→多任务处理→贴靠窗口</code>。此功能乍一看非常贴心，实则非常容易阻碍鼠标精准排列窗口，尤其是想把上沿拉到顶部时。不建议使用鼠标时开启，更适合手指操控设备。</p>
</li>
<li>
<p><strong>多线程下载器</strong></p>
<p>使用 <a href="https://aria2.github.io/">aria2</a>，在网上抄了一个配置文件，并且让 chatgpt 写了一个开机自启脚本。面板使用的是 Chrome 插件 <a href="https://chrome.google.com/webstore/detail/mpkodccbngfoacfalldjimigbofkhgjn">Aria2 Explorer</a>，考虑到都是在浏览器中下载，没必要使用独立的客户端 App。</p>
</li>
<li>
<p><strong>与手机互传文件</strong>（折腾但稳定版）</p>
<p>使用 <a href="https://github.com/alist-org/alist">alist</a> 进行磁盘目录映射，并且使用 <a href="https://github.com/jeessy2/ddns-go/wiki">DDNS-Go</a> 动态绑定本机的 ipv6 地址到公网。手机上将相应的 alist 页面添加到主屏幕，便可在该页面互传文件。好处是能走局域网，速度快，不同网络环境下可用，可远程传输等等。依然让 chatgpt 写脚本将两个程序加入开机启动。</p>
</li>
</ul>
<h2>音频调整</h2>
<ul>
<li>
<p><strong><a href="https://sourceforge.net/projects/equalizerapo/files/">Equalizer APO</a></strong></p>
<p>调全局声音的均衡，需要搭配 <a href="https://github.com/jaakkopasanen/AutoEq">Autoeq</a> 仓库中说的 peace 插件使用（现在好像直接叫autoeq.app）。耳机发烧友的必备。注意蓝牙耳机无法使用卷积eq。</p>
</li>
<li>
<p><strong>内录用虚拟声卡：<a href="https://vb-audio.com/Cable/">VBCABLE_Driver</a></strong></p>
<p>网上有很多教程，为轻量级内录解决方案。另外如果系统带有 xbox，用 xbox 的录制视频是默认走的内录。</p>
</li>
<li>
<p><strong>降低 Midi 键盘延迟</strong></p>
<p>键盘连接电脑练琴，无独立声卡时，可用 <a href="https://asio4all.org/">ASIO4ALL</a> 降低延迟。效果显著。缺点是 ASIO 是设备独占的，比如宿主软件使用 ASIO 到耳机，那看 b 站视频就只能外放（或者别的耳机/音响）。</p>
</li>
</ul>]]></content:encoded>
            <category domain="https://sansui233.com/categories/折腾">折腾</category>
        </item>
        <item>
            <title><![CDATA[图像超分辨率工具推荐]]></title>
            <link>https://sansui233.com/posts/20230822-Super_resolution_models_and_tools</link>
            <guid>https://sansui233.com/posts/20230822-Super_resolution_models_and_tools</guid>
            <pubDate>Tue, 22 Aug 2023 22:20:54 GMT</pubDate>
            <description><![CDATA[AI图像放大模型+工具推荐]]></description>
            <content:encoded><![CDATA[<p><del>推特</del>，现在叫X.com，是我的桌面壁纸来源，但是推特的图压缩得非常糊，喜欢的动画人基本也只传 1080p 图，导致壁纸糊上加糊。因此需要使用 AI 放大模型进行图像处理。</p>
<ul>
<li>放大效果外链预览：<a href="https://imgsli.com/MjAwMDcx">Comparison</a></li>
<li>细节对比：<br/>
<img src="https://raw.githubusercontent.com/NamiLing/upic/master/picgo/comparison.jpg" alt=""/></li>
</ul>
<p>文章分为三个部分：</p>
<ul>
<li>图像处理工具</li>
<li>AI 图像放大模型</li>
<li>如何使用</li>
</ul>
<h2>图像处理工具</h2>
<h3>1. <a href="https://github.com/chaiNNer-org/chaiNNer">chaiNNer</a></h3>
<p>一个无代码的图像处理自动化工具，可以实现批量改大小、调色、压缩、拼接等等等。同时也支持用 AI 对图像放大，也能接入 Stable Diffusion 的工作节点，上限非常高。缺点没有内置模板，即便是很小的功能（比如文件批量重命名）都需要自己创建。</p>
<p>应用内置使用文档，不过不看文档也能一眼知道怎么用。</p>
<p><strong>只有英文，没有中文。</strong></p>
<ul>
<li>传送门：<a href="https://chainner.app/">chaiNNer</a></li>
</ul>
<h3>2. <a href="https://imagestool.com/zh_CN/">imagestool</a></h3>
<p>对于单张图和 gif 的常见处理小工具合集，网页打开即用，完全本地运行无隐私问题。特点是非常易用，支持小批量处理，支持 pipline，也就是说如果想在调整大小后转换格式再压缩，不需要每一步都上传下载图片，可以处理完每一步直接选下一步，只下载最终的处理结果。</p>
<ul>
<li>传送门：<a href="https://imagestool.com/zh_CN/">imagestool</a></li>
</ul>
<h2>AI 图像放大模型</h2>
<p>超分辨率成像(Super-Resolution，简称 SR) 是一种提高图像分辨率的技术，通俗的叫法就是图像放大。如果你曾经使用过 Photoshop 对小图进行放大，会发现放大后的边缘总是非常模糊，并且用锐化等操作无法弥补，这是传统方法的在图像放大上的缺陷。</p>
<p>但是神经网络（Neural Networks，简称NN）的出现对图像放大的效果带来了极大的提升，几年前就已经有不少 AI 图像放大的应用，但最近两年的模型效果尤其好。下面介绍几个现阶段应用上比较火的模型。</p>
<h3>1. <a href="https://github.com/JingyunLiang/SwinIR">SwinIR</a></h3>
<p>2021年基于 Transformer 的图像超分辨率模型，放大任何图片的效果都非常好。风格偏锐利且干净，且参数少，处理速度快。此模型分为 3 类，经典图像超分辨率（Classical image SR）、轻量级图像超分辨率（Lightweight image SR）、真实世界图像超分辨率（Real-world image SR）。</p>
<ul>
<li>下载链接： <a href="https://github.com/JingyunLiang/SwinIR/releases/tag/v0.0">Release  · JingyunLiang/SwinIR</a></li>
</ul>
<p>可下载的版本很多，不知道选哪个的就选 <a href="https://github.com/JingyunLiang/SwinIR/releases/download/v0.0/001_classicalSR_DIV2K_s48w8_SwinIR-M_x4.pth">001_classicalSR_DIV2K_s48w8_SwinIR-M_x4.pth</a> ，这个为4倍放大的模型，也是 Stable Diffusion 的 SwinIR 预置模型。</p>
<h3>2. <a href="https://github.com/xinntao/Real-ESRGAN">Real-ESRGAN</a></h3>
<p>2021年的经典图像超分辨率模型，这论文出来后大家疯狂在它基础上卷，基于 ESRGAN 改进的模型和论文非常非常多。不过最初的版本也已经足够好用。</p>
<p>下载链接：<a href="https://github.com/xinntao/Real-ESRGAN/releases">Releases · xinntao/Real-ESRGAN</a></p>
<p>依旧版本很多，不知道下哪个的下载 <a href="https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.1/RealESRNet_x4plus.pth">RealESRNet_x4plus.pth</a> 即可。</p>
<h3>3. 4x-AnimeSharp</h3>
<p>基于 ESRGAN 架构的动漫类放大，<del>可能由于训练集选得好</del>，在众多动漫类放大中它可以很好地处理景深，其他的Anime模型多少在景深部分会有一些清晰过度的问题，包括著名的 <a href="https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.2.4/RealESRGAN_x4plus_anime_6B.pth">RealESRGAN 动漫模型</a></p>
<ul>
<li>下载链接：<a href="https://openmodeldb.info/models/4x-AnimeSharp">AnimeSharp - OpenModelDB</a></li>
</ul>
<p>OpenModelDB.info 上有更多的微调模型，可以试试。总体来说，AI 放大的图像质量目前来说还是乍一看可以，涉及商用美术的话质量仍然不过关。<del>如果商用美术能过关，岂不是能画糊图然后丢AI出高精图了。</del> 作为壁纸放大非常合适，即便是补充的细节不能推敲，但把像素精度补齐到屏幕分辨率带来的视觉提升也是非常大的。4k壁纸就是比1080p看起来舒服。</p>
<h2>如何使用</h2>
<p>使用 chaiNNer 时可照抄下图结构，使用 4x-AnimeSharp 模型放大原图、重命名图片并保存。</p>
<p><img src="https://raw.githubusercontent.com/NamiLing/upic/master/picgo/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-22%20213633.jpg" alt="chaiNNer"/></p>
<p>如果使用的是 <a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui">stable-diffusion-webui</a> ，Extra Network 选项卡中也有预置模型，可以使用 SwinIR 和 ESRGAN。</p>
<hr/>
<p>可能对您有用的资料：</p>
<ul>
<li><a href="https://openmodeldb.info/models/4x-AnimeSharp">4x-AnimeSharp</a></li>
<li><a href="https://phhofm.github.io/upscale/">Interactive Visual Comparison of Upscaling Models</a></li>
</ul>
<hr/>
<p>PS：我在尽力不要让语句变得不要和写论文一样啰嗦，但总是难以避免……以及我原本想写个内置的交互式组件来演示图像前后的区别，这也是我最初架构博客时选用 mdx 的原因，但真的开始写的时候……怎么还要多写一个东西？好麻烦！还要考虑 rss 兼容的问题，之后再补吧，现在写什么都像坐牢。</p>
<p>PPS：强烈建议无代码应用都能开发个template market……</p>]]></content:encoded>
            <category domain="https://sansui233.com/categories/折腾">折腾</category>
        </item>
        <item>
            <title><![CDATA[碎碎念001]]></title>
            <link>https://sansui233.com/memos</link>
            <guid>https://sansui233.com/memos?id=2023-08-21</guid>
            <pubDate>Mon, 21 Aug 2023 00:48:28 GMT</pubDate>
            <content:encoded><![CDATA[<h2>2023-09-03</h2>
<p>恶补 <a href="https://github.com/type-challenges/type-challenges">TS 类型体操</a>。因为每次想写可扩展的库就会发现，笑死，根本不会类型推断。总不能写啥都定死配置吧……说到底还是缺对 any 类型的把控，any就是动态类型，要写类形推断必定是因为有动态类型，在这都不说。像Go这种泛型出前，不同类但同样的逻辑的签名也要重新写一个函数。虽然可以在外层再封装到公共函数里，但调用方式就不一样了，有的方法抽象出来就应该在类上，还是泛型合适。强迫症这样真的很影响写东西，有一半多的时间花在标注上。</p>
<h2>2023-09-01</h2>
<p>为什么，ts的装饰器，不能单独修饰方法只能修饰类啊！反复写 try catch 很累的好吧！还不如被吐槽一万年的 go 的 if err 呢！我需要snippet……而且类只是个原型链的语法糖，但我用不到类啊！我真是只是想给一个文件里的方法都加个统一的错误处理而已，求求了。vscode没有什么好用的snippet插件</p>
<h2>2023-08-31</h2>
<p>又写到了 Promise，感觉快忘完了汗，还是 chatgpt 教我转换写法。形式上的区别大概是</p>
<ul>
<li>需要包一层 Promise 的异步方法需要一个回调函数，大部分时候参数是 err 和 data。而能使用 await 的方法无回调函数，直接返回 data。对于 err，使用 try catch 处理。</li>
</ul>
<p>在 fs 中的 fs.readFile 是基于回调函数的，只能在外面包一层 Promise，但是 Promise 写起来很长，并且不是人读的顺序。可以使用 <code>fs.promises.readFile</code> ，直接包好了一层promise，然后可以await 写了。</p>
<p>我当时学 Promise 也挺痛苦面具的。JS 这一语言抽象方式不知道算不算是独一无二另辟蹊径格格不入个性十足……但由于是浏览器的唯一指定语言嘛，嗯大家都在用就不显得小众了。真的是纯拍脑袋做的抽象，和现实哲学抽象没有毛联系，生态决定一切</p>
<p>另外chatgpt 感觉比bing好用，不得不说 bing 的实时检索反而是拉垮了回答质量。不相关的检索回答相比迭代了这么多次逻辑清晰的 chatgpt 的生成，哒咩哒咩。外部知识库看来有时候不一定是好事，还是得看怎么用吧。</p>
<h2>2023-08-30</h2>
<p>强烈推荐 Chrome 的这个<a href="https://chrome.google.com/webstore/detail/vertical-tabs-in-side-pan/akahnknmcbmgodngfjcflnaljdbhnlfo?hl=zh-CN">侧边标签页</a>插件，得益于 Chrome 新版自带的侧边栏，这个插件比之前用过的所有页面内/外的侧边栏都稳定，当查文档几十个窗口时太有用了，看得全标题也方便随时关。有 Arc 的布局那味了。</p>
<p>改东西改智障了，居然忘了 JSX 转 JS 是 React.createElement。我直接调用函数，汗，还在想怎么改个语法就没法使用 ServerSide Rendering……最后居然是做最小复现时用 Next.js 的组件发现这个弱智问题的。好想有大佬交流哇，好想去能问问题的环境。虽然自己的犯问题似乎都很傻逼……</p>
<h2>2023-08-21</h2>
<p>由于之前的电脑接近丢失状态，找不回之前的文件，博客也停止活动了相当长的一段时间。嗯。现在决定清空，回到我的快乐小窝。还是需要一个没有任何人看的地方来吐槽的。推特吐槽着吐槽着就渐渐有人看，可能是整天中二精神病非主流言论过于显眼，吓得我现在只点赞……我都忘了我的第一个互关是怎么来的。微博倒是没有什么人看，但微博，额，各种东西都很难发出去，总觉得有人在监视你，和平台去斗智斗勇太累了。</p>]]></content:encoded>
            <category>Diary</category>
        </item>
        <item>
            <title><![CDATA[Welcome to sansui's blog]]></title>
            <link>https://sansui233.com/posts/welcome</link>
            <guid>https://sansui233.com/posts/welcome</guid>
            <pubDate>Thu, 24 Mar 2016 19:23:17 GMT</pubDate>
            <content:encoded><![CDATA[<p>这个文件记录了此博客的外观变化。从2016年开始，使用 hexo 建立博客。</p>
<h2>2019-03-24</h2>
<ul>
<li><a href="https://github.com/litten/hexo-theme-yilia">yilia</a>，一个hexo官网没有的但很多人都知道的主题。移动端的优化很好。偏重于内容，挺生活化的，搜索也很全。</li>
<li><a href="https://cloudy-liu.github.io/2018/07/14/Hexo%E6%9B%B4%E6%8D%A2%E4%B8%BAGitTalk%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/">yilia接入gittalks评论</a>。</li>
<li><a href="https://blog.csdn.net/lynnbest/article/details/79845944">Hexo yilia 主题一揽子使用方案</a></li>
</ul>
<h2>2020-11</h2>
<p>换成了 Hugo 的 Loveit。</p>
<h2>2020-12</h2>
<p>逐渐偏黑白设计感。</p>
<ul>
<li><a href="https://github.com/aircloud/hexo-theme-aircloud">hexo-theme-aircloud</a></li>
<li><a href="https://github.com/SuperKieran/TKL">tkl</a></li>
</ul>
<h2>2022-05-13</h2>
<p>用 NextJS 重构中。将逐渐脱离通用博客框架。</p>
<h2>2023-08-21</h2>
<p>文档数据丢失。内容慢慢重写。</p>]]></content:encoded>
            <category domain="https://sansui233.com/categories/其他">其他</category>
        </item>
    </channel>
</rss>